[{"compiler":[[15,10]],"method":["search"],"sampling":[[12,0.4992678165435791,0.00024390220642089844,0.50048828125],[11,0.4990239143371582,0.0004878044128417969,0.50048828125],[10,0.4985361099243164,0.0009756088256835938,0.50048828125],[9,0.4975605010986328,0.0019512176513671875,0.50048828125],[8,0.4956092834472656,0.003902435302734375,0.50048828125],[7,0.49170684814453125,0.00780487060546875,0.50048828125],[6,0.4839019775390625,0.0156097412109375,0.50048828125],[5,0.468292236328125,0.031219482421875,0.50048828125],[4,0.43707275390625,0.06243896484375,0.50048828125],[3,0.3746337890625,0.1248779296875,0.50048828125],[2,0.0,0.49951171875,0.50048828125],[1,0.0,0.49951171875,0.50048828125],[0,0.0,0.49951171875,0.50048828125]],"time":1.61083984375,"type":"analyze"},{"outcomes":[["body",512,"valid",170.22021484375,1060],["body",1024,"valid",858.501708984375,2054],["body",256,"valid",61.051513671875,798],["body",2048,"valid",6290.15869140625,4344]],"time":7388.68212890625,"type":"sample"},{"compiler":[[8,5]],"egraph":[[0,1,1,1.75e-6],[15,3636,11,0.041751375],[14,3626,11,0.037020417],[13,3588,11,0.032171584],[12,3525,11,0.027365584000000002],[11,2879,11,0.022348459],[10,1674,11,0.014901708999999999],[9,740,11,0.008170834],[8,403,11,0.004233584],[7,239,11,0.002519167],[6,150,11,0.001490917],[5,86,11,0.000835167],[4,56,11,0.000497584],[3,29,11,0.000297209],[2,18,11,0.000173459],[1,11,11,0.000103],[0,6,11,4.925e-5]],"inputs":[["0"],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":64.4599609375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[15,3636,11,0.04157425],[14,3626,11,0.036832875],[13,3588,11,0.032000208],[12,3525,11,0.027218416],[11,2879,11,0.022214624999999998],[10,1674,11,0.01480375],[9,740,11,0.008117708],[8,403,11,0.00421425],[7,239,11,0.002508792],[6,150,11,0.001480375],[5,86,11,0.0008374579999999999],[4,56,11,0.0004915],[3,29,11,0.000289792],[2,18,11,0.000167875],[1,11,11,9.8e-5],[0,6,11,4.5292e-5]],"inputs":[["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"stop":[["saturated",1]],"time":53.56005859375,"type":"simplify"},{"compiler":[[8,5]],"time":0.251953125,"type":"eval"},{"alts":[["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","next",31.807563089926195]],"compiler":[[8,5],[8,5]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[31.807563089926195],"time":0.674072265625,"type":"prune"},{"compiler":[[17,5]],"locations":[["(tan.f64 x)",0.01171875,true],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",0.01171875,true],["(-.f64 x (sin.f64 x))",2.5976791352422697,true]],"time":3.796875,"type":"localize"},{"count":[[3,36]],"series":[["(tan.f64 x)","x","-inf",0.221923828125],["(tan.f64 x)","x","inf",0.25390625],["(tan.f64 x)","x","0",0.18603515625],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","x","-inf",0.619873046875],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","x","inf",0.599853515625],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","x","0",0.38916015625],["(-.f64 x (sin.f64 x))","x","-inf",0.197021484375],["(-.f64 x (sin.f64 x))","x","inf",0.2958984375],["(-.f64 x (sin.f64 x))","x","0",0.39501953125]],"time":3.278076171875,"type":"series"},{"count":[[3,91]],"egraph":[[2,2190,20,0.020724542000000002],[1,140,20,0.00272825],[0,6,20,0.000168]],"inputs":[["(-.f64 x (sin.f64 x))","(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))","(tan.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (sin.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (sin.f64 x)) (fma.f64 (neg.f64 (sin.f64 x)) 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (sin.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (sin.f64 x))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (sin.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (sin.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 2) (cbrt.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) (sqrt.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (pow.f64 (sin.f64 x) 3)) (/.f64 1 (fma.f64 x x (*.f64 (sin.f64 x) (+.f64 x (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (sin.f64 x) 2)) (/.f64 1 (+.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (sin.f64 x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (sin.f64 x) (+.f64 x (sin.f64 x)))) (-.f64 (pow.f64 x 3) (pow.f64 (sin.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (sin.f64 x)) (-.f64 (*.f64 x x) (pow.f64 (sin.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (sin.f64 x) 3)) (fma.f64 x x (*.f64 (sin.f64 x) (+.f64 x (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (sin.f64 x) 2)) (+.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (pow.f64 (sin.f64 x) 3))) (neg.f64 (fma.f64 x x (*.f64 (sin.f64 x) (+.f64 x (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (sin.f64 x) 2))) (neg.f64 (+.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (neg.f64 (sin.f64 x)) 3)) (+.f64 (*.f64 x x) (-.f64 (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x))) (*.f64 x (neg.f64 (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (neg.f64 (sin.f64 x)) (neg.f64 (sin.f64 x)))) (-.f64 x (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 x (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (sin.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x (tan.f64 x)) (neg.f64 (/.f64 (sin.f64 x) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 x (tan.f64 x)) (/.f64 (sin.f64 x) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (sin.f64 x)) (/.f64 1 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) 2) (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 2) (*.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) (sqrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) (*.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) (/.f64 1 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 x (sin.f64 x))) (/.f64 1 (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (tan.f64 x)) (-.f64 x (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (/.f64 (-.f64 x (sin.f64 x)) (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (tan.f64 x))) (/.f64 (-.f64 x (sin.f64 x)) (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 2) 1) (/.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) 1) (/.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 2) (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) (pow.f64 (cbrt.f64 (tan.f64 x)) 2)) (/.f64 (sqrt.f64 (-.f64 x (sin.f64 x))) (cbrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) 2) (sqrt.f64 (tan.f64 x))) (/.f64 (cbrt.f64 (-.f64 x (sin.f64 x))) (sqrt.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 x (sin.f64 x)) (sin.f64 x)) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (tan.f64 x) (-.f64 x (sin.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 x (sin.f64 x)) (neg.f64 (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 x (sin.f64 x)) 3) (pow.f64 (tan.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (tan.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 x)) (pow.f64 (cbrt.f64 (tan.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 x)) 2) (cbrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 x)) (sqrt.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (cos.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 x) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (/.f64 (cos.f64 x) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sin.f64 x)) (/.f64 (cos.f64 x) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 x)) (neg.f64 (cos.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 x)))))))"]],"rules":[["egg-rr",22],["egg-rr",34],["egg-rr",35]],"stop":[["node limit",1]],"time":45.888916015625,"type":"rewrite"},{"count":[[127,119]],"egraph":[[5,7310,394,0.031107374],[4,4409,394,0.017914291],[3,1113,394,0.008334083],[2,375,406,0.002735333],[1,158,406,0.001046333],[0,63,424,0.000311458]],"inputs":[["(*.f64 1/6 (pow.f64 x 3))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (*.f64 -1/120 (pow.f64 x 5)))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5))))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/362880 (pow.f64 x 9)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5)))))","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(*.f64 1/6 (pow.f64 x 2))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -143/604800 (pow.f64 x 8)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4)))))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 (pow.f64 x 3))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (*.f64 -1/120 (pow.f64 x 5)))","(fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5)))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5))))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 1/5040 (pow.f64 x 7) (*.f64 -1/120 (pow.f64 x 5))))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 -1/120 (pow.f64 x 5) (*.f64 1/5040 (pow.f64 x 7))))","(+.f64 (*.f64 1/6 (pow.f64 x 3)) (+.f64 (*.f64 -1/362880 (pow.f64 x 9)) (+.f64 (*.f64 1/5040 (pow.f64 x 7)) (*.f64 -1/120 (pow.f64 x 5)))))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 -1/362880 (pow.f64 x 9) (fma.f64 1/5040 (pow.f64 x 7) (*.f64 -1/120 (pow.f64 x 5)))))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 1/5040 (pow.f64 x 7) (fma.f64 -1/362880 (pow.f64 x 9) (*.f64 -1/120 (pow.f64 x 5)))))","(fma.f64 1/6 (pow.f64 x 3) (fma.f64 -1/120 (pow.f64 x 5) (fma.f64 1/5040 (pow.f64 x 7) (*.f64 -1/362880 (pow.f64 x 9)))))","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(fma.f64 -1 (sin.f64 x) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(fma.f64 -1 (sin.f64 x) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(fma.f64 -1 (sin.f64 x) x)","(-.f64 x (sin.f64 x))","x","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(fma.f64 -1 (sin.f64 x) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(fma.f64 -1 (sin.f64 x) x)","(-.f64 x (sin.f64 x))","(+.f64 (*.f64 -1 (sin.f64 x)) x)","(fma.f64 -1 (sin.f64 x) x)","(-.f64 x (sin.f64 x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 -11/15120 (pow.f64 x 6) (*.f64 -23/360 (pow.f64 x 4))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 -23/360 (pow.f64 x 4) (*.f64 -11/15120 (pow.f64 x 6))))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x -23/360) 1/6) (*.f64 -11/15120 (pow.f64 x 6)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 (*.f64 -143/604800 (pow.f64 x 8)) (+.f64 (*.f64 -11/15120 (pow.f64 x 6)) (*.f64 -23/360 (pow.f64 x 4)))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 -143/604800 (pow.f64 x 8) (fma.f64 -11/15120 (pow.f64 x 6) (*.f64 -23/360 (pow.f64 x 4)))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 -23/360 (pow.f64 x 4) (fma.f64 -143/604800 (pow.f64 x 8) (*.f64 -11/15120 (pow.f64 x 6)))))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6) (fma.f64 -11/15120 (pow.f64 x 6) (*.f64 -143/604800 (pow.f64 x 8))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 -11/15120 (pow.f64 x 6) (*.f64 (pow.f64 x 4) (fma.f64 (pow.f64 x 4) -143/604800 -23/360))))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x))","(*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x)","(/.f64 x (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 x (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x) (cos.f64 x))","(-.f64 (/.f64 x (/.f64 (sin.f64 x) (cos.f64 x))) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (/.f64 x (sin.f64 x)) -1))","(*.f64 (cos.f64 x) (+.f64 -1 (/.f64 x (sin.f64 x))))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x) (cos.f64 x))","(-.f64 (/.f64 x (/.f64 (sin.f64 x) (cos.f64 x))) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (/.f64 x (sin.f64 x)) -1))","(*.f64 (cos.f64 x) (+.f64 -1 (/.f64 x (sin.f64 x))))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x) (cos.f64 x))","(-.f64 (/.f64 x (/.f64 (sin.f64 x) (cos.f64 x))) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (/.f64 x (sin.f64 x)) -1))","(*.f64 (cos.f64 x) (+.f64 -1 (/.f64 x (sin.f64 x))))","(/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x))","(/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x))","(*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x)","(/.f64 x (/.f64 (sin.f64 x) (cos.f64 x)))","(*.f64 x (/.f64 (cos.f64 x) (sin.f64 x)))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x) (cos.f64 x))","(-.f64 (/.f64 x (/.f64 (sin.f64 x) (cos.f64 x))) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (/.f64 x (sin.f64 x)) -1))","(*.f64 (cos.f64 x) (+.f64 -1 (/.f64 x (sin.f64 x))))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x) (cos.f64 x))","(-.f64 (/.f64 x (/.f64 (sin.f64 x) (cos.f64 x))) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (/.f64 x (sin.f64 x)) -1))","(*.f64 (cos.f64 x) (+.f64 -1 (/.f64 x (sin.f64 x))))","(+.f64 (/.f64 (*.f64 (cos.f64 x) x) (sin.f64 x)) (*.f64 -1 (cos.f64 x)))","(+.f64 (/.f64 (*.f64 x (cos.f64 x)) (sin.f64 x)) (neg.f64 (cos.f64 x)))","(-.f64 (*.f64 (/.f64 (cos.f64 x) (sin.f64 x)) x) (cos.f64 x))","(-.f64 (/.f64 x (/.f64 (sin.f64 x) (cos.f64 x))) (cos.f64 x))","(*.f64 (cos.f64 x) (+.f64 (/.f64 x (sin.f64 x)) -1))","(*.f64 (cos.f64 x) (+.f64 -1 (/.f64 x (sin.f64 x))))","x","(+.f64 (*.f64 1/3 (pow.f64 x 3)) x)","(fma.f64 1/3 (pow.f64 x 3) x)","(fma.f64 (pow.f64 x 3) 1/3 x)","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 (pow.f64 x 5) 2/15 x))","(fma.f64 (pow.f64 x 5) 2/15 (fma.f64 (pow.f64 x 3) 1/3 x))","(+.f64 (*.f64 17/315 (pow.f64 x 7)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 17/315 (pow.f64 x 7) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 (pow.f64 x 7) 17/315 (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 (pow.f64 x 5) 2/15 x)))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 (pow.f64 x 7) 17/315 (fma.f64 (pow.f64 x 5) 2/15 x)))","(fma.f64 (pow.f64 x 3) 1/3 (fma.f64 (pow.f64 x 5) 2/15 (fma.f64 (pow.f64 x 7) 17/315 x)))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))","(/.f64 (sin.f64 x) (cos.f64 x))"]],"stop":[["node limit",1]],"time":48.490966796875,"type":"simplify"},{"compiler":[[1563,611]],"time":15.882080078125,"type":"eval"},{"alts":[["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","next",0.36557802903992576],["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206],["(/.f64 (fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5))) (tan.f64 x))","fresh",9.56733911458777]],"compiler":[[11,8],[12,9],[14,11],[11,8],[12,9],[14,11]],"count":[[120,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[119,3],"picked":[1,0]}],"min-error":[0.17578125],"time":20.22900390625,"type":"prune"},{"compiler":[[26,15]],"locations":[["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))",0.0078125,true],["(*.f64 1/6 (*.f64 x x))",0.23828125,true]],"time":5.65185546875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","x","-inf",0.443115234375],["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","x","inf",0.342041015625],["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","x","0",0.26806640625],["(*.f64 1/6 (*.f64 x x))","x","-inf",0.18798828125],["(*.f64 1/6 (*.f64 x x))","x","inf",0.68505859375],["(*.f64 1/6 (*.f64 x x))","x","0",0.4111328125]],"time":2.422119140625,"type":"series"},{"count":[[2,32]],"egraph":[[2,1977,21,0.019839334],[1,188,21,0.003357167],[0,9,21,0.000372209]],"inputs":[["(*.f64 1/6 (*.f64 x x))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 1/6 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/6 (*.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/6 (*.f64 x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 (*.f64 x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 1/6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/6) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/6 (*.f64 x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/6 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/6 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/6 (*.f64 x x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 (*.f64 x x)) (*.f64 -23/360 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -23/360 (pow.f64 x 4)) 1) (*.f64 1/6 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) (pow.f64 (cbrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) 2) (cbrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) (sqrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 -23/360 (pow.f64 x 4)) 3) (pow.f64 (*.f64 1/6 (*.f64 x x)) 3)) (+.f64 (*.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 -23/360 (pow.f64 x 4))) (-.f64 (*.f64 (pow.f64 x 4) 1/36) (*.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 1/6 (*.f64 x x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 -23/360 (pow.f64 x 4))) (*.f64 (pow.f64 x 4) 1/36)) (-.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 1/6 (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))))))))"]],"rules":[["egg-rr",21],["egg-rr",11]],"stop":[["node limit",1]],"time":40.14990234375,"type":"rewrite"},{"count":[[56,37]],"egraph":[[20,7284,231,0.125087875],[19,7262,231,0.111484],[18,7208,231,0.100625042],[17,7014,231,0.091491875],[16,6794,231,0.082151042],[15,6486,231,0.07333733399999999],[14,5733,231,0.063829292],[13,5101,231,0.053541376],[12,4572,231,0.044996376],[11,4120,231,0.037471333999999995],[10,3763,231,0.030627916999999998],[9,3490,231,0.024478126],[8,3291,231,0.019268751],[7,3122,231,0.014542834000000001],[6,2660,231,0.010294751000000001],[5,1416,231,0.006140584],[4,355,231,0.0028637510000000003],[3,114,231,0.001000751],[2,45,231,0.000454793],[1,22,231,0.000228251],[0,11,231,9.0084e-5]],"inputs":[["(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (pow.f64 x 2))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(*.f64 x (*.f64 x (fma.f64 (*.f64 x x) -23/360 1/6)))","(*.f64 (*.f64 x x) (fma.f64 (*.f64 x x) -23/360 1/6))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))"]],"stop":[["node limit",1]],"time":145.6171875,"type":"simplify"},{"compiler":[[529,372]],"time":7.6298828125,"type":"eval"},{"alts":[["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","next",0.3170817888083678],["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","done",0.36557802903992576],["(pow.f64 (cbrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) 3)","fresh",0.562664503713656],["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206],["(/.f64 (-.f64 (*.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 -23/360 (pow.f64 x 4))) (*.f64 (pow.f64 x 4) 1/36)) (-.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 1/6 (*.f64 x x))))","fresh",44.241019643915],["(fma.f64 -23/360 (pow.f64 x 4) (pow.f64 (*.f64 x (sqrt.f64 1/6)) 2))","fresh",0.37405429857680983],["(/.f64 (fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5))) (tan.f64 x))","fresh",9.56733911458777]],"compiler":[[11,8],[11,8],[14,11],[12,9],[30,24],[12,10],[14,11],[11,8],[14,11],[12,9],[30,24],[12,10],[14,11]],"count":[[40,7]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[37,4],"picked":[1,1]}],"min-error":[0.02734375],"time":8.905029296875,"type":"prune"},{"compiler":[[31,23]],"locations":[["(pow.f64 x 3)",0.00390625,true],["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))",0.11328125,true],["(*.f64 -23/360 (pow.f64 x 3))",0.20703125,true],["(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))",0.34375,true]],"time":7.572998046875,"type":"localize"},{"count":[[4,24]],"series":[["(pow.f64 x 3)","x","-inf",0.4228515625],["(pow.f64 x 3)","x","inf",0.35693359375],["(pow.f64 x 3)","x","0",0.136962890625],["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","x","-inf",0.337890625],["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","x","inf",0.2421875],["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","x","0",0.31005859375],["(*.f64 -23/360 (pow.f64 x 3))","x","-inf",0.18701171875],["(*.f64 -23/360 (pow.f64 x 3))","x","inf",0.2060546875],["(*.f64 -23/360 (pow.f64 x 3))","x","0",0.260009765625],["(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","x","-inf",0.344970703125],["(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","x","inf",0.412841796875],["(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","x","0",0.4130859375]],"time":3.76708984375,"type":"series"},{"count":[[4,66]],"egraph":[[2,2034,36,0.019128209],[1,191,36,0.003499792],[0,9,36,0.000400292]],"inputs":[["(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 -23/360 (pow.f64 x 3))","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(pow.f64 x 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -23/360 (pow.f64 x 3)) (*.f64 1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/6 x) 1) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (pow.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 2) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 1/6 x) 3) (pow.f64 (*.f64 -23/360 (pow.f64 x 3)) 3)) (+.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (-.f64 (*.f64 (pow.f64 x 6) 529/129600) (*.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 -23/360 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -23/360 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 -23/360 (pow.f64 x 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 -23/360)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 -23/360) (pow.f64 x 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 6) 529/129600))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -23/360) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 -23/360 (pow.f64 x 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -23/360 (pow.f64 x 3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/6 x) x) (*.f64 (*.f64 -23/360 (pow.f64 x 3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 1/6 x)) (*.f64 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3/2) (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 3) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) 3) (pow.f64 (sqrt.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 x x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 x 6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 x 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 3 (log.f64 x)))))))"]],"rules":[["egg-rr",19],["egg-rr",15],["egg-rr",11],["egg-rr",21]],"stop":[["node limit",1]],"time":43.387939453125,"type":"rewrite"},{"count":[[90,74]],"egraph":[[20,7680,264,0.116798415],[19,6899,264,0.105771165],[18,6709,264,0.093637457],[17,6503,264,0.085370457],[16,6235,264,0.076901624],[15,5926,264,0.068727083],[14,5465,264,0.060777916],[13,4771,264,0.052310083],[12,4219,264,0.044164291],[11,3771,264,0.037017458],[10,3395,264,0.030306541],[9,3110,264,0.024386416],[8,2895,264,0.019155958],[7,2721,264,0.014644542],[6,2602,264,0.010560042],[5,1169,264,0.0067355],[4,601,264,0.00337475],[3,181,264,0.0015878329999999999],[2,76,264,0.000688583],[1,38,264,0.00033850000000000004],[0,16,264,0.000125083]],"inputs":[["(*.f64 1/6 x)","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 1/6 (pow.f64 x 2))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 x)","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(*.f64 -23/360 (pow.f64 x 4))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (*.f64 -23/360 (pow.f64 x 4)))","(fma.f64 1/6 (*.f64 x x) (*.f64 -23/360 (pow.f64 x 4)))","(*.f64 x (*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6)))"]],"stop":[["node limit",1]],"time":138.04296875,"type":"simplify"},{"compiler":[[982,713]],"time":14.72802734375,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206],["(*.f64 x (/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))","next",0.3652843278821359],["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","done",0.36557802903992576],["(/.f64 (-.f64 (*.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 -23/360 (pow.f64 x 4))) (*.f64 (pow.f64 x 4) 1/36)) (-.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 1/6 (*.f64 x x))))","fresh",44.241019643915],["(fma.f64 -23/360 (pow.f64 x 4) (pow.f64 (*.f64 x (sqrt.f64 1/6)) 2))","fresh",0.37405429857680983],["(/.f64 (fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5))) (tan.f64 x))","fresh",9.56733911458777],["(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) 3)","fresh",0.5424694841767719]],"compiler":[[12,9],[26,20],[11,8],[30,24],[12,10],[14,11],[14,11],[12,9],[26,20],[30,24],[12,10],[14,11],[14,11]],"count":[[81,7]],"kept":[{"done":[1,1],"fresh":[5,4],"new":[74,2],"picked":[1,0]}],"min-error":[0.0234375],"time":17.18701171875,"type":"prune"},{"compiler":[[103,79]],"locations":[["(*.f64 -23/360 (pow.f64 x 3))",0.20703125,false],["(*.f64 (*.f64 1/6 x) (*.f64 1/6 x))",0.23828125,true],["(*.f64 1/6 x)",0.33203125,true],["(/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3))))",27.70716968684996,true]],"time":23.347900390625,"type":"localize"},{"count":[[3,24]],"series":[["(*.f64 (*.f64 1/6 x) (*.f64 1/6 x))","x","-inf",0.169921875],["(*.f64 (*.f64 1/6 x) (*.f64 1/6 x))","x","inf",0.283935546875],["(*.f64 (*.f64 1/6 x) (*.f64 1/6 x))","x","0",0.205078125],["(*.f64 1/6 x)","x","-inf",0.2978515625],["(*.f64 1/6 x)","x","inf",0.222900390625],["(*.f64 1/6 x)","x","0",0.198974609375],["(/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3))))","x","-inf",0.27685546875],["(/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3))))","x","inf",0.72314453125],["(/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3))))","x","0",1.25]],"time":3.7509765625,"type":"series"},{"count":[[3,167]],"egraph":[[2,5533,22,0.034601875000000004],[1,393,22,0.0080595],[0,16,42,0.000704875]],"inputs":[["(/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3))))","(*.f64 1/6 x)","(*.f64 (*.f64 1/6 x) (*.f64 1/6 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/6 x) (+.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (fma.f64 (neg.f64 (*.f64 x (cbrt.f64 -23/360))) (*.f64 (*.f64 x x) (cbrt.f64 529/129600)) (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (*.f64 (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (+.f64 (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -23/360 (pow.f64 x 3)) (*.f64 1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (cbrt.f64 (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 1/6 x) (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (pow.f64 x 3) 1/216) (fma.f64 1/36 (*.f64 x x) (*.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))) (/.f64 (*.f64 -12167/46656000 (pow.f64 x 9)) (fma.f64 1/36 (*.f64 x x) (*.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) (/.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (*.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (/.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (pow.f64 (*.f64 1/6 x) 4) (*.f64 279841/16796160000 (pow.f64 x 12)))) (*.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (/.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (/.f64 1 (neg.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (pow.f64 x 3) 1/216) (*.f64 -12167/46656000 (pow.f64 x 9))) (/.f64 1 (fma.f64 1/36 (*.f64 x x) (*.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (+.f64 (pow.f64 (*.f64 1/6 x) 4) (*.f64 279841/16796160000 (pow.f64 x 12))))) (sqrt.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (pow.f64 (*.f64 1/6 x) 4) (*.f64 279841/16796160000 (pow.f64 x 12)))) 1) (/.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (+.f64 (pow.f64 (*.f64 1/6 x) 4) (*.f64 279841/16796160000 (pow.f64 x 12)))) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 1) (/.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 1/6 x)) (*.f64 (sqrt.f64 -23/360) (pow.f64 x 3/2))) (-.f64 (sqrt.f64 (*.f64 1/6 x)) (*.f64 (sqrt.f64 -23/360) (pow.f64 x 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 (pow.f64 x 3) 1/216) (*.f64 -12167/46656000 (pow.f64 x 9)))) (fma.f64 1/36 (*.f64 x x) (*.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) (neg.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 1/6 x))) (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 x) 1/6) (+.f64 1 (expm1.f64 (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 1/6 x))) (+.f64 1 (expm1.f64 (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 x) 1/6) (/.f64 1 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 1/6 x))) (/.f64 1 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/6 x))) (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) 1/6) (+.f64 1 (expm1.f64 (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/6 x))) (+.f64 1 (expm1.f64 (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 x) 1/6) (/.f64 1 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 1/6 x))) (/.f64 1 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (exp.f64 (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3)))) (exp.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3)))) (+.f64 1 (expm1.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360) (pow.f64 (exp.f64 x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -23/360 (pow.f64 x 3)))) (pow.f64 (exp.f64 x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360)) (pow.f64 (exp.f64 x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360) (+.f64 1 (expm1.f64 (*.f64 1/6 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -23/360 (pow.f64 x 3)))) (+.f64 1 (expm1.f64 (*.f64 1/6 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 (pow.f64 x 3)) -23/360)) (+.f64 1 (expm1.f64 (*.f64 1/6 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)) 3) (pow.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (sqrt.f64 (fma.f64 -529/129600 (pow.f64 x 6) (*.f64 (pow.f64 x 6) 529/129600))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (*.f64 -23/360 (pow.f64 x 3)) (*.f64 1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (fma.f64 -529/129600 (pow.f64 x 6) (*.f64 (pow.f64 x 6) 529/129600))) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 x (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/6 (/.f64 (*.f64 (*.f64 x x) 1/6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/6 (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1/6 (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 x) 1 (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 x) 1 (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 x x) 1/36) (/.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/6 x) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/36 (/.f64 (*.f64 x x) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) 1/6) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) 1/6) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (cbrt.f64 (*.f64 1/6 x)) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (cbrt.f64 (*.f64 1/6 x)) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/6 x)) (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/6 x)) (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1/6) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 1/6) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (sqrt.f64 (*.f64 (*.f64 x x) 1/6)) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 1/6) (sqrt.f64 (*.f64 (*.f64 x x) 1/6)) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 1/6 x)) (sqrt.f64 (*.f64 1/6 x)) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 1/6 x)) (sqrt.f64 (*.f64 1/6 x)) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))) (cbrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 1/36)) (sqrt.f64 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x 1/36)) (sqrt.f64 x) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 x) 4))) (sqrt.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36))) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 x) 4))) (sqrt.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36))) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (sqrt.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/6 x) 1) (/.f64 (*.f64 1/6 x) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 x) 4)) 1) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x 1/36) 1) (/.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/6 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 (*.f64 (*.f64 x x) 1/6) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/6 x) (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 (*.f64 1/6 x) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 (*.f64 (*.f64 x x) 1/36) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/36 (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 (*.f64 x x) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 x) 4)) (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x 1/36) (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))) (/.f64 x (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/6 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 (*.f64 (*.f64 x x) 1/6) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 1/6 x) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 (*.f64 1/6 x) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 (*.f64 (*.f64 x x) 1/36) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/36 (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 (*.f64 x x) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 1/6 x) 4)) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x 1/36) (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (/.f64 x (sqrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (-.f64 (*.f64 (pow.f64 x 3) 1/216) (*.f64 -12167/46656000 (pow.f64 x 9)))) (fma.f64 1/36 (*.f64 x x) (*.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (*.f64 x x) 1/36) (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600))) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))) (neg.f64 (*.f64 529/129600 (/.f64 (pow.f64 x 6) (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (sqrt.f64 x)) (sqrt.f64 x) (*.f64 -23/360 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/6 (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (-.f64 (*.f64 -23/360 (pow.f64 x 3)) (fma.f64 23/360 (pow.f64 x 3) (*.f64 -23/360 (pow.f64 x 3))))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 1/6)) (cbrt.f64 (pow.f64 (exp.f64 x) 1/6)))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) 1/6))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) 1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/6 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/6 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 1/36) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/6 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/6 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) 1/216) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 x x) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (*.f64 1/6 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/6 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) 1/216))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/6 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/6 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/6 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 1/6 x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 x x) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 (exp.f64 1/36) (*.f64 x x))) (cbrt.f64 (pow.f64 (exp.f64 1/36) (*.f64 x x))))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 1/36) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/36) (*.f64 x x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 1/36) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (*.f64 x x) 1/36))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/6 x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 x x) 1/36) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/46656 (pow.f64 x 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 1/6 x) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/36) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (*.f64 x x) 1/36))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/46656 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 x x) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (*.f64 x x) 1/36)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (*.f64 1/6 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 1/6 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 1/6 x))) 1))))))"]],"rules":[["egg-rr",17],["egg-rr",18],["egg-rr",132]],"stop":[["node limit",1]],"time":65.614013671875,"type":"rewrite"},{"count":[[191,172]],"egraph":[[19,7940,201,0.118911873],[18,7263,201,0.108207832],[17,7171,201,0.09695054],[16,7001,201,0.088690249],[15,6729,201,0.080231707],[14,6410,201,0.072275749],[13,5941,201,0.064206457],[12,5233,201,0.054808832],[11,4630,201,0.045482291],[10,4114,201,0.036900749000000004],[9,3735,201,0.029224124],[8,3448,201,0.022771083],[7,3197,201,0.016953833],[6,3011,201,0.012085708],[5,1579,201,0.007521666],[4,402,201,0.003270541],[3,146,201,0.001162499],[2,62,201,0.000549416],[1,30,201,0.000270583],[0,13,201,0.000100833]],"inputs":[["(*.f64 1/6 x)","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 x)","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(*.f64 -23/360 (pow.f64 x 3))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(+.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))","(fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x -23/360) 1/6))","(fma.f64 -23/360 (pow.f64 x 3) (*.f64 1/6 x))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))","(*.f64 1/36 (pow.f64 x 2))","(*.f64 1/36 (*.f64 x x))","(*.f64 x (*.f64 x 1/36))"]],"stop":[["node limit",1]],"time":139.8671875,"type":"simplify"},{"compiler":[[5722,4322]],"time":72.02099609375,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","fresh",31.80527808022206],["(*.f64 x (/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))","done",0.3652843278821359],["(*.f64 x (*.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))))","fresh",0.5883063335046563],["(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","done",0.36557802903992576],["(*.f64 x (/.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) 3) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))","fresh",0.5291294939456503],["(fma.f64 -23/360 (pow.f64 x 4) (pow.f64 (*.f64 x (sqrt.f64 1/6)) 2))","fresh",0.37405429857680983],["(/.f64 (fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5))) (tan.f64 x))","fresh",9.56733911458777]],"compiler":[[12,9],[26,20],[24,18],[11,8],[27,21],[12,10],[14,11]],"count":[[226,7]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[219,2],"picked":[1,1]}],"min-error":[0.01171875],"time":64.77685546875,"type":"prune"},{"accuracy":[0.3170817888083678],"baseline":[0.3170817888083678],"branch":[["x",0.3170817888083678,1],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",0.3170817888083678,1],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",0.3170817888083678,1]],"compiler":[[2,1],[8,5],[8,5],[192,137]],"count":[[12,1]],"inputs":[["(*.f64 x (*.f64 (cbrt.f64 (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3)))) (cbrt.f64 (fma.f64 x (*.f64 x 1/36) (*.f64 (pow.f64 x 6) 529/129600)))))","(*.f64 x (/.f64 (-.f64 (pow.f64 (cbrt.f64 (*.f64 (*.f64 x x) 1/36)) 3) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))","(*.f64 x (/.f64 (-.f64 (*.f64 (*.f64 1/6 x) (*.f64 1/6 x)) (*.f64 (pow.f64 x 6) 529/129600)) (-.f64 (*.f64 1/6 x) (*.f64 -23/360 (pow.f64 x 3)))))","(pow.f64 (cbrt.f64 (*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))) 3)","(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))","(pow.f64 (cbrt.f64 (fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))) 3)","(/.f64 (-.f64 (*.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 -23/360 (pow.f64 x 4))) (*.f64 (pow.f64 x 4) 1/36)) (-.f64 (*.f64 -23/360 (pow.f64 x 4)) (*.f64 1/6 (*.f64 x x))))","(fma.f64 -23/360 (pow.f64 x 4) (pow.f64 (*.f64 x (sqrt.f64 1/6)) 2))","(fma.f64 -23/360 (pow.f64 x 4) (*.f64 1/6 (*.f64 x x)))","(pow.f64 (pow.f64 (/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x)) 3) 1/3)","(/.f64 (fma.f64 1/6 (pow.f64 x 3) (*.f64 -1/120 (pow.f64 x 5))) (tan.f64 x))","(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))"]],"link":["."],"name":["ENA, Section 1.4, Exercise 4a"],"oracle":[60.7263169915971],"outputs":[["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))"]],"time":12.39306640625,"times":[["x",5.301025390625],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",1.800048828125],["(/.f64 (-.f64 x (sin.f64 x)) (tan.f64 x))",1.837890625]],"type":"regimes"},{"compiler":[[11,8]],"egraph":[[1,11,14,3.5292e-5],[0,9,14,2.0834e-5]],"inputs":[["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (fma.f64 1/6 x (*.f64 -23/360 (pow.f64 x 3))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.451904296875,"type":"simplify"},{"time":0.01806640625,"type":"soundness"},{"compiler":[[11,8]],"remove-preprocessing":[[]],"time":8.90087890625,"type":"end"}]
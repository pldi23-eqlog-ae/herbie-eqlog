[{"compiler":[[7,6]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.256103515625,"type":"analyze"},{"outcomes":[["body",256,"valid",220.2109375,8256]],"time":227.31103515625,"type":"sample"},{"compiler":[[6,5]],"egraph":[[0,1,1,8.34e-7],[1,10,4,5.7499e-5],[0,7,4,3.4916e-5]],"inputs":[["0"],["(+.f64 x (/.f64 1 3))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(+.f64 x (/.f64 1 3))","(+.f64 x 1/3)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.113037109375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[1,10,4,5.4916e-5],[0,7,4,3.2708e-5]],"inputs":[["(+.f64 x (/.f64 1 3))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 1 3))","(+.f64 x 1/3)"]],"stop":[["saturated",1]],"time":10.072998046875,"type":"simplify"},{"compiler":[[9,7]],"time":0.2998046875,"type":"eval"},{"alts":[["(+.f64 x 1/3)","next",0.01953125]],"compiler":[[4,3],[4,3]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01953125],"time":0.717041015625,"type":"prune"},{"compiler":[[6,4]],"locations":[["(+.f64 x 1/3)",0.01953125,true]],"time":1.487060546875,"type":"localize"},{"count":[[1,12]],"series":[["(+.f64 x 1/3)","x","-inf",0.179931640625],["(+.f64 x 1/3)","x","inf",0.25],["(+.f64 x 1/3)","x","0",0.199951171875]],"time":0.66796875,"type":"series"},{"count":[[1,30]],"egraph":[[2,1150,4,0.013404042],[1,91,4,0.001723709],[0,4,4,0.000165834]],"inputs":[["(+.f64 x 1/3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x 1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (cbrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 1/3)) (sqrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1/27 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3))) (+.f64 1/27 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x -1/3) (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/27 (pow.f64 x 3)) (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 1/27 (pow.f64 x 3)) (+.f64 1/9 (-.f64 (*.f64 x x) (*.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1/9) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 1/27 (pow.f64 x 3))) (neg.f64 (fma.f64 x x (-.f64 1/9 (*.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x x -1/9)) (neg.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (*.f64 x x)) (-.f64 1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1/3)))))"]],"rules":[["egg-rr",30]],"stop":[["node limit",1]],"time":30.178955078125,"type":"rewrite"},{"count":[[42,33]],"egraph":[[1,5,39,5.4667e-5],[0,4,39,3.0583e-5]],"inputs":[["1/3","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)"]],"method":["egg-herbie"],"outputs":[["1/3","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)"]],"stop":[["saturated",1]],"time":10.547119140625,"type":"simplify"},{"compiler":[[265,196]],"time":4.58203125,"type":"eval"},{"alts":[["(*.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)))","fresh",15.11328125],["(+.f64 x 1/3)","done",0.01953125],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))","next",15.03125],["(/.f64 (+.f64 1/27 (pow.f64 x 3)) (+.f64 1/9 (-.f64 (*.f64 x x) (*.f64 x 1/3))))","fresh",18.828125]],"compiler":[[11,8],[4,3],[14,10],[16,12],[11,8],[14,10],[16,12]],"count":[[34,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[33,3],"picked":[1,1]}],"min-error":[0],"time":5.876953125,"type":"prune"},{"compiler":[[35,21]],"locations":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))",0.0078125,true],["(+.f64 x -1/3)",0.01171875,true],["(/.f64 1/9 (+.f64 x -1/3))",0.1640625,true],["(/.f64 (*.f64 x x) (+.f64 x -1/3))",13.951090440409493,true]],"time":7.48291015625,"type":"localize"},{"count":[[4,48]],"series":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))","x","-inf",0.417236328125],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))","x","inf",0.60107421875],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))","x","0",0.487060546875],["(+.f64 x -1/3)","x","-inf",0.134033203125],["(+.f64 x -1/3)","x","inf",0.14111328125],["(+.f64 x -1/3)","x","0",0.14111328125],["(/.f64 1/9 (+.f64 x -1/3))","x","-inf",0.2138671875],["(/.f64 1/9 (+.f64 x -1/3))","x","inf",0.27392578125],["(/.f64 1/9 (+.f64 x -1/3))","x","0",0.18994140625],["(/.f64 (*.f64 x x) (+.f64 x -1/3))","x","-inf",0.22607421875],["(/.f64 (*.f64 x x) (+.f64 x -1/3))","x","inf",0.281005859375],["(/.f64 (*.f64 x x) (+.f64 x -1/3))","x","0",0.384033203125]],"time":3.654052734375,"type":"series"},{"count":[[4,293]],"egraph":[[2,3411,25,0.028134708],[1,221,25,0.004765666],[0,9,34,0.000360041]],"inputs":[["(/.f64 (*.f64 x x) (+.f64 x -1/3))","(/.f64 1/9 (+.f64 x -1/3))","(+.f64 x -1/3)","(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (/.f64 (+.f64 x -1/3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 x (/.f64 1 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (/.f64 1 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 x (sqrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 x)) (/.f64 1 (+.f64 1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1/3)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 x (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 x -1/3)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) x) 1) (/.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2)) (/.f64 x (cbrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) -2) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 x -1/3) -1/2) (/.f64 (*.f64 x x) (sqrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (sqrt.f64 (+.f64 x -1/3))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x x) (fma.f64 x x -1/9)) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 x x) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 x x) (+.f64 1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x -1/3)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x -1/3))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1/9 (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1/9 (+.f64 x -1/3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (+.f64 x -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/9 (/.f64 1 (+.f64 1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1/3)) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (fma.f64 x x -1/9)) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/9 (+.f64 x -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 x -1/3) 9) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 x -1/3) 9) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1/9 (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 1/9 (+.f64 x -1/3))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 x -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (+.f64 x 1/3)) (/.f64 1/9 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x -1/3)) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x -1/3)) (sqrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 -1/27 (pow.f64 x 3)) (/.f64 1 (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x 1/3) (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (+.f64 -1/27 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1/9) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/27 (pow.f64 x 3)) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1/27 (pow.f64 x 3)) (+.f64 1/9 (-.f64 (*.f64 x x) (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x x -1/9)) (neg.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 -1/27 (pow.f64 x 3))) (neg.f64 (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (*.f64 x x)) (-.f64 -1/3 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x -1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x -1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x -1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x -1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x 1/3) (fma.f64 x x -1/9)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (+.f64 -1/27 (pow.f64 x 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x -1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x -1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 x) x)) (sqrt.f64 (pow.f64 (cbrt.f64 x) 2)) -1/3)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/3) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/3) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/3) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x 1/3) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 -1/9 (+.f64 x -1/3)) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (+.f64 x 1/3))) 2)) (log.f64 (cbrt.f64 (exp.f64 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (+.f64 x 1/3)))) (log.f64 (sqrt.f64 (exp.f64 (+.f64 x 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (cbrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x 1/3)) (sqrt.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9)) (pow.f64 (+.f64 x -1/3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x -1/9))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (+.f64 x -1/3) 2) (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x -1/3) (fma.f64 x x -1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)) (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9)) (pow.f64 (+.f64 x -1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -1/9) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3))) (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x x -1/9)) (+.f64 1/3 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9))) (neg.f64 (pow.f64 (+.f64 x -1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3)))) (neg.f64 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3))) (neg.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (+.f64 x -1/3)) (*.f64 (/.f64 (+.f64 x -1/3) x) 1/9)) (*.f64 (/.f64 (+.f64 x -1/3) x) (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 x -1/3) (*.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) 1/9)) (*.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (neg.f64 x)) (+.f64 x -1/3)) (*.f64 (+.f64 1/3 (neg.f64 x)) 1/9)) (*.f64 (+.f64 1/3 (neg.f64 x)) (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (*.f64 (+.f64 x -1/3) 9)) (*.f64 (/.f64 (+.f64 x -1/3) x) 1)) (*.f64 (/.f64 (+.f64 x -1/3) x) (*.f64 (+.f64 x -1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x x) (*.f64 (+.f64 x -1/3) 9) (+.f64 1/3 (neg.f64 x))) (*.f64 (+.f64 x -1/3) (*.f64 (+.f64 x -1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 x -1/3) 9) (*.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) 1)) (*.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) (*.f64 (+.f64 x -1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 x (neg.f64 x)) (*.f64 (+.f64 x -1/3) 9) (neg.f64 (*.f64 (+.f64 1/3 (neg.f64 x)) 1))) (*.f64 (+.f64 1/3 (neg.f64 x)) (*.f64 (+.f64 x -1/3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x (+.f64 1/3 (neg.f64 x))) (*.f64 (/.f64 (+.f64 x -1/3) x) -1/9)) (*.f64 (/.f64 (+.f64 x -1/3) x) (+.f64 1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (+.f64 1/3 (neg.f64 x))) (*.f64 (+.f64 x -1/3) -1/9)) (*.f64 (+.f64 x -1/3) (+.f64 1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (+.f64 1/3 (neg.f64 x)) (*.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) -1/9)) (*.f64 (*.f64 (+.f64 x -1/3) (pow.f64 x -2)) (+.f64 1/3 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (neg.f64 x)) (+.f64 1/3 (neg.f64 x))) (*.f64 (+.f64 1/3 (neg.f64 x)) -1/9)) (pow.f64 (+.f64 1/3 (neg.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x (neg.f64 x) 1/9) (+.f64 1/3 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) -1/27) (fma.f64 x x (+.f64 1/9 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) (pow.f64 (+.f64 x -1/3) -3) (pow.f64 (/.f64 -1/9 (+.f64 x -1/3)) 3)) (fma.f64 (pow.f64 x 4) (pow.f64 (+.f64 x -1/3) -2) (-.f64 (pow.f64 (/.f64 -1/9 (+.f64 x -1/3)) 2) (*.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) (/.f64 -1/9 (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4) (pow.f64 (/.f64 -1/9 (+.f64 x -1/3)) 2)) (-.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) (/.f64 -1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9)) (+.f64 x -1/3)) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -1/9) 1) (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -1/9) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2)) (cbrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 x x -1/9) (sqrt.f64 (+.f64 x -1/3))) (sqrt.f64 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1/3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 x 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 x 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 x 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 x -1/3) 2) (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x -1/3) (fma.f64 x x -1/9)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)) (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 x 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 x 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))) (exp.f64 (/.f64 1/9 (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (+.f64 1 (expm1.f64 (/.f64 1/9 (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))) (+.f64 1 (expm1.f64 (/.f64 1/9 (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))) (exp.f64 (/.f64 -1/9 (+.f64 x -1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))) (/.f64 1 (exp.f64 (/.f64 1/9 (+.f64 x -1/3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 -1/9 (+.f64 x -1/3))) (exp.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 -1/9 (+.f64 x -1/3))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (/.f64 1/9 (+.f64 x -1/3)))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 x 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 x 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (/.f64 (+.f64 x -1/3) x)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 (/.f64 (+.f64 x -1/3) x)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x (/.f64 1 (+.f64 x -1/3))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x (/.f64 1 (+.f64 x -1/3))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (/.f64 1 (+.f64 x -1/3)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (/.f64 1 (+.f64 x -1/3)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) 1 (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x) 1 (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/9 (neg.f64 (/.f64 1 (+.f64 x -1/3))) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1/3) 1 (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1/3) 1 (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1/3) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 x 1/3) 1 (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 x (+.f64 x -1/3)) x) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 x (+.f64 x -1/3)) x) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x 1/3) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x 1/3) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x 1/3) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 x 1/3) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 -1/9 (+.f64 x -1/3)) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 x 1/3)) (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (cbrt.f64 (+.f64 x 1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (cbrt.f64 (+.f64 x 1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (cbrt.f64 (+.f64 x 1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1/3)) 2) (cbrt.f64 (+.f64 x 1/3)) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (+.f64 x -1/3))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 x) x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (/.f64 1 (+.f64 x -1/3))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3))) (neg.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1/3)) (sqrt.f64 (+.f64 x 1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1/3)) (sqrt.f64 (+.f64 x 1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1/3)) (sqrt.f64 (+.f64 x 1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 x 1/3)) (sqrt.f64 (+.f64 x 1/3)) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (neg.f64 x)) (/.f64 1 (+.f64 1/3 (neg.f64 x))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (neg.f64 x)) (/.f64 1 (+.f64 1/3 (neg.f64 x))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/9 (/.f64 1 (+.f64 x -1/3)) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9)) (pow.f64 (+.f64 x -1/3) -2) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9)) (pow.f64 (+.f64 x -1/3) -2) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9)) (pow.f64 (+.f64 x -1/3) -2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x (*.f64 x (+.f64 x -1/3))) (*.f64 (+.f64 x -1/3) 1/9)) (pow.f64 (+.f64 x -1/3) -2) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4))) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 6) (*.f64 1/729 (pow.f64 (+.f64 x -1/3) -3))) (/.f64 1 (fma.f64 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (pow.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) 4))) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x -1/3)) (*.f64 x x) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x -1/3)) (*.f64 x x) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x -1/9) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x -1/9) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x -1/9) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x -1/9) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9))) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9)) (+.f64 x 1/3)) (/.f64 1 (*.f64 (/.f64 1 (+.f64 x -1/3)) (fma.f64 x x 1/9))) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 -1/9 (+.f64 x -1/3))) 2) (cbrt.f64 (/.f64 -1/9 (+.f64 x -1/3))) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 x) x)) (sqrt.f64 (pow.f64 (cbrt.f64 x) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 -1/9 (+.f64 x -1/3))) (sqrt.f64 (/.f64 -1/9 (+.f64 x -1/3))) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3))) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1/9 (+.f64 x -1/3)) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 x (+.f64 x -1/3)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 x (+.f64 x -1/3)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (+.f64 x -1/3)) x (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (+.f64 x -1/3)) x (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) 1) (/.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x -1/3)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) 1) (/.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x -1/3)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2)) (/.f64 x (cbrt.f64 (+.f64 x -1/3))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2)) (/.f64 x (cbrt.f64 (+.f64 x -1/3))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) -2) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 x -1/3))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x -1/3)) -2) (/.f64 (*.f64 x x) (cbrt.f64 (+.f64 x -1/3))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (pow.f64 (cbrt.f64 (+.f64 x -1/3)) 2)) (cbrt.f64 (*.f64 (/.f64 x (+.f64 x -1/3)) x)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x -1/3) -1/2) (/.f64 (*.f64 x x) (sqrt.f64 (+.f64 x -1/3))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (+.f64 x -1/3) -1/2) (/.f64 (*.f64 x x) (sqrt.f64 (+.f64 x -1/3))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (sqrt.f64 (+.f64 x -1/3))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 x -1/3))) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 (cbrt.f64 x) x) (sqrt.f64 (+.f64 x -1/3))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 x -1/3))) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (-.f64 (/.f64 x (sqrt.f64 (+.f64 x -1/3))) (/.f64 1/3 (sqrt.f64 (+.f64 x -1/3)))) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2)))) (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3))) (*.f64 (/.f64 x (+.f64 x -1/3)) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (fma.f64 (neg.f64 (/.f64 1 (+.f64 x -1/3))) 1/9 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (fma.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3)))) (cbrt.f64 (*.f64 1/81 (pow.f64 (+.f64 x -1/3) -2))) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (fma.f64 x x -1/9) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (+.f64 (/.f64 -1/9 (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x -1/9)) (+.f64 x 1/3) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (fma.f64 x x -1/9)) (+.f64 x 1/3) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (/.f64 -1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 x x) (+.f64 -1/27 (pow.f64 x 3))) (-.f64 (fma.f64 x x 1/9) (*.f64 x -1/3)) (*.f64 (/.f64 -1/9 (+.f64 x -1/3)) 1))))))"]],"rules":[["egg-rr",185],["egg-rr",38],["egg-rr",29],["egg-rr",41]],"stop":[["node limit",1]],"time":65.909912109375,"type":"rewrite"},{"count":[[341,324]],"egraph":[[5,7003,376,0.02743071],[4,2744,376,0.015617001],[3,948,376,0.006295334],[2,336,387,0.002390709],[1,146,394,0.000931084],[0,57,396,0.000283834]],"inputs":[["(*.f64 -3 (pow.f64 x 2))","(+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -9 (pow.f64 x 3)))","(+.f64 (*.f64 -27 (pow.f64 x 4)) (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -9 (pow.f64 x 3))))","(+.f64 (*.f64 -27 (pow.f64 x 4)) (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -9 (pow.f64 x 3)) (*.f64 -81 (pow.f64 x 5)))))","x","(+.f64 1/3 x)","(+.f64 1/3 (+.f64 (*.f64 1/9 (/.f64 1 x)) x))","(+.f64 1/3 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/9 (/.f64 1 x)) x)))","x","(+.f64 1/3 x)","(+.f64 1/3 (+.f64 (*.f64 1/9 (/.f64 1 x)) x))","(+.f64 1/3 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/9 (/.f64 1 x)) x)))","-1/3","(-.f64 (*.f64 -1 x) 1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -1 x)) 1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))) 1/3)","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","-1/3","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","x","(-.f64 x 1/3)","(-.f64 x 1/3)","(-.f64 x 1/3)","1/3","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)","x","(+.f64 1/3 x)","(+.f64 1/3 x)","(+.f64 1/3 x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -3 (pow.f64 x 2))","(*.f64 -3 (*.f64 x x))","(+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -9 (pow.f64 x 3)))","(fma.f64 -3 (*.f64 x x) (*.f64 -9 (pow.f64 x 3)))","(*.f64 (*.f64 x x) (+.f64 -3 (*.f64 x -9)))","(*.f64 x (*.f64 x (fma.f64 x -9 -3)))","(+.f64 (*.f64 -27 (pow.f64 x 4)) (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -9 (pow.f64 x 3))))","(fma.f64 -27 (pow.f64 x 4) (fma.f64 -3 (*.f64 x x) (*.f64 -9 (pow.f64 x 3))))","(fma.f64 -27 (pow.f64 x 4) (*.f64 (*.f64 x x) (+.f64 -3 (*.f64 x -9))))","(fma.f64 x (*.f64 x (fma.f64 x -9 -3)) (*.f64 -27 (pow.f64 x 4)))","(fma.f64 (*.f64 x x) (fma.f64 x -9 -3) (*.f64 -27 (pow.f64 x 4)))","(+.f64 (*.f64 -27 (pow.f64 x 4)) (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -9 (pow.f64 x 3)) (*.f64 -81 (pow.f64 x 5)))))","(fma.f64 -27 (pow.f64 x 4) (fma.f64 -3 (*.f64 x x) (fma.f64 -9 (pow.f64 x 3) (*.f64 -81 (pow.f64 x 5)))))","(fma.f64 -27 (pow.f64 x 4) (fma.f64 -3 (*.f64 x x) (fma.f64 -81 (pow.f64 x 5) (*.f64 -9 (pow.f64 x 3)))))","(fma.f64 -27 (pow.f64 x 4) (fma.f64 -81 (pow.f64 x 5) (*.f64 (*.f64 x x) (+.f64 -3 (*.f64 x -9)))))","(fma.f64 x (*.f64 x (fma.f64 x -9 -3)) (fma.f64 -81 (pow.f64 x 5) (*.f64 -27 (pow.f64 x 4))))","(fma.f64 x (*.f64 x (fma.f64 x -9 -3)) (fma.f64 -27 (pow.f64 x 4) (*.f64 -81 (pow.f64 x 5))))","x","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 (+.f64 (*.f64 1/9 (/.f64 1 x)) x))","(+.f64 1/3 (+.f64 x (/.f64 1/9 x)))","(+.f64 (+.f64 x 1/3) (/.f64 1/9 x))","(+.f64 x (+.f64 1/3 (/.f64 1/9 x)))","(+.f64 1/3 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/9 (/.f64 1 x)) x)))","(+.f64 1/3 (+.f64 (+.f64 x (/.f64 1/9 x)) (/.f64 1/27 (*.f64 x x))))","(+.f64 1/3 (+.f64 (/.f64 1/9 x) (+.f64 x (/.f64 1/27 (*.f64 x x)))))","(+.f64 x (+.f64 (/.f64 1/9 x) (+.f64 1/3 (/.f64 1/27 (*.f64 x x)))))","x","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 (+.f64 (*.f64 1/9 (/.f64 1 x)) x))","(+.f64 1/3 (+.f64 x (/.f64 1/9 x)))","(+.f64 (+.f64 x 1/3) (/.f64 1/9 x))","(+.f64 x (+.f64 1/3 (/.f64 1/9 x)))","(+.f64 1/3 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/9 (/.f64 1 x)) x)))","(+.f64 1/3 (+.f64 (+.f64 x (/.f64 1/9 x)) (/.f64 1/27 (*.f64 x x))))","(+.f64 1/3 (+.f64 (/.f64 1/9 x) (+.f64 x (/.f64 1/27 (*.f64 x x)))))","(+.f64 x (+.f64 (/.f64 1/9 x) (+.f64 1/3 (/.f64 1/27 (*.f64 x x)))))","-1/3","(-.f64 (*.f64 -1 x) 1/3)","(fma.f64 -1 x -1/3)","(fma.f64 x -1 -1/3)","(-.f64 -1/3 x)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -1 x)) 1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (neg.f64 x)) -1/3)","(fma.f64 -3 (*.f64 x x) (fma.f64 x -1 -1/3))","(-.f64 (fma.f64 -3 (*.f64 x x) -1/3) x)","(fma.f64 x (fma.f64 -3 x -1) -1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))) 1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (fma.f64 -1 x (*.f64 -9 (pow.f64 x 3)))) -1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (-.f64 (*.f64 -9 (pow.f64 x 3)) x)) -1/3)","(fma.f64 -3 (*.f64 x x) (fma.f64 -9 (pow.f64 x 3) (-.f64 -1/3 x)))","(-.f64 (fma.f64 x (*.f64 x (fma.f64 x -9 -3)) -1/3) x)","(fma.f64 x (*.f64 x (fma.f64 x -9 -3)) (-.f64 -1/3 x))","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x)))) (/.f64 1/243 (pow.f64 x 4)))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x))) (/.f64 1/243 (pow.f64 x 4))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4)))))","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x)))) (/.f64 1/243 (pow.f64 x 4)))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (+.f64 (/.f64 1/9 x) (/.f64 1/27 (*.f64 x x))) (/.f64 1/243 (pow.f64 x 4))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/243 (pow.f64 x 4)))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4)))))","-1/3","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","x","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","(-.f64 x 1/3)","(+.f64 x -1/3)","1/3","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","x","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","x","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)","(+.f64 1/3 x)","(+.f64 x 1/3)"]],"stop":[["node limit",1]],"time":48.1640625,"type":"simplify"},{"compiler":[[7136,5161]],"time":86.903076171875,"type":"eval"},{"alts":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (log1p.f64 (expm1.f64 (+.f64 x -1/3)))))","fresh",15.074795632530353],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (pow.f64 (*.f64 (+.f64 x -1/3) 9) -1))","next",15.0234375],["(+.f64 x 1/3)","done",0.01953125]],"compiler":[[16,12],[16,12],[4,3],[16,12],[16,12]],"count":[[368,3]],"kept":[{"done":[1,1],"fresh":[2,0],"new":[364,2],"picked":[1,0]}],"min-error":[0],"time":159.8740234375,"type":"prune"},{"compiler":[[45,30]],"locations":[["(+.f64 x -1/3)",0.01171875,false],["(*.f64 (+.f64 x -1/3) 9)",0.02734375,true],["(pow.f64 (*.f64 (+.f64 x -1/3) 9) -1)",0.5137760057134204,true],["(/.f64 (*.f64 x x) (+.f64 x -1/3))",13.951090440409493,false]],"time":10.245849609375,"type":"localize"},{"count":[[2,24]],"series":[["(*.f64 (+.f64 x -1/3) 9)","x","-inf",0.19287109375],["(*.f64 (+.f64 x -1/3) 9)","x","inf",0.2138671875],["(*.f64 (+.f64 x -1/3) 9)","x","0",0.203125],["(pow.f64 (*.f64 (+.f64 x -1/3) 9) -1)","x","-inf",0.22900390625],["(pow.f64 (*.f64 (+.f64 x -1/3) 9) -1)","x","inf",0.23779296875],["(pow.f64 (*.f64 (+.f64 x -1/3) 9) -1)","x","0",0.2919921875]],"time":1.4521484375,"type":"series"},{"count":[[2,42]],"egraph":[[2,2055,14,0.018853749],[1,177,14,0.003176249],[0,8,17,0.000330458]],"inputs":[["(pow.f64 (*.f64 (+.f64 x -1/3) 9) -1)","(*.f64 (+.f64 x -1/3) 9)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1/9 (+.f64 x -1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/9 (+.f64 x -1/3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1/9 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/9 (/.f64 1 (+.f64 x -1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3))) (cbrt.f64 (pow.f64 (+.f64 -3 (*.f64 9 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (+.f64 -3 (*.f64 9 x)) -2)) (cbrt.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 x -1/3)) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 1/9 (+.f64 x -1/3))) (sqrt.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (+.f64 -3 (*.f64 9 x))) 2) -1) (pow.f64 (cbrt.f64 (+.f64 -3 (*.f64 9 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 3 (sqrt.f64 (+.f64 x -1/3))) -1) (pow.f64 (*.f64 3 (sqrt.f64 (+.f64 x -1/3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (+.f64 -3 (*.f64 9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 -3 (*.f64 9 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 -3 (*.f64 9 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/9 (+.f64 x -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (+.f64 x -1/3)) 9)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 1/9 (+.f64 x -1/3))) (*.f64 3 (sqrt.f64 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 -3 (*.f64 9 x))) 2)) (cbrt.f64 (+.f64 -3 (*.f64 9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 -3 (*.f64 9 x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1/9 (+.f64 x -1/3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1/9 (+.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 1/9 (+.f64 x -1/3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 9) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (*.f64 9 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 9 x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 -3 (*.f64 9 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1/27 (pow.f64 x 3)) 9) (fma.f64 x x (-.f64 1/9 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -1/9) 9) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (+.f64 -1/27 (pow.f64 x 3))) (fma.f64 x x (-.f64 1/9 (*.f64 x -1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 9 (fma.f64 x x -1/9)) (+.f64 x 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 -3 (*.f64 9 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 -3 (*.f64 9 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 -3 (*.f64 9 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3 (sqrt.f64 (+.f64 x -1/3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 -3 (*.f64 9 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 -3 (*.f64 9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 -3 (*.f64 9 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 -3 (*.f64 9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 -3 (*.f64 9 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 -3 (*.f64 9 x))))))))"]],"rules":[["egg-rr",19],["egg-rr",23]],"stop":[["node limit",1]],"time":38.016845703125,"type":"rewrite"},{"count":[[66,61]],"egraph":[[5,5925,221,0.0243035],[4,1866,221,0.012373792],[3,613,223,0.004376125],[2,223,228,0.00163175],[1,102,232,0.000665333],[0,43,234,0.00021675]],"inputs":[["-1/3","(-.f64 (*.f64 -1 x) 1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -1 x)) 1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))) 1/3)","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","-3","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(*.f64 9 x)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(*.f64 9 x)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)"]],"method":["egg-herbie"],"outputs":[["-1/3","(-.f64 (*.f64 -1 x) 1/3)","(fma.f64 -1 x -1/3)","(-.f64 -1/3 x)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -1 x)) 1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (neg.f64 x)) -1/3)","(fma.f64 -3 (*.f64 x x) (fma.f64 -1 x -1/3))","(-.f64 (fma.f64 x (*.f64 x -3) -1/3) x)","(fma.f64 x (fma.f64 x -3 -1) -1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))) 1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (fma.f64 -1 x (*.f64 -9 (pow.f64 x 3)))) -1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (-.f64 (*.f64 -9 (pow.f64 x 3)) x)) -1/3)","(fma.f64 x (*.f64 x -3) (fma.f64 -9 (pow.f64 x 3) (-.f64 -1/3 x)))","(-.f64 (fma.f64 x (*.f64 x (fma.f64 x -9 -3)) -1/3) x)","(fma.f64 x (fma.f64 x (fma.f64 x -9 -3) -1) -1/3)","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x))","(+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (+.f64 (/.f64 1/243 (pow.f64 x 4)) (/.f64 1/81 (pow.f64 x 3))) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x)) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4)))))","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x))","(+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (+.f64 (/.f64 1/243 (pow.f64 x 4)) (/.f64 1/81 (pow.f64 x 3))) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x)) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4)))))","-3","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(*.f64 9 x)","(*.f64 x 9)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(*.f64 9 x)","(*.f64 x 9)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)"]],"stop":[["node limit",1]],"time":39.14111328125,"type":"simplify"},{"compiler":[[3823,2718]],"time":46.552001953125,"type":"eval"},{"alts":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (pow.f64 (*.f64 (+.f64 x -1/3) 9) -1))","done",15.0234375],["(+.f64 x 1/3)","done",0.01953125],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (pow.f64 (fma.f64 x 9 -3) -1))","next",15.015625]],"compiler":[[16,12],[4,3],[15,11],[15,11]],"count":[[200,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[197,1],"picked":[1,1]}],"min-error":[0],"time":59.79296875,"type":"prune"},{"compiler":[[43,28]],"locations":[["(+.f64 x -1/3)",0.01171875,false],["(fma.f64 x 9 -3)",0.03125,true],["(pow.f64 (fma.f64 x 9 -3) -1)",0.5137760057134204,true],["(/.f64 (*.f64 x x) (+.f64 x -1/3))",13.951090440409493,false]],"time":10.278076171875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x 9 -3)","x","-inf",0.2470703125],["(fma.f64 x 9 -3)","x","inf",0.18701171875],["(fma.f64 x 9 -3)","x","0",0.203125],["(pow.f64 (fma.f64 x 9 -3) -1)","x","-inf",0.22705078125],["(pow.f64 (fma.f64 x 9 -3) -1)","x","inf",0.203125],["(pow.f64 (fma.f64 x 9 -3) -1)","x","0",0.265869140625]],"time":1.411865234375,"type":"series"},{"count":[[2,40]],"egraph":[[2,1486,13,0.015345791],[1,144,13,0.0023639999999999998],[0,7,13,0.000270417]],"inputs":[["(pow.f64 (fma.f64 x 9 -3) -1)","(fma.f64 x 9 -3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (fma.f64 x 9 -3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x 9 -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 x 9 -3))) (cbrt.f64 (pow.f64 (fma.f64 x 9 -3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x 9 -3) -2)) (/.f64 1 (cbrt.f64 (fma.f64 x 9 -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x 9 -3) -1/2) (pow.f64 (fma.f64 x 9 -3) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x 9 -3)) 2) -1) (pow.f64 (cbrt.f64 (fma.f64 x 9 -3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x 9 -3)) -1) (pow.f64 (sqrt.f64 (fma.f64 x 9 -3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (fma.f64 x 9 -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x 9 -3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 x 9 -3) -1/2) (sqrt.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (fma.f64 x 9 -3)) 2)) (cbrt.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 9 -3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (fma.f64 x 9 -3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (fma.f64 x 9 -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (fma.f64 x 9 -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (fma.f64 x 9 -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (fma.f64 x 9 -3))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (*.f64 x 9))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 9) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 9) 1) -3)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x 9 -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x 9 -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x 9 -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x 9 -3)) (pow.f64 (cbrt.f64 (fma.f64 x 9 -3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x 9 -3)) 2) (cbrt.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x 9 -3)) (sqrt.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 9) 3) -27) (+.f64 (*.f64 (*.f64 x 9) (*.f64 x 9)) (-.f64 9 (*.f64 (*.f64 x 9) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 9) (*.f64 x 9)) 9) (-.f64 (*.f64 x 9) -3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x 9 -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x 9 -3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x 9 -3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x 9 -3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x 9 -3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x 9 -3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x 9 -3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x 9 -3)))))))"]],"rules":[["egg-rr",21],["egg-rr",19]],"stop":[["node limit",1]],"time":34.27197265625,"type":"rewrite"},{"count":[[64,59]],"egraph":[[5,5925,221,0.024188875],[4,1866,221,0.0122945],[3,613,223,0.004344000000000001],[2,223,228,0.0016266660000000001],[1,102,232,0.000666916],[0,43,234,0.000220833]],"inputs":[["-1/3","(-.f64 (*.f64 -1 x) 1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -1 x)) 1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))) 1/3)","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","-3","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(*.f64 9 x)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(*.f64 9 x)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)","(-.f64 (*.f64 9 x) 3)"]],"method":["egg-herbie"],"outputs":[["-1/3","(-.f64 (*.f64 -1 x) 1/3)","(fma.f64 -1 x -1/3)","(-.f64 -1/3 x)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (*.f64 -1 x)) 1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (neg.f64 x)) -1/3)","(fma.f64 -3 (*.f64 x x) (fma.f64 -1 x -1/3))","(-.f64 (fma.f64 x (*.f64 x -3) -1/3) x)","(fma.f64 x (fma.f64 x -3 -1) -1/3)","(-.f64 (+.f64 (*.f64 -3 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -9 (pow.f64 x 3)))) 1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (fma.f64 -1 x (*.f64 -9 (pow.f64 x 3)))) -1/3)","(+.f64 (fma.f64 -3 (*.f64 x x) (-.f64 (*.f64 -9 (pow.f64 x 3)) x)) -1/3)","(fma.f64 x (*.f64 x -3) (fma.f64 -9 (pow.f64 x 3) (-.f64 -1/3 x)))","(-.f64 (fma.f64 x (*.f64 x (fma.f64 x -9 -3)) -1/3) x)","(fma.f64 x (fma.f64 x (fma.f64 x -9 -3) -1) -1/3)","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x))","(+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (+.f64 (/.f64 1/243 (pow.f64 x 4)) (/.f64 1/81 (pow.f64 x 3))) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x)) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4)))))","(/.f64 1/9 x)","(+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 x 2))) (*.f64 1/9 (/.f64 1 x)))","(+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x))","(+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x))","(+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/81 (pow.f64 x 3)) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (/.f64 1/81 (pow.f64 x 3))))","(+.f64 (*.f64 1/243 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 1/81 (/.f64 1 (pow.f64 x 3))) (+.f64 (*.f64 1/9 (/.f64 1 x)) (*.f64 1/27 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (+.f64 (/.f64 1/243 (pow.f64 x 4)) (/.f64 1/81 (pow.f64 x 3))) (+.f64 (/.f64 1/27 (*.f64 x x)) (/.f64 1/9 x)))","(+.f64 (+.f64 (/.f64 (/.f64 1/27 x) x) (/.f64 1/9 x)) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4))))","(+.f64 (/.f64 1/27 (*.f64 x x)) (+.f64 (/.f64 1/9 x) (+.f64 (/.f64 1/81 (pow.f64 x 3)) (/.f64 1/243 (pow.f64 x 4)))))","-3","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(*.f64 9 x)","(*.f64 x 9)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(*.f64 9 x)","(*.f64 x 9)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)","(-.f64 (*.f64 9 x) 3)","(fma.f64 9 x -3)","(fma.f64 x 9 -3)"]],"stop":[["node limit",1]],"time":38.93798828125,"type":"simplify"},{"compiler":[[2890,2051]],"time":36.779052734375,"type":"eval"},{"alts":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (pow.f64 (*.f64 (+.f64 x -1/3) 9) -1))","done",15.0234375],["(+.f64 x 1/3)","done",0.01953125],["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (pow.f64 (fma.f64 x 9 -3) -1))","done",15.015625]],"compiler":[[16,12],[4,3],[15,11]],"count":[[158,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[155,0],"picked":[1,1]}],"min-error":[0],"time":35.18408203125,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["x",0.01953125,1],["(+.f64 x (/.f64 1 3))",0.01953125,1]],"compiler":[[2,1],[6,5],[91,62]],"count":[[8,1]],"inputs":[["(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (pow.f64 (fma.f64 x 9 -3) -1))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (log1p.f64 (expm1.f64 (+.f64 x -1/3)))))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (pow.f64 (*.f64 (+.f64 x -1/3) 9) -1))","(*.f64 (fma.f64 x x -1/9) (/.f64 1 (+.f64 x -1/3)))","(-.f64 (/.f64 (*.f64 x x) (+.f64 x -1/3)) (/.f64 1/9 (+.f64 x -1/3)))","(/.f64 (+.f64 1/27 (pow.f64 x 3)) (+.f64 1/9 (-.f64 (*.f64 x x) (*.f64 x 1/3))))","(+.f64 x 1/3)","(+.f64 x (/.f64 1 3))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, F"],"oracle":[18.945889382530353],"outputs":[["(+.f64 x 1/3)"]],"time":9.22900390625,"times":[["x",4.114013671875],["(+.f64 x (/.f64 1 3))",3.39404296875]],"type":"regimes"},{"compiler":[[4,3]],"egraph":[[1,5,4,2.0666999999999997e-5],[0,4,4,1.2875e-5]],"inputs":[["(+.f64 x 1/3)"]],"method":["egg-herbie"],"outputs":[["(+.f64 x 1/3)"]],"stop":[["done",1],["saturated",1]],"time":8.261962890625,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[4,3]],"remove-preprocessing":[[]],"time":6.963134765625,"type":"end"}]
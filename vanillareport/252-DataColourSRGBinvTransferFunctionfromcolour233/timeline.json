[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.8770725436042994,0.12195113231427968,0.0009763240814208984],[11,0.8487798809073865,0.15024379501119256,0.0009763240814208984],[10,0.7609750656411052,0.23804861027747393,0.0009763240814208984],[9,0.7102433945983648,0.28878028132021427,0.0009763240814208984],[8,0.546341072767973,0.45268260315060616,0.0009763240814208984],[7,0.46829234808683395,0.5307313278317451,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":28.259033203125,"type":"analyze"},{"outcomes":[["body",256,"valid",273.546875,8256]],"time":280.910888671875,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.417e-6],[1,15,20,7.8416e-5],[0,10,20,4.6458e-5]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y 1))","(/.f64 (+.f64 y x) (+.f64 x 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (+.f64 x y) (+.f64 y 1))","(/.f64 (+.f64 y x) (+.f64 x 1))","(/.f64 (+.f64 x y) (+.f64 x 1))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.2880859375,"type":"preprocess"},{"count":[[1,1]],"egraph":[[1,11,10,6.3666e-5],[0,7,10,3.7041e-5]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"stop":[["saturated",1]],"time":10.0390625,"type":"simplify"},{"compiler":[[9,6]],"time":0.199951171875,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (+.f64 y 1))","next",0.0078125]],"compiler":[[9,6],[9,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.671875,"type":"prune"},{"compiler":[[18,9]],"locations":[["(/.f64 (+.f64 x y) (+.f64 y 1))",0.0078125,true]],"time":3.99609375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 x y) (+.f64 y 1))","y","-inf",0.338134765625],["(/.f64 (+.f64 x y) (+.f64 y 1))","y","inf",0.333984375],["(/.f64 (+.f64 x y) (+.f64 y 1))","y","0",0.32177734375],["(/.f64 (+.f64 x y) (+.f64 y 1))","x","-inf",0.404052734375],["(/.f64 (+.f64 x y) (+.f64 y 1))","x","inf",0.43310546875],["(/.f64 (+.f64 x y) (+.f64 y 1))","x","0",0.382080078125]],"time":2.301025390625,"type":"series"},{"count":[[1,33]],"egraph":[[2,2318,10,0.021613999000000002],[1,157,10,0.0029160410000000003],[0,7,10,0.000194291]],"inputs":[["(/.f64 (+.f64 x y) (+.f64 y 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (+.f64 x y) (+.f64 y 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) 2) (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) (sqrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x y)) (*.f64 (sqrt.f64 (+.f64 x y)) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 1 (+.f64 (neg.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (+.f64 x y)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x y)) 1) (/.f64 (sqrt.f64 (+.f64 x y)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 (+.f64 x y) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x y)) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 (sqrt.f64 (+.f64 x y)) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (hypot.f64 1 (sqrt.f64 y))) (/.f64 (+.f64 x y) (hypot.f64 1 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (hypot.f64 1 (sqrt.f64 y))) (/.f64 (cbrt.f64 (+.f64 x y)) (hypot.f64 1 (sqrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (+.f64 1 (pow.f64 y 3))) (fma.f64 y y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (fma.f64 y y -1)) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 x y) (+.f64 y 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y 1) (+.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) (+.f64 (neg.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 3) (pow.f64 (+.f64 y 1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 x y) (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (+.f64 x y)) (log1p.f64 y)))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":39.81396484375,"type":"rewrite"},{"count":[[57,56]],"egraph":[[4,7242,346,0.026289583],[3,2093,350,0.0137865],[2,498,362,0.003780375],[1,155,406,0.000977875],[0,53,408,0.0002415]],"inputs":[["(/.f64 y (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(/.f64 x (+.f64 1 y))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","x","(+.f64 (*.f64 y (-.f64 1 x)) x)","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","1","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 x (pow.f64 y 2))))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3)))))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 3))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 y (+.f64 1 y))","(/.f64 y (+.f64 y 1))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 y 1))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 y 1))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(+.f64 (/.f64 y (+.f64 1 y)) (/.f64 x (+.f64 1 y)))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","x","(+.f64 (*.f64 y (-.f64 1 x)) x)","(fma.f64 y (-.f64 1 x) x)","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x))","(fma.f64 y (-.f64 1 x) (fma.f64 (*.f64 y y) (+.f64 x -1) x))","(fma.f64 y (-.f64 1 x) (fma.f64 y (*.f64 y (-.f64 x 1)) x))","(fma.f64 y (-.f64 1 x) (fma.f64 y (*.f64 y (+.f64 x -1)) x))","(+.f64 (*.f64 y (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 3) (-.f64 1 x)) (+.f64 (*.f64 (pow.f64 y 2) (-.f64 x 1)) x)))","(fma.f64 y (-.f64 1 x) (fma.f64 (pow.f64 y 3) (-.f64 1 x) (fma.f64 (*.f64 y y) (+.f64 x -1) x)))","(+.f64 (fma.f64 (*.f64 y y) (+.f64 x -1) x) (*.f64 (-.f64 1 x) (+.f64 y (pow.f64 y 3))))","(fma.f64 (-.f64 1 x) (+.f64 y (pow.f64 y 3)) (fma.f64 y (*.f64 y (-.f64 x 1)) x))","(fma.f64 (-.f64 1 x) (+.f64 y (pow.f64 y 3)) (fma.f64 y (*.f64 y (+.f64 x -1)) x))","1","(-.f64 (+.f64 1 (/.f64 x y)) (/.f64 1 y))","(+.f64 1 (-.f64 (/.f64 x y) (/.f64 1 y)))","(+.f64 1 (+.f64 (/.f64 x y) (/.f64 -1 y)))","(-.f64 1 (/.f64 (-.f64 1 x) y))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) (/.f64 x (*.f64 y y)))))","(+.f64 (+.f64 1 (/.f64 x y)) (-.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 y) (/.f64 x (*.f64 y y)))))","(+.f64 (+.f64 (+.f64 1 (/.f64 x y)) (/.f64 (-.f64 1 x) (*.f64 y y))) (/.f64 -1 y))","(+.f64 (/.f64 (+.f64 x -1) y) (-.f64 1 (/.f64 (+.f64 x -1) (*.f64 y y))))","(-.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (/.f64 x y)))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 1 (pow.f64 y 3)))))","(-.f64 (+.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 1 (*.f64 y y))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (*.f64 y y)) (/.f64 1 (pow.f64 y 3)))))","(+.f64 (+.f64 1 (+.f64 (/.f64 x y) (/.f64 1 (*.f64 y y)))) (-.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 y)))))","(-.f64 (+.f64 (+.f64 (+.f64 1 (/.f64 x y)) (/.f64 (-.f64 1 x) (*.f64 y y))) (/.f64 -1 y)) (/.f64 (-.f64 1 x) (pow.f64 y 3)))","(+.f64 (*.f64 (-.f64 1 x) (-.f64 (/.f64 -1 (pow.f64 y 3)) (/.f64 1 y))) (-.f64 1 (/.f64 (+.f64 x -1) (*.f64 y y))))","(fma.f64 (/.f64 (-.f64 1 x) y) (+.f64 -1 (/.f64 -1 (*.f64 y y))) (-.f64 1 (/.f64 (+.f64 x -1) (*.f64 y y))))","1","(+.f64 1 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))","(+.f64 1 (-.f64 (/.f64 x y) (/.f64 1 y)))","(+.f64 1 (+.f64 (/.f64 x y) (/.f64 -1 y)))","(-.f64 1 (/.f64 (-.f64 1 x) y))","(+.f64 1 (/.f64 (+.f64 x -1) y))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y)))))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 (+.f64 1 (/.f64 x y)) (+.f64 (/.f64 1 y) (/.f64 x (*.f64 y y)))))","(+.f64 (+.f64 1 (/.f64 x y)) (-.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 y) (/.f64 x (*.f64 y y)))))","(+.f64 (+.f64 (+.f64 1 (/.f64 x y)) (/.f64 (-.f64 1 x) (*.f64 y y))) (/.f64 -1 y))","(+.f64 (/.f64 (+.f64 x -1) y) (-.f64 1 (/.f64 (+.f64 x -1) (*.f64 y y))))","(+.f64 (/.f64 1 (pow.f64 y 2)) (+.f64 1 (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) (pow.f64 y 3))) (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 x)) y))))))","(-.f64 (+.f64 (+.f64 (/.f64 x (pow.f64 y 3)) (/.f64 1 (*.f64 y y))) (+.f64 1 (/.f64 x y))) (+.f64 (/.f64 1 y) (+.f64 (/.f64 x (*.f64 y y)) (/.f64 1 (pow.f64 y 3)))))","(+.f64 (+.f64 1 (+.f64 (/.f64 x y) (/.f64 1 (*.f64 y y)))) (-.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 1 (pow.f64 y 3)) (/.f64 1 y)))))","(-.f64 (+.f64 (+.f64 (+.f64 1 (/.f64 x y)) (/.f64 (-.f64 1 x) (*.f64 y y))) (/.f64 -1 y)) (/.f64 (-.f64 1 x) (pow.f64 y 3)))","(+.f64 (*.f64 (-.f64 1 x) (-.f64 (/.f64 -1 (pow.f64 y 3)) (/.f64 1 y))) (-.f64 1 (/.f64 (+.f64 x -1) (*.f64 y y))))","(fma.f64 (/.f64 (-.f64 1 x) y) (+.f64 -1 (/.f64 -1 (*.f64 y y))) (-.f64 1 (/.f64 (+.f64 x -1) (*.f64 y y))))"]],"stop":[["node limit",1]],"time":41.281005859375,"type":"simplify"},{"compiler":[[733,446]],"time":8.824951171875,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x y) (fma.f64 y y -1)) (+.f64 y -1))","fresh",14.366425625420513],["(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","next",0.00390625]],"compiler":[[14,9],[13,9],[14,9],[13,9]],"count":[[57,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[56,2],"picked":[1,0]}],"min-error":[0],"time":9.091064453125,"type":"prune"},{"compiler":[[29,18]],"locations":[["(/.f64 x (+.f64 y 1))",0.01171875,true]],"time":6.546875,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 x (+.f64 y 1))","y","-inf",0.2431640625],["(/.f64 x (+.f64 y 1))","y","inf",0.27392578125],["(/.f64 x (+.f64 y 1))","y","0",0.27685546875],["(/.f64 x (+.f64 y 1))","x","-inf",0.364990234375],["(/.f64 x (+.f64 y 1))","x","inf",0.47705078125],["(/.f64 x (+.f64 y 1))","x","0",0.52099609375]],"time":2.239013671875,"type":"series"},{"count":[[1,33]],"egraph":[[2,1730,7,0.017230126],[1,128,7,0.002265876],[0,6,7,0.000170459]],"inputs":[["(/.f64 x (+.f64 y 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (+.f64 y 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (+.f64 y 1))) (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (+.f64 y 1))) 2) (cbrt.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (+.f64 y 1))) (sqrt.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 x (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 y 1))) (/.f64 x (sqrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 x) (sqrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (+.f64 1 (pow.f64 y 3))) (fma.f64 y y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (+.f64 y 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y 1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (+.f64 y 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (+.f64 y 1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 x) (log1p.f64 y)))))))"]],"rules":[["egg-rr",33]],"stop":[["node limit",1]],"time":34.98095703125,"type":"rewrite"},{"count":[[57,48]],"egraph":[[4,3217,235,0.018864541000000002],[3,732,252,0.006567666000000001],[2,221,263,0.001688791],[1,83,269,0.000562833],[0,30,281,0.000159958]],"inputs":[["(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x)))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","(/.f64 x (+.f64 1 y))","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(fma.f64 -1 (*.f64 x y) x)","(-.f64 x (*.f64 x y))","(+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x))","(fma.f64 (*.f64 y y) x (fma.f64 -1 (*.f64 x y) x))","(fma.f64 x (*.f64 y y) (-.f64 x (*.f64 x y)))","(fma.f64 x (*.f64 y (+.f64 y -1)) x)","(*.f64 x (fma.f64 y y (-.f64 1 y)))","(*.f64 x (-.f64 (fma.f64 y y 1) y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x)))","(fma.f64 -1 (*.f64 x (pow.f64 y 3)) (fma.f64 (*.f64 y y) x (fma.f64 -1 (*.f64 x y) x)))","(-.f64 (fma.f64 x (*.f64 y y) (-.f64 x (*.f64 x y))) (*.f64 x (pow.f64 y 3)))","(-.f64 (fma.f64 x (*.f64 y (+.f64 y -1)) x) (*.f64 x (pow.f64 y 3)))","(-.f64 x (*.f64 y (*.f64 x (fma.f64 y y (-.f64 1 y)))))","(*.f64 (-.f64 1 y) (*.f64 x (fma.f64 y y 1)))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 x (*.f64 y y)))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3)))","(+.f64 (-.f64 (/.f64 x y) (/.f64 x (*.f64 y y))) (/.f64 x (pow.f64 y 3)))","(+.f64 (/.f64 x y) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y))))","(fma.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 x y) (/.f64 x (pow.f64 y 3)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))","(fma.f64 -1 (/.f64 x (pow.f64 y 4)) (+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3))))","(-.f64 (+.f64 (-.f64 (/.f64 x y) (/.f64 x (*.f64 y y))) (/.f64 x (pow.f64 y 3))) (/.f64 x (pow.f64 y 4)))","(+.f64 (-.f64 (/.f64 x y) (/.f64 x (*.f64 y y))) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (pow.f64 y 4))))","(fma.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 x y) (*.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 x (pow.f64 y 3))))","(*.f64 (+.f64 1 (/.f64 -1 y)) (+.f64 (/.f64 x y) (/.f64 x (pow.f64 y 3))))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 x (*.f64 y y)))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3)))","(+.f64 (-.f64 (/.f64 x y) (/.f64 x (*.f64 y y))) (/.f64 x (pow.f64 y 3)))","(+.f64 (/.f64 x y) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y))))","(fma.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 x y) (/.f64 x (pow.f64 y 3)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))","(fma.f64 -1 (/.f64 x (pow.f64 y 4)) (+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3))))","(-.f64 (+.f64 (-.f64 (/.f64 x y) (/.f64 x (*.f64 y y))) (/.f64 x (pow.f64 y 3))) (/.f64 x (pow.f64 y 4)))","(+.f64 (-.f64 (/.f64 x y) (/.f64 x (*.f64 y y))) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (pow.f64 y 4))))","(fma.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 x y) (*.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 x (pow.f64 y 3))))","(*.f64 (+.f64 1 (/.f64 -1 y)) (+.f64 (/.f64 x y) (/.f64 x (pow.f64 y 3))))"]],"stop":[["node limit",1]],"time":32.653076171875,"type":"simplify"},{"compiler":[[794,526]],"time":9.47998046875,"type":"eval"},{"alts":[["(+.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1)))","next",1.941131322382124],["(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","done",0.00390625]],"compiler":[[18,12],[13,9],[18,12]],"count":[[50,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[48,1],"picked":[1,1]}],"min-error":[0],"time":7.925048828125,"type":"prune"},{"compiler":[[53,32]],"locations":[["(/.f64 x (fma.f64 y y -1))",4.026922934084083,true],["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))",5.770728039966511,true]],"time":12.697021484375,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 x (fma.f64 y y -1))","y","-inf",0.26708984375],["(/.f64 x (fma.f64 y y -1))","y","inf",0.369873046875],["(/.f64 x (fma.f64 y y -1))","y","0",0.2919921875],["(/.f64 x (fma.f64 y y -1))","x","-inf",0.391845703125],["(/.f64 x (fma.f64 y y -1))","x","inf",0.458984375],["(/.f64 x (fma.f64 y y -1))","x","0",0.385986328125],["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))","y","-inf",0.27197265625],["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))","y","inf",0.23486328125],["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))","y","0",0.239013671875],["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))","x","-inf",0.304931640625],["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))","x","inf",0.49609375],["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))","x","0",1.115966796875]],"time":4.987060546875,"type":"series"},{"count":[[2,144]],"egraph":[[2,2593,15,0.024839667],[1,178,15,0.0032577500000000002],[0,8,22,0.000219125]],"inputs":[["(*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1))","(/.f64 x (fma.f64 y y -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1)) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) 1) (*.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 x (+.f64 y 1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 x (+.f64 y 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (+.f64 y 1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (+.f64 y 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (+.f64 y 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y y -1) (*.f64 (/.f64 (fma.f64 y y -1) x) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y y -1) (*.f64 (+.f64 y 1) (/.f64 (fma.f64 y y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 y 1) (/.f64 (fma.f64 y y -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y y -1) (*.f64 x (-.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 -1 (pow.f64 y 3)) (*.f64 (/.f64 (fma.f64 y y -1) x) (-.f64 (fma.f64 y y 1) (*.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 y 1)) (fma.f64 y y -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (-.f64 y 1))) (neg.f64 (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 -1 (pow.f64 y 3))) (*.f64 (fma.f64 y y -1) (-.f64 (fma.f64 y y 1) (*.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (+.f64 -1 (pow.f64 y 3))) (*.f64 (neg.f64 (fma.f64 y y -1)) (-.f64 (fma.f64 y y 1) (*.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 y y -1)) (*.f64 (fma.f64 y y -1) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (fma.f64 y y -1)) (*.f64 (neg.f64 (fma.f64 y y -1)) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) x) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y y -1) x) (*.f64 (+.f64 y 1) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) 1) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (/.f64 (fma.f64 y y -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) (neg.f64 x)) (*.f64 (-.f64 (fma.f64 y y 1) (*.f64 y -1)) (neg.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y y -1) (neg.f64 x)) (*.f64 (+.f64 y 1) (neg.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) 3) (pow.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1)) 3)) (+.f64 (pow.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) 2) (-.f64 (pow.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1)) 2) (*.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) (/.f64 (neg.f64 x) (fma.f64 y y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) 2) (pow.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1)) 2)) (-.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) (/.f64 (neg.f64 x) (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y 1)) 1) (fma.f64 y y -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y 1)) (pow.f64 (cbrt.f64 (fma.f64 y y -1)) 2)) (cbrt.f64 (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (-.f64 y 1)) (sqrt.f64 (fma.f64 y y -1))) (sqrt.f64 (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (-.f64 y 1)) (neg.f64 (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1 (pow.f64 y 3)) (/.f64 x (fma.f64 y y -1))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y y -1) (/.f64 x (fma.f64 y y -1))) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 -1 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1) (*.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (fma.f64 y y -1)) (fma.f64 y y -1)) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 y 1) (neg.f64 x)) (neg.f64 (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (+.f64 y 1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (+.f64 y 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 y y -1) (*.f64 x (-.f64 y 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (+.f64 y 1)))) 2)) (cbrt.f64 (log.f64 (/.f64 x (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 x (+.f64 y 1))))) (sqrt.f64 (log.f64 (/.f64 x (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (+.f64 y 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (+.f64 y 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 x (+.f64 y 1)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 x (+.f64 y 1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 x (+.f64 y 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x (+.f64 y 1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 x) 1) (log.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (-.f64 y 1)) 1) (log.f64 (/.f64 (fma.f64 y y -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 x (-.f64 y 1))) (*.f64 (log.f64 (fma.f64 y y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 y y -1))) 1) (log.f64 (-.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (/.f64 x (fma.f64 y y -1))) (*.f64 (log.f64 (-.f64 y 1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 y y -1))) 1) (*.f64 (log.f64 (-.f64 y 1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (-.f64 y 1)) 1) (log.f64 (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (-.f64 y 1)) (*.f64 (log.f64 (/.f64 x (fma.f64 y y -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (-.f64 y 1)) 1) (*.f64 (log.f64 (/.f64 x (fma.f64 y y -1))) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (/.f64 1 (fma.f64 y y -1)) y) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (/.f64 1 (fma.f64 y y -1)) -1) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 x (fma.f64 y y -1)) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x (fma.f64 y y -1)) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (fma.f64 y y -1)) y (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (fma.f64 y y -1)) -1 (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (*.f64 y x) (fma.f64 y y -1)) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (neg.f64 x) (fma.f64 y y -1)) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2)) (*.f64 (cbrt.f64 (/.f64 x (fma.f64 y y -1))) y) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2)) (*.f64 (cbrt.f64 (/.f64 x (fma.f64 y y -1))) -1) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (/.f64 x (fma.f64 y y -1))) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (fma.f64 y y -1))) (*.f64 (sqrt.f64 (/.f64 x (fma.f64 y y -1))) y) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (fma.f64 y y -1))) (*.f64 (sqrt.f64 (/.f64 x (fma.f64 y y -1))) -1) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 x (fma.f64 y y -1))) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 x) (/.f64 1 (fma.f64 y y -1)) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1)) 1 (*.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1))) 2) (cbrt.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1))) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1))) 2) (cbrt.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1))) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1))) (sqrt.f64 (/.f64 (*.f64 y x) (fma.f64 y y -1))) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1))) (sqrt.f64 (/.f64 (neg.f64 x) (fma.f64 y y -1))) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (/.f64 1 (fma.f64 y y -1)) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x (fma.f64 y y -1)) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 x (fma.f64 y y -1)) (sqrt.f64 y)) (sqrt.f64 y) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2))) (cbrt.f64 (/.f64 x (fma.f64 y y -1))) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (sqrt.f64 (/.f64 x (fma.f64 y y -1)))) (sqrt.f64 (/.f64 x (fma.f64 y y -1))) (/.f64 (neg.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2))) (cbrt.f64 (/.f64 x (fma.f64 y y -1))) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (sqrt.f64 (/.f64 x (fma.f64 y y -1)))) (sqrt.f64 (/.f64 x (fma.f64 y y -1))) (/.f64 (*.f64 y x) (fma.f64 y y -1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 x (fma.f64 y y -1)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 x (fma.f64 y y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (fma.f64 y y -1))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (fma.f64 y y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (fma.f64 y y -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (fma.f64 y y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (fma.f64 y y -1))) (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2)) (cbrt.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (fma.f64 y y -1))) (sqrt.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 y y -1)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (fma.f64 y y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y y -1)) -2) (/.f64 x (cbrt.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (fma.f64 y y -1)) 2)) (cbrt.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (fma.f64 y y -1)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y y -1) -1/2) (/.f64 x (sqrt.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (fma.f64 y y -1))) (/.f64 (cbrt.f64 x) (sqrt.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (fma.f64 y y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 y y -1) x) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (fma.f64 y y -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (fma.f64 y y -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 y y -1) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 3) (pow.f64 (fma.f64 y y -1) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (fma.f64 y y -1) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (fma.f64 y y -1)))) 2)) (cbrt.f64 (log.f64 (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 x (fma.f64 y y -1))))) (sqrt.f64 (log.f64 (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (fma.f64 y y -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 y y -1) x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) (pow.f64 (fma.f64 y y -1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 y y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (fma.f64 y y -1) x) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 x (fma.f64 y y -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 x (fma.f64 y y -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (fma.f64 y y -1) x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x (fma.f64 y y -1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 x) 1) (log.f64 (fma.f64 y y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 x) (*.f64 (log.f64 (fma.f64 y y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 x) 1) (*.f64 (log.f64 (fma.f64 y y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1) (neg.f64 (log.f64 (fma.f64 y y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 (fma.f64 y y -1))) (*.f64 (log.f64 x) 1)))))))"]],"rules":[["egg-rr",52],["egg-rr",92]],"stop":[["node limit",1]],"time":50.64697265625,"type":"rewrite"},{"count":[[192,177]],"egraph":[[4,5925,567,0.027466790999999997],[3,1856,603,0.014199333],[2,499,657,0.0041216659999999995],[1,166,673,0.001139541],[0,57,745,0.0002945]],"inputs":[["(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x)))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(*.f64 -1 x)","(+.f64 (*.f64 -1 x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 -1 x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 -1 (*.f64 (pow.f64 y 4) x))))","(+.f64 (*.f64 -1 x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 6) x)) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","(/.f64 x (pow.f64 y 2))","(+.f64 (/.f64 x (pow.f64 y 4)) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 x (pow.f64 y 8)))))","(/.f64 x (pow.f64 y 2))","(+.f64 (/.f64 x (pow.f64 y 4)) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 x (pow.f64 y 8)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","(/.f64 (*.f64 (-.f64 y 1) x) (-.f64 (pow.f64 y 2) 1))","(/.f64 (-.f64 y 1) (/.f64 (+.f64 (*.f64 y y) -1) x))","(*.f64 (/.f64 (-.f64 y 1) (fma.f64 y y -1)) x)","(*.f64 x (/.f64 (+.f64 y -1) (fma.f64 y y -1)))","(*.f64 1 (/.f64 x (+.f64 y 1)))","(/.f64 x (+.f64 y 1))","x","(+.f64 (*.f64 -1 (*.f64 y x)) x)","(fma.f64 -1 (*.f64 y x) x)","(-.f64 x (*.f64 y x))","(+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x))","(fma.f64 (*.f64 y y) x (fma.f64 -1 (*.f64 y x) x))","(fma.f64 x (*.f64 y y) (-.f64 x (*.f64 y x)))","(fma.f64 x (-.f64 (*.f64 y y) y) x)","(*.f64 x (-.f64 (fma.f64 y y 1) y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 y 3) x)) (+.f64 (*.f64 (pow.f64 y 2) x) (+.f64 (*.f64 -1 (*.f64 y x)) x)))","(fma.f64 -1 (*.f64 x (pow.f64 y 3)) (fma.f64 (*.f64 y y) x (fma.f64 -1 (*.f64 y x) x)))","(-.f64 (fma.f64 x (*.f64 y y) (-.f64 x (*.f64 y x))) (*.f64 x (pow.f64 y 3)))","(-.f64 (fma.f64 x (-.f64 (*.f64 y y) y) x) (*.f64 x (pow.f64 y 3)))","(+.f64 x (*.f64 y (*.f64 x (-.f64 y (fma.f64 y y 1)))))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 x (*.f64 y y)))","(-.f64 (/.f64 x y) (/.f64 (/.f64 x y) y))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3)))","(+.f64 (/.f64 x y) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y))))","(-.f64 (/.f64 x y) (-.f64 (/.f64 (/.f64 x y) y) (/.f64 x (pow.f64 y 3))))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))","(fma.f64 -1 (/.f64 x (pow.f64 y 4)) (+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3))))","(-.f64 (+.f64 (/.f64 x y) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y)))) (/.f64 x (pow.f64 y 4)))","(+.f64 (/.f64 x y) (-.f64 (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y))) (/.f64 x (pow.f64 y 4))))","(+.f64 (-.f64 (/.f64 x y) (/.f64 (/.f64 x y) y)) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (pow.f64 y 4))))","(/.f64 x y)","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))","(fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y))","(-.f64 (/.f64 x y) (/.f64 x (*.f64 y y)))","(-.f64 (/.f64 x y) (/.f64 (/.f64 x y) y))","(+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y)))","(+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3)))","(+.f64 (/.f64 x y) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y))))","(-.f64 (/.f64 x y) (-.f64 (/.f64 (/.f64 x y) y) (/.f64 x (pow.f64 y 3))))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 4))) (+.f64 (/.f64 x (pow.f64 y 3)) (+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 2))) (/.f64 x y))))","(fma.f64 -1 (/.f64 x (pow.f64 y 4)) (+.f64 (fma.f64 -1 (/.f64 x (*.f64 y y)) (/.f64 x y)) (/.f64 x (pow.f64 y 3))))","(-.f64 (+.f64 (/.f64 x y) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y)))) (/.f64 x (pow.f64 y 4)))","(+.f64 (/.f64 x y) (-.f64 (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (*.f64 y y))) (/.f64 x (pow.f64 y 4))))","(+.f64 (-.f64 (/.f64 x y) (/.f64 (/.f64 x y) y)) (-.f64 (/.f64 x (pow.f64 y 3)) (/.f64 x (pow.f64 y 4))))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(/.f64 x (-.f64 (pow.f64 y 2) 1))","(/.f64 x (+.f64 (*.f64 y y) -1))","(/.f64 x (fma.f64 y y -1))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 -1 x (neg.f64 (*.f64 x (*.f64 y y))))","(-.f64 (neg.f64 x) (*.f64 x (*.f64 y y)))","(*.f64 x (-.f64 -1 (*.f64 y y)))","(*.f64 x (fma.f64 (neg.f64 y) y -1))","(+.f64 (*.f64 -1 x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 -1 (*.f64 (pow.f64 y 4) x))))","(fma.f64 -1 x (*.f64 -1 (+.f64 (*.f64 x (*.f64 y y)) (*.f64 x (pow.f64 y 4)))))","(-.f64 (neg.f64 (*.f64 x (+.f64 (*.f64 y y) (pow.f64 y 4)))) x)","(neg.f64 (fma.f64 x (fma.f64 y y (pow.f64 y 4)) x))","(*.f64 x (-.f64 -1 (fma.f64 y y (pow.f64 y 4))))","(+.f64 (*.f64 -1 x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 6) x)) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","(fma.f64 -1 x (fma.f64 -1 (*.f64 x (*.f64 y y)) (fma.f64 -1 (*.f64 x (pow.f64 y 6)) (neg.f64 (*.f64 x (pow.f64 y 4))))))","(-.f64 (-.f64 (neg.f64 (*.f64 x (+.f64 (pow.f64 y 6) (pow.f64 y 4)))) (*.f64 x (*.f64 y y))) x)","(-.f64 (neg.f64 (fma.f64 x (fma.f64 y y (pow.f64 y 4)) x)) (*.f64 x (pow.f64 y 6)))","(*.f64 x (-.f64 (-.f64 -1 (fma.f64 y y (pow.f64 y 4))) (pow.f64 y 6)))","(*.f64 x (-.f64 -1 (+.f64 (pow.f64 y 6) (fma.f64 y y (pow.f64 y 4)))))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 (/.f64 x y) y)","(+.f64 (/.f64 x (pow.f64 y 4)) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 4)))","(+.f64 (/.f64 (/.f64 x y) y) (/.f64 x (pow.f64 y 4)))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 6))))","(+.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 x (pow.f64 y 4)) (/.f64 x (pow.f64 y 6))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 (/.f64 x y) y) (/.f64 x (pow.f64 y 6))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 x (pow.f64 y 8)))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 8)))))","(+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 8))) (/.f64 x (pow.f64 y 4))))","(+.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 8)))))","(+.f64 (/.f64 (/.f64 x y) y) (+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 8)))))","(/.f64 x (pow.f64 y 2))","(/.f64 x (*.f64 y y))","(/.f64 (/.f64 x y) y)","(+.f64 (/.f64 x (pow.f64 y 4)) (/.f64 x (pow.f64 y 2)))","(+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 4)))","(+.f64 (/.f64 (/.f64 x y) y) (/.f64 x (pow.f64 y 4)))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 2))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 6))))","(+.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 x (pow.f64 y 4)) (/.f64 x (pow.f64 y 6))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 (/.f64 x y) y) (/.f64 x (pow.f64 y 6))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (/.f64 x (pow.f64 y 2)) (/.f64 x (pow.f64 y 8)))))","(+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 8)))))","(+.f64 (/.f64 x (pow.f64 y 6)) (+.f64 (+.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 8))) (/.f64 x (pow.f64 y 4))))","(+.f64 (/.f64 x (*.f64 y y)) (+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 8)))))","(+.f64 (/.f64 (/.f64 x y) y) (+.f64 (/.f64 x (pow.f64 y 4)) (+.f64 (/.f64 x (pow.f64 y 6)) (/.f64 x (pow.f64 y 8)))))"]],"stop":[["node limit",1]],"time":46.93798828125,"type":"simplify"},{"compiler":[[3883,2477]],"time":42.927978515625,"type":"eval"},{"alts":[["(+.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1)))","done",1.941131322382124],["(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","done",0.00390625]],"compiler":[[18,12],[13,9]],"count":[[179,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[177,0],"picked":[1,1]}],"min-error":[0],"time":50.587890625,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["(/.f64 (+.f64 x y) (+.f64 y 1))",0.00390625,1]],"compiler":[[3,2],[3,2],[9,6],[48,29]],"count":[[4,1]],"inputs":[["(+.f64 (/.f64 y (+.f64 y 1)) (*.f64 (/.f64 x (fma.f64 y y -1)) (+.f64 y -1)))","(*.f64 (/.f64 (+.f64 x y) (fma.f64 y y -1)) (+.f64 y -1))","(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))","(/.f64 (+.f64 x y) (+.f64 y 1))"]],"link":["."],"name":["Data.Colour.SRGB:invTransferFunction from colour-2.3.3"],"oracle":[14.380169562266783],"outputs":[["(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))"]],"time":10.944091796875,"times":[["x",3.3310546875],["y",3.43798828125],["(/.f64 (+.f64 x y) (+.f64 y 1))",3.1630859375]],"type":"regimes"},{"compiler":[[13,9]],"egraph":[[1,12,16,3.3791e-5],[0,8,16,2.2208e-5]],"inputs":[["(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 y (+.f64 y 1)) (/.f64 x (+.f64 y 1)))"]],"stop":[["done",1],["saturated",1]],"time":8.3349609375,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[13,9]],"remove-preprocessing":[[]],"time":8.5888671875,"type":"end"}]
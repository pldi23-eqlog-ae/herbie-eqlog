[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.18713405719610066,0.7680293597423298,0.04483658306156957],[11,0.1403505428970755,0.8576977621487947,0.0019516949541298345],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":128.595947265625,"type":"analyze"},{"outcomes":[["body",256,"invalid",85.66650390625,2092],["body",256,"valid",340.068359375,8256]],"time":435.572021484375,"type":"sample"},{"compiler":[[11,7]],"egraph":[[1,4,4,1.0083e-5],[0,4,4,9e-6],[10,1302,70,0.018569],[9,1301,70,0.015900583],[8,1293,70,0.013218083],[7,1238,70,0.010511416],[6,870,70,0.007632833],[5,555,70,0.0043355],[4,291,70,0.002330375],[3,193,70,0.001164833],[2,124,70,0.000656667],[1,65,70,0.000325959],[0,22,70,0.000108834]],"inputs":[["0","1","2","3"],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","(-.f64 (*.f64 x.im y.re) (*.f64 x.re y.im))","(-.f64 (*.f64 y.re x.re) (*.f64 x.im y.im))","(-.f64 (*.f64 y.im y.re) (*.f64 x.im x.re))","(-.f64 (*.f64 x.re x.im) (*.f64 y.re y.im))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(-.f64 (*.f64 x.re y.im) (*.f64 x.im y.re))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","0","3","1"],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","(-.f64 (*.f64 x.im y.re) (*.f64 x.re y.im))","(-.f64 (*.f64 y.re x.im) (*.f64 x.re y.im))","(fma.f64 y.re x.im (*.f64 y.im (neg.f64 x.re)))","(-.f64 (*.f64 y.re x.re) (*.f64 x.im y.im))","(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","(-.f64 (*.f64 y.im y.re) (*.f64 x.im x.re))","(-.f64 (*.f64 y.re y.im) (*.f64 x.re x.im))","(fma.f64 x.re (neg.f64 x.im) (*.f64 y.re y.im))","(-.f64 (*.f64 x.re x.im) (*.f64 y.re y.im))","(fma.f64 x.re x.im (*.f64 y.im (neg.f64 y.re)))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","(-.f64 (*.f64 x.re y.im) (*.f64 x.im y.re))","(-.f64 (*.f64 x.re y.im) (*.f64 y.re x.im))","(fma.f64 x.re y.im (*.f64 y.re (neg.f64 x.im)))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x.re y.re)","(sort x.im y.im)"]],"time":42.697998046875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[11,587,10,0.008108541],[10,581,10,0.006878666],[9,523,10,0.005612791],[8,407,10,0.004295291],[7,304,10,0.002996624],[6,204,10,0.001816499],[5,123,10,0.0010572490000000001],[4,75,10,0.000629249],[3,48,10,0.00036545800000000004],[2,31,10,0.000210583],[1,16,10,0.000114916],[0,8,10,4.1583e-5]],"inputs":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))"]],"stop":[["saturated",1]],"time":19.383056640625,"type":"simplify"},{"compiler":[[11,7]],"time":0.22998046875,"type":"eval"},{"alts":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","next",0.01171875]],"compiler":[[11,7],[11,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.673095703125,"type":"prune"},{"compiler":[[21,7]],"locations":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))",0.01171875,true]],"time":4.35693359375,"type":"localize"},{"count":[[1,48]],"series":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","y.im","-inf",0.258056640625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","y.im","inf",0.254150390625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","y.im","0",0.274169921875],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","x.im","-inf",0.258056640625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","x.im","inf",0.281005859375],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","x.im","0",0.386962890625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","y.re","-inf",0.246826171875],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","y.re","inf",0.2900390625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","y.re","0",0.282958984375],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","x.re","-inf",0.288818359375],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","x.re","inf",0.300048828125],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","x.re","0",0.4169921875]],"time":3.679931640625,"type":"series"},{"count":[[1,49]],"egraph":[[2,2434,10,0.020877125000000003],[1,179,10,0.003089125],[0,8,10,0.000180708]],"inputs":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x.re y.re) (*.f64 y.im (neg.f64 x.im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x.re y.re) (*.f64 (*.f64 y.im (neg.f64 x.im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x.re y.re) (+.f64 (*.f64 y.im (neg.f64 x.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 x.im) y.im (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (*.f64 y.im (neg.f64 x.im)) 1 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 x.im y.im))) (sqrt.f64 (*.f64 x.im y.im)) (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (*.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (+.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y.im (neg.f64 x.im)) (*.f64 x.re y.re))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) 2) (cbrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) (sqrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x.re y.re) 3) (pow.f64 (*.f64 x.im y.im) 3)) (/.f64 1 (+.f64 (pow.f64 (*.f64 x.re y.re) 2) (*.f64 (*.f64 x.im y.im) (fma.f64 x.re y.re (*.f64 x.im y.im))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x.re y.re) 2) (pow.f64 (*.f64 x.im y.im) 2)) (/.f64 1 (fma.f64 x.re y.re (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x.re y.re)) (sqrt.f64 (*.f64 x.im y.im))) (-.f64 (sqrt.f64 (*.f64 x.re y.re)) (sqrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 x.re y.re) 2) (*.f64 (*.f64 x.im y.im) (fma.f64 x.re y.re (*.f64 x.im y.im)))) (-.f64 (pow.f64 (*.f64 x.re y.re) 3) (pow.f64 (*.f64 x.im y.im) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x.re y.re (*.f64 x.im y.im)) (-.f64 (pow.f64 (*.f64 x.re y.re) 2) (pow.f64 (*.f64 x.im y.im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x.re y.re) 3) (pow.f64 (*.f64 x.im y.im) 3)) (+.f64 (pow.f64 (*.f64 x.re y.re) 2) (*.f64 (*.f64 x.im y.im) (fma.f64 x.re y.re (*.f64 x.im y.im)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x.re y.re) 2) (pow.f64 (*.f64 x.im y.im) 2)) (fma.f64 x.re y.re (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x.re y.re) 3) (pow.f64 (*.f64 x.im y.im) 3))) (neg.f64 (+.f64 (pow.f64 (*.f64 x.re y.re) 2) (*.f64 (*.f64 x.im y.im) (fma.f64 x.re y.re (*.f64 x.im y.im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x.re y.re) 2) (pow.f64 (*.f64 x.im y.im) 2))) (neg.f64 (fma.f64 x.re y.re (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x.re y.re) 3) (pow.f64 (*.f64 y.im (neg.f64 x.im)) 3)) (+.f64 (pow.f64 (*.f64 x.re y.re) 2) (-.f64 (*.f64 (*.f64 y.im (neg.f64 x.im)) (*.f64 y.im (neg.f64 x.im))) (*.f64 (*.f64 x.re y.re) (*.f64 y.im (neg.f64 x.im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 3) (pow.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) 3)) (+.f64 (pow.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 2) (-.f64 (*.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))) (*.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x.re y.re) 2) (*.f64 (*.f64 y.im (neg.f64 x.im)) (*.f64 y.im (neg.f64 x.im)))) (-.f64 (*.f64 x.re y.re) (*.f64 y.im (neg.f64 x.im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 2) (*.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)))) (-.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x.re y.re (*.f64 y.im (neg.f64 x.im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y.re x.re (*.f64 y.im (neg.f64 x.im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x.re y.re) (*.f64 y.im (neg.f64 x.im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) 2) (cbrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x.re y.re)) 2) (cbrt.f64 (*.f64 x.re y.re)) (*.f64 y.im (neg.f64 x.im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) (sqrt.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x.re y.re)) (sqrt.f64 (*.f64 x.re y.re)) (*.f64 y.im (neg.f64 x.im)))))))"]],"rules":[["egg-rr",49]],"stop":[["node limit",1]],"time":40.16015625,"type":"rewrite"},{"count":[[97,54]],"egraph":[[11,586,420,0.008394458],[10,580,420,0.0071304160000000005],[9,522,420,0.005840124],[8,394,420,0.004497791],[7,297,420,0.003121874],[6,200,420,0.001973583],[5,114,420,0.001221541],[4,69,420,0.0007527080000000002],[3,49,420,0.0004907500000000001],[2,36,420,0.000323625],[1,18,420,0.000185666],[0,10,456,8.2875e-5]],"inputs":[["(*.f64 -1 (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 -1 (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 -1 (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 -1 (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 -1 (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(*.f64 -1 (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 y.im x.im))","(neg.f64 (*.f64 y.im x.im))","(*.f64 x.im (neg.f64 y.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 -1 (*.f64 y.im x.im))","(neg.f64 (*.f64 y.im x.im))","(*.f64 x.im (neg.f64 y.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 -1 (*.f64 y.im x.im))","(neg.f64 (*.f64 y.im x.im))","(*.f64 x.im (neg.f64 y.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 -1 (*.f64 y.im x.im))","(neg.f64 (*.f64 y.im x.im))","(*.f64 x.im (neg.f64 y.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 x.re y.re)","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 -1 (*.f64 y.im x.im))","(neg.f64 (*.f64 y.im x.im))","(*.f64 x.im (neg.f64 y.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(*.f64 -1 (*.f64 y.im x.im))","(neg.f64 (*.f64 y.im x.im))","(*.f64 x.im (neg.f64 y.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))","(+.f64 (*.f64 -1 (*.f64 y.im x.im)) (*.f64 x.re y.re))","(fma.f64 -1 (*.f64 y.im x.im) (*.f64 x.re y.re))","(-.f64 (*.f64 x.re y.re) (*.f64 y.im x.im))"]],"stop":[["saturated",1]],"time":28.880859375,"type":"simplify"},{"compiler":[[895,215]],"time":6.0791015625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (+.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))","next",0.22265625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","done",0.01171875],["(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im)))","fresh",0.37544643560039836]],"compiler":[[27,11],[11,7],[27,13],[27,11],[27,13]],"count":[[55,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[54,2],"picked":[1,1]}],"min-error":[0],"time":10.35302734375,"type":"prune"},{"compiler":[[68,11]],"locations":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))",0.01171875,false],["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))",52.41777620031171,true]],"time":9.06884765625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))","x.im","-inf",0.530029296875],["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))","x.im","inf",0.467041015625],["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))","x.im","0",0.364013671875],["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))","y.im","-inf",0.298095703125],["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))","y.im","inf",0.742919921875],["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))","y.im","0",0.446044921875]],"time":2.928955078125,"type":"series"},{"count":[[1,20]],"egraph":[[2,1538,7,0.013976542000000002],[1,122,7,0.002049708],[0,6,10,0.000148041]],"inputs":[["(fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y.im x.im) (*.f64 y.im x.im))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x.im (+.f64 y.im y.im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x.im (+.f64 y.im y.im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x.im (+.f64 y.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x.im (+.f64 y.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x.im (+.f64 y.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im (+.f64 y.im y.im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x.im (+.f64 y.im y.im))) 2) (cbrt.f64 (*.f64 x.im (+.f64 y.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x.im (+.f64 y.im y.im))) (sqrt.f64 (*.f64 x.im (+.f64 y.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y.im x.im) 3) (pow.f64 (*.f64 y.im x.im) 3)) (+.f64 (pow.f64 (*.f64 y.im x.im) 2) (-.f64 (pow.f64 (*.f64 y.im x.im) 2) (pow.f64 (*.f64 y.im x.im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y.im x.im) 2) (pow.f64 (*.f64 y.im x.im) 2)) (-.f64 (*.f64 y.im x.im) (*.f64 y.im x.im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x.im (+.f64 y.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x.im (+.f64 y.im y.im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x.im (+.f64 y.im y.im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x.im (+.f64 y.im y.im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x.im (+.f64 y.im y.im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x.im (+.f64 y.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x.im (+.f64 y.im y.im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x.im (+.f64 y.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x.im (+.f64 y.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x.im (+.f64 y.im y.im))))))))"]],"rules":[["egg-rr",20]],"stop":[["node limit",1]],"time":31.64111328125,"type":"rewrite"},{"count":[[44,25]],"egraph":[[7,195,24,0.002273708],[6,186,24,0.001791749],[5,160,24,0.0012975410000000001],[4,121,24,0.000850583],[3,111,24,0.000542499],[2,94,24,0.000404416],[1,35,24,0.000304416],[0,12,168,9.0041e-5]],"inputs":[["(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 x.im) x.im) y.im))","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im)","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))","(*.f64 (*.f64 0 x.im) y.im)","0","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 y.im) y.im) x.im))","(*.f64 (*.f64 0 x.im) y.im)","0"]],"stop":[["saturated",1]],"time":14.072021484375,"type":"simplify"},{"compiler":[[3029,526]],"time":13.06591796875,"type":"eval"},{"alts":[["(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (+.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))","done",0.22265625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","done",0.01171875],["(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im)))","next",0.37544643560039836]],"compiler":[[27,11],[11,7],[27,13],[27,13]],"count":[[107,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[104,0],"picked":[1,1]}],"min-error":[0],"time":22.16796875,"type":"prune"},{"compiler":[[75,19]],"locations":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))",0.01171875,false],["(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)",0.47884750976844204,true],["(cbrt.f64 (*.f64 x.im y.im))",8.33316032820594,true],["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))",51.91488561273529,true]],"time":12.7919921875,"type":"localize"},{"count":[[3,6]],"series":[["(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)","y.im","-inf",0.369140625],["(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)","y.im","inf",0.2998046875],["(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)","y.im","0",0.2470703125],["(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)","x.im","-inf",0.50390625],["(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)","x.im","inf",0.301025390625],["(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)","x.im","0",0.251953125],["(cbrt.f64 (*.f64 x.im y.im))","y.im","-inf",0.31396484375],["(cbrt.f64 (*.f64 x.im y.im))","y.im","inf",0.26220703125],["(cbrt.f64 (*.f64 x.im y.im))","y.im","0",0.219970703125],["(cbrt.f64 (*.f64 x.im y.im))","x.im","-inf",0.899169921875],["(cbrt.f64 (*.f64 x.im y.im))","x.im","inf",0.234130859375],["(cbrt.f64 (*.f64 x.im y.im))","x.im","0",0.25],["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))","y.im","-inf",0.44580078125],["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))","y.im","inf",0.427001953125],["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))","y.im","0",0.378173828125],["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))","x.im","-inf",0.85595703125],["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))","x.im","inf",0.468994140625],["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))","x.im","0",0.748779296875]],"time":7.68212890625,"type":"series"},{"count":[[3,78]],"egraph":[[2,2139,25,0.017940916],[1,185,25,0.003107916],[0,9,38,0.000237625]],"inputs":[["(fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im))","(cbrt.f64 (*.f64 x.im y.im))","(pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))) 2) (cbrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))) (sqrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x.im y.im) 3) (pow.f64 (*.f64 x.im y.im) 3)) (+.f64 (pow.f64 (*.f64 x.im y.im) 2) (-.f64 (pow.f64 (*.f64 x.im y.im) 2) (pow.f64 (*.f64 x.im y.im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x.im y.im) 2) (pow.f64 (*.f64 x.im y.im) 2)) (-.f64 (*.f64 x.im y.im) (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (*.f64 x.im y.im) (*.f64 x.im y.im))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 x.im y.im))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x.im y.im)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2) (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2) (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x.im) (cbrt.f64 y.im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x.im) (neg.f64 (cbrt.f64 y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y.im) (cbrt.f64 x.im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x.im y.im) 1/6) (pow.f64 (*.f64 x.im y.im) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x.im y.im) 1/6) (neg.f64 (pow.f64 (*.f64 x.im y.im) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 x.im y.im)) 1/3) (pow.f64 (sqrt.f64 (*.f64 x.im y.im)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 x.im)) (cbrt.f64 y.im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 x.im y.im) 1/6)) (pow.f64 (*.f64 x.im y.im) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (cbrt.f64 x.im)) (cbrt.f64 y.im))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (*.f64 x.im y.im) 1/6)) (pow.f64 (*.f64 x.im y.im) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 x.im y.im)) (+.f64 0 (+.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2)) (*.f64 0 (cbrt.f64 (*.f64 x.im y.im))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2))) (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x.im y.im) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x.im y.im) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 x.im y.im))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x.im y.im)) (cbrt.f64 (*.f64 x.im y.im)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x.im) (*.f64 (cbrt.f64 y.im) (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x.im) 2) (pow.f64 (cbrt.f64 y.im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 x.im y.im) 1/6) (*.f64 (pow.f64 (*.f64 x.im y.im) 1/6) (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x.im y.im)) (pow.f64 (*.f64 x.im y.im) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x.im y.im)) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 x.im y.im))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 x.im y.im)) (cbrt.f64 x.im)) (cbrt.f64 y.im))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (pow.f64 (*.f64 x.im y.im) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (*.f64 x.im y.im)))))))))"]],"rules":[["egg-rr",21],["egg-rr",38],["egg-rr",19]],"stop":[["node limit",1]],"time":40.570068359375,"type":"rewrite"},{"count":[[84,79]],"egraph":[[1,5,24,5.0875e-5],[0,4,24,2.825e-5]],"inputs":[["(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)","(*.f64 y.im x.im)"]],"stop":[["saturated",1]],"time":11.06689453125,"type":"simplify"},{"compiler":[[4846,1234]],"time":29.12109375,"type":"eval"},{"alts":[["(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (+.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))","done",0.22265625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))","done",0.01171875],["(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im)))","done",0.37544643560039836]],"compiler":[[27,11],[11,7],[27,13]],"count":[[174,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[171,0],"picked":[1,1]}],"min-error":[0],"time":45.968017578125,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x.re",0.01171875,1],["x.im",0.01171875,1],["y.re",0.01171875,1],["y.im",0.01171875,1],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))",0.01171875,1],["(*.f64 x.re y.re)",0.01171875,1],["(*.f64 x.im y.im)",0.01171875,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[11,7],[7,5],[7,5],[57,17]],"count":[[3,1]],"inputs":[["(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (+.f64 (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im)) (fma.f64 (neg.f64 y.im) x.im (*.f64 x.im y.im))))","(+.f64 (-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 x.im y.im))) (pow.f64 (cbrt.f64 (*.f64 x.im y.im)) 2) (*.f64 x.im y.im)))","(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))"]],"link":["."],"name":["_multiplyComplex, real part"],"oracle":[0.4613839356003985],"outputs":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))"]],"time":22.61181640625,"times":[["x.re",3.10400390625],["x.im",3.047119140625],["y.re",3.096923828125],["y.im",3.18603515625],["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))",3.136962890625],["(*.f64 x.re y.re)",2.98291015625],["(*.f64 x.im y.im)",2.908203125]],"type":"regimes"},{"compiler":[[11,7]],"egraph":[[5,38,10,0.00022816699999999999],[4,37,10,0.00018475],[3,33,10,0.000140042],[2,27,10,9.6709e-5],[1,15,10,5.6291999999999996e-5],[0,8,10,2.025e-5]],"inputs":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 x.re y.re) (*.f64 x.im y.im))"]],"stop":[["done",1],["saturated",1]],"time":8.5,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[11,7],[11,7],[11,7],[11,7],[11,7]],"remove-preprocessing":[["(sort x.im y.im)","(sort x.re y.re)"]],"time":9.8369140625,"type":"end"}]
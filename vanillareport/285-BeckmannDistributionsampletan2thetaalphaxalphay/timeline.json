[{"compiler":[[26,19]],"method":["search"],"sampling":[[12,2.468881607040378e-5,7.964134216259282e-7,0.9999745147705079],[11,2.468881607040378e-5,7.964134216259282e-7,0.9999745147705079],[10,2.3892402648777853e-5,1.5928268432518567e-6,0.999974514770508],[9,2.3892402648777853e-5,1.5928268432518567e-6,0.999974514770508],[8,2.2299575805525996e-5,3.1856536865037133e-6,0.9999745147705079],[7,2.2299575805525996e-5,3.1856536865037133e-6,0.9999745147705079],[6,1.911392211902228e-5,6.371307373007427e-6,0.9999745147705079],[5,1.911392211902228e-5,6.371307373007427e-6,0.9999745147705079],[4,1.2742614746014855e-5,1.2742614746014855e-5,0.9999745147705079],[3,1.2742614746014855e-5,1.2742614746014855e-5,0.9999745147705079],[2,0.0,2.548522949202971e-5,0.9999745147705079],[1,0.0,2.548522949202971e-5,0.9999745147705079],[0,0.0,2.548522949202971e-5,0.9999745147705079]],"time":12.22314453125,"type":"analyze"},{"outcomes":[["body",256,"valid",500.06591796875,8256]],"time":507.283935546875,"type":"sample"},{"compiler":[[11,8]],"egraph":[[0,2,2,1.75e-6],[29,6460,26,0.198004582],[28,6314,26,0.183453624],[27,6314,26,0.169638791],[26,6290,26,0.15734124900000002],[25,6266,26,0.14471045700000001],[24,6244,26,0.132473624],[23,6092,26,0.120195499],[22,5824,26,0.107277833],[21,5824,26,0.092637208],[20,5768,26,0.084558958],[19,5645,26,0.077114208],[18,5325,26,0.069949208],[17,4727,26,0.06200441599999999],[16,3928,26,0.05383091599999999],[15,3528,26,0.045004040999999995],[14,3462,26,0.03824608299999999],[13,3378,26,0.032814082999999994],[12,3070,26,0.027499457999999997],[11,2743,26,0.022064499999999997],[10,2423,26,0.016887041999999998],[9,1904,26,0.013296582999999999],[8,1127,26,0.008888417],[7,576,26,0.005492459],[6,393,26,0.003815959],[5,298,26,0.002504875],[4,226,26,0.001699125],[3,162,26,0.00109725],[2,78,26,0.0005225],[1,35,26,0.000213167],[0,14,28,7.4209e-5]],"inputs":[["0","1"],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","(*.f64 (*.f64 (neg.f64 u0) u0) (log.f64 (-.f64 1 alpha)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","(*.f64 (neg.f64 alpha) (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha (neg.f64 alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 (*.f64 (neg.f64 u0) u0) (log.f64 (-.f64 1 alpha)))","(*.f64 (neg.f64 u0) (*.f64 u0 (log.f64 (-.f64 1 alpha))))","(*.f64 u0 (*.f64 (neg.f64 u0) (log1p.f64 (neg.f64 alpha))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":223.81103515625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[15,1750,13,0.025002291],[14,1749,13,0.021813125],[13,1722,13,0.018593833],[12,1569,13,0.01513525],[11,1399,13,0.011815583],[10,1231,13,0.009101583],[9,968,13,0.007200000000000001],[8,590,13,0.0048958330000000005],[7,314,13,0.0031342910000000004],[6,214,13,0.0021923740000000004],[5,163,13,0.0014732080000000002],[4,122,13,0.000993125],[3,88,13,0.0006492080000000001],[2,45,13,0.000321208],[1,22,13,0.000137417],[0,9,14,5.4167e-5]],"inputs":[["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","(*.f64 (neg.f64 alpha) (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 (neg.f64 alpha) (*.f64 alpha (log1p.f64 (neg.f64 u0))))","(*.f64 (*.f64 alpha (neg.f64 alpha)) (log1p.f64 (neg.f64 u0)))","(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))"]],"stop":[["saturated",1]],"time":35.828857421875,"type":"simplify"},{"compiler":[[19,12]],"time":0.34912109375,"type":"eval"},{"alts":[["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","next",0.371757519536884]],"compiler":[[11,8],[10,7],[11,8],[10,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.348320019536884],"time":1.218994140625,"type":"prune"},{"compiler":[[25,7]],"locations":[["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))",0.28125,true],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))",0.296875,true]],"time":6.74609375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","u0","-inf",0.325927734375],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","u0","inf",1.578857421875],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","u0","0",0.321044921875],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","alpha","-inf",0.159912109375],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","alpha","inf",0.35107421875],["(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))","alpha","0",7.60595703125],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","u0","-inf",0.37890625],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","u0","inf",0.47900390625],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","u0","0",0.472900390625],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","alpha","-inf",0.205078125],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","alpha","inf",0.451904296875],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","alpha","0",15.330810546875]],"time":27.85595703125,"type":"series"},{"count":[[2,25]],"egraph":[[2,2139,15,0.016450749],[1,164,15,0.002795541],[0,8,23,0.000187208]],"inputs":[["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","(*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 alpha (*.f64 alpha (log1p.f64 u0)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (sqrt.f64 (log1p.f64 u0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (+.f64 u0 1) alpha) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 alpha (*.f64 alpha (log1p.f64 u0)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 alpha (log1p.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 alpha (log1p.f64 u0))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (log1p.f64 u0)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 alpha (log1p.f64 u0)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 alpha (log1p.f64 u0))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 alpha (log1p.f64 u0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 alpha (log1p.f64 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 alpha (log1p.f64 u0)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (+.f64 u0 1) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 alpha (log1p.f64 u0)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 alpha (log1p.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 alpha (log1p.f64 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 alpha (log1p.f64 u0))))))))"]],"rules":[["egg-rr",13],["egg-rr",12]],"stop":[["node limit",1]],"time":35.4169921875,"type":"rewrite"},{"count":[[73,76]],"egraph":[[4,7598,770,0.030286499],[3,2476,772,0.016811291],[2,706,788,0.005355958],[1,238,845,0.0015822079999999999],[0,83,923,0.00039975]],"inputs":[["(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(*.f64 u0 (pow.f64 alpha 2))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 u0 alpha)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 u0 alpha))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 u0 alpha)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0)))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))))","(*.f64 alpha (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0)))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 -1 (*.f64 (pow.f64 alpha 2) (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 (*.f64 alpha alpha) (log.f64 (-.f64 1 u0))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha)))","(*.f64 u0 (pow.f64 alpha 2))","(*.f64 (*.f64 alpha alpha) u0)","(*.f64 alpha (*.f64 alpha u0))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(fma.f64 u0 (*.f64 alpha alpha) (*.f64 1/2 (*.f64 (*.f64 alpha alpha) (*.f64 u0 u0))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/2 (*.f64 u0 u0))))","(*.f64 alpha (*.f64 alpha (fma.f64 1/2 (*.f64 u0 u0) u0)))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (*.f64 1/2 (*.f64 (*.f64 alpha alpha) (*.f64 u0 u0)))))","(fma.f64 (*.f64 alpha alpha) u0 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 (*.f64 u0 1/3) 1/2))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(fma.f64 1/4 (*.f64 (*.f64 alpha alpha) (pow.f64 u0 4)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (*.f64 1/2 (*.f64 (*.f64 alpha alpha) (*.f64 u0 u0))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 (*.f64 alpha alpha) (+.f64 (fma.f64 1/4 (pow.f64 u0 4) u0) (*.f64 (*.f64 u0 u0) (+.f64 (*.f64 u0 1/3) 1/2))))","(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))","(neg.f64 (*.f64 (*.f64 alpha alpha) (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1))))","(*.f64 (*.f64 alpha alpha) (neg.f64 (+.f64 (log.f64 -1) (log.f64 u0))))","(*.f64 alpha (*.f64 alpha (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0))))","(*.f64 (*.f64 alpha alpha) (-.f64 (neg.f64 (log.f64 u0)) (log.f64 -1)))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))","(+.f64 (neg.f64 (*.f64 (*.f64 alpha alpha) (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)))) (/.f64 (*.f64 alpha alpha) u0))","(-.f64 (/.f64 alpha (/.f64 u0 alpha)) (*.f64 alpha (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0)))))","(fma.f64 (*.f64 alpha alpha) (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (/.f64 (*.f64 alpha alpha) u0))","(*.f64 alpha (-.f64 (/.f64 alpha u0) (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0)))))","(+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2)))))","(+.f64 (/.f64 (*.f64 alpha alpha) u0) (fma.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) (neg.f64 (*.f64 (*.f64 alpha alpha) (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1))))))","(-.f64 (fma.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) (/.f64 alpha (/.f64 u0 alpha))) (*.f64 alpha (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0)))))","(fma.f64 (*.f64 alpha alpha) (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (*.f64 (+.f64 (/.f64 1/2 u0) 1) (/.f64 (*.f64 alpha alpha) u0)))","(fma.f64 (/.f64 alpha u0) alpha (*.f64 (*.f64 alpha alpha) (-.f64 (/.f64 1/2 (*.f64 u0 u0)) (+.f64 (log.f64 -1) (log.f64 u0)))))","(+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))) (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) (pow.f64 alpha 2))))))","(fma.f64 1/3 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (+.f64 (/.f64 (*.f64 alpha alpha) u0) (fma.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) (neg.f64 (*.f64 (*.f64 alpha alpha) (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1)))))))","(fma.f64 1/3 (/.f64 alpha (/.f64 (pow.f64 u0 3) alpha)) (-.f64 (fma.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) (/.f64 alpha (/.f64 u0 alpha))) (*.f64 alpha (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0))))))","(+.f64 (fma.f64 (*.f64 alpha alpha) (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (/.f64 (*.f64 alpha alpha) u0)) (*.f64 (/.f64 alpha (*.f64 u0 (/.f64 u0 alpha))) (+.f64 1/2 (/.f64 1/3 u0))))","(-.f64 (*.f64 (/.f64 alpha (/.f64 u0 alpha)) (+.f64 1 (/.f64 1/2 u0))) (*.f64 (*.f64 alpha alpha) (-.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (/.f64 1/3 (pow.f64 u0 3)))))","(fma.f64 (+.f64 1 (/.f64 1/2 u0)) (/.f64 alpha (/.f64 u0 alpha)) (*.f64 (*.f64 alpha alpha) (-.f64 (/.f64 1/3 (pow.f64 u0 3)) (+.f64 (log.f64 -1) (log.f64 u0)))))","(*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0)))","(*.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)))","(*.f64 alpha (*.f64 alpha (log.f64 (/.f64 -1 u0))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (/.f64 (pow.f64 alpha 2) u0))","(fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (/.f64 (*.f64 alpha alpha) u0))","(fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (/.f64 alpha (/.f64 u0 alpha)))","(*.f64 alpha (fma.f64 alpha (log.f64 (/.f64 -1 u0)) (/.f64 alpha u0)))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2)))))","(+.f64 (fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (/.f64 (*.f64 alpha alpha) u0)) (*.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0))))","(fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (fma.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) (/.f64 alpha (/.f64 u0 alpha))))","(fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (*.f64 (+.f64 (/.f64 1/2 u0) 1) (/.f64 (*.f64 alpha alpha) u0)))","(fma.f64 alpha (*.f64 alpha (log.f64 (/.f64 -1 u0))) (*.f64 (/.f64 alpha (/.f64 u0 alpha)) (+.f64 1 (/.f64 1/2 u0))))","(+.f64 (*.f64 (pow.f64 alpha 2) (log.f64 (/.f64 -1 u0))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 3))) (+.f64 (/.f64 (pow.f64 alpha 2) u0) (*.f64 1/2 (/.f64 (pow.f64 alpha 2) (pow.f64 u0 2))))))","(fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (fma.f64 1/3 (/.f64 (*.f64 alpha alpha) (pow.f64 u0 3)) (+.f64 (/.f64 (*.f64 alpha alpha) u0) (*.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0))))))","(fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (fma.f64 1/3 (/.f64 alpha (/.f64 (pow.f64 u0 3) alpha)) (fma.f64 1/2 (/.f64 (*.f64 alpha alpha) (*.f64 u0 u0)) (/.f64 alpha (/.f64 u0 alpha)))))","(+.f64 (fma.f64 (*.f64 alpha alpha) (log.f64 (/.f64 -1 u0)) (/.f64 (*.f64 alpha alpha) u0)) (*.f64 (/.f64 alpha (*.f64 u0 (/.f64 u0 alpha))) (+.f64 1/2 (/.f64 1/3 u0))))","(fma.f64 alpha (*.f64 alpha (log.f64 (/.f64 -1 u0))) (*.f64 (/.f64 alpha (/.f64 u0 alpha)) (+.f64 (/.f64 1/2 u0) (+.f64 1 (/.f64 1/3 (*.f64 u0 u0))))))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 -1 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(neg.f64 (*.f64 alpha (log.f64 (-.f64 1 u0))))","(*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0))))","(*.f64 (log1p.f64 (neg.f64 u0)) (neg.f64 alpha))","(*.f64 u0 alpha)","(*.f64 alpha u0)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 u0 alpha))","(fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 alpha u0))","(*.f64 alpha (+.f64 u0 (*.f64 1/2 (*.f64 u0 u0))))","(*.f64 alpha (fma.f64 1/2 (*.f64 u0 u0) u0))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 u0 alpha)))","(fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha u0)))","(fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 alpha (+.f64 u0 (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 (*.f64 u0 1/3) 1/2))))","(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/4 (*.f64 alpha (pow.f64 u0 4)) (*.f64 alpha u0))))","(fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 u0 (*.f64 1/4 (pow.f64 u0 4))))))","(*.f64 alpha (+.f64 (fma.f64 1/4 (pow.f64 u0 4) u0) (*.f64 (*.f64 u0 u0) (+.f64 (*.f64 u0 1/3) 1/2))))","(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))","(*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha))","(neg.f64 (*.f64 alpha (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1))))","(*.f64 alpha (neg.f64 (+.f64 (log.f64 -1) (log.f64 u0))))","(*.f64 alpha (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)))","(*.f64 alpha (-.f64 (neg.f64 (log.f64 u0)) (log.f64 -1)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))","(fma.f64 -1 (*.f64 alpha (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1))) (/.f64 alpha u0))","(-.f64 (/.f64 alpha u0) (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0))))","(fma.f64 alpha (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (/.f64 alpha u0))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0)))","(fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (fma.f64 -1 (*.f64 alpha (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1))) (/.f64 alpha u0)))","(fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (-.f64 (/.f64 alpha u0) (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0)))))","(fma.f64 alpha (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (*.f64 (+.f64 (/.f64 1/2 u0) 1) (/.f64 alpha u0)))","(-.f64 (/.f64 alpha u0) (*.f64 alpha (-.f64 (+.f64 (log.f64 -1) (log.f64 u0)) (/.f64 1/2 (*.f64 u0 u0)))))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 -1 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 u0))) (log.f64 -1)) alpha)) (/.f64 alpha u0))))","(fma.f64 1/3 (/.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (fma.f64 -1 (*.f64 alpha (fma.f64 -1 (neg.f64 (log.f64 u0)) (log.f64 -1))) (/.f64 alpha u0))))","(fma.f64 1/3 (/.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (-.f64 (/.f64 alpha u0) (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0))))))","(+.f64 (fma.f64 alpha (-.f64 (neg.f64 (log.f64 -1)) (log.f64 u0)) (/.f64 alpha u0)) (*.f64 (/.f64 alpha (*.f64 u0 u0)) (+.f64 1/2 (/.f64 1/3 u0))))","(-.f64 (/.f64 alpha u0) (-.f64 (*.f64 alpha (+.f64 (log.f64 -1) (log.f64 u0))) (*.f64 (/.f64 alpha (*.f64 u0 u0)) (+.f64 1/2 (/.f64 1/3 u0)))))","(*.f64 alpha (log.f64 (/.f64 -1 u0)))","(+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))","(fma.f64 alpha (log.f64 (/.f64 -1 u0)) (/.f64 alpha u0))","(+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0)))","(fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (fma.f64 alpha (log.f64 (/.f64 -1 u0)) (/.f64 alpha u0)))","(fma.f64 alpha (log.f64 (/.f64 -1 u0)) (*.f64 (+.f64 (/.f64 1/2 u0) 1) (/.f64 alpha u0)))","(fma.f64 alpha (log.f64 (/.f64 -1 u0)) (*.f64 (/.f64 alpha u0) (+.f64 1 (/.f64 1/2 u0))))","(+.f64 (*.f64 1/3 (/.f64 alpha (pow.f64 u0 3))) (+.f64 (*.f64 1/2 (/.f64 alpha (pow.f64 u0 2))) (+.f64 (*.f64 alpha (log.f64 (/.f64 -1 u0))) (/.f64 alpha u0))))","(fma.f64 1/3 (/.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (/.f64 alpha (*.f64 u0 u0)) (fma.f64 alpha (log.f64 (/.f64 -1 u0)) (/.f64 alpha u0))))","(+.f64 (fma.f64 alpha (log.f64 (/.f64 -1 u0)) (/.f64 alpha u0)) (*.f64 (/.f64 alpha (*.f64 u0 u0)) (+.f64 1/2 (/.f64 1/3 u0))))"]],"stop":[["node limit",1]],"time":51.06298828125,"type":"simplify"},{"compiler":[[1098,645]],"time":12.3779296875,"type":"eval"},{"alts":[["(*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha)))))","fresh",10.07436841987728],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","fresh",10.0142443119325],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","next",10.006921763758164],["(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))))","fresh",13.276803027750834],["(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","fresh",19.87615377651569],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","done",0.371757519536884]],"compiler":[[31,22],[11,8],[21,14],[37,29],[17,11],[17,13],[10,7],[31,22],[11,8],[21,14],[37,29],[17,11],[17,13]],"count":[[78,7]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[76,5],"picked":[1,1]}],"min-error":[0.14291000976844204],"time":11.666015625,"type":"prune"},{"compiler":[[154,116]],"locations":[["(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))",0.31869125976844204,true],["(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))",0.36556625976844204,true],["(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))",0.375,true],["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))",0.40234375,true]],"time":34.576904296875,"type":"localize"},{"count":[[4,0]],"series":[["(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))","alpha","-inf",0.18017578125],["(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))","alpha","inf",0.30712890625],["(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))","alpha","0",0.3359375],["(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))","u0","-inf",0.172119140625],["(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))","u0","inf",0.287109375],["(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))","u0","0",0.304931640625],["(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))","alpha","-inf",0.14697265625],["(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))","alpha","inf",0.176025390625],["(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))","alpha","0",0.14404296875],["(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))","u0","-inf",0.26806640625],["(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))","u0","inf",0.14697265625],["(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))","u0","0",0.14794921875],["(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))","alpha","-inf",0.180908203125],["(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))","alpha","inf",0.30908203125],["(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))","alpha","0",0.43896484375],["(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))","u0","-inf",0.203857421875],["(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))","u0","inf",0.283935546875],["(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))","u0","0",0.362060546875],["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))","alpha","-inf",0.204833984375],["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))","alpha","inf",0.421142578125],["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))","alpha","0",0.656005859375],["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))","u0","-inf",0.30908203125],["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))","u0","inf",0.463134765625],["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))","u0","0",0.72802734375]],"time":7.4091796875,"type":"series"},{"count":[[4,91]],"egraph":[[2,3351,40,0.026694958],[1,319,40,0.004986042],[0,15,40,0.000465542]],"inputs":[["(*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2)))","(*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))","(*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))","(*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0))) 2)) (log.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0)))) (log.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 u0 6)) 1/9) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 alpha (pow.f64 u0 3/2)) (sqrt.f64 1/3)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 u0 (pow.f64 (cbrt.f64 alpha) 2)) (cbrt.f64 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 alpha (pow.f64 u0 3/2)) (sqrt.f64 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 u0 6)) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 alpha (pow.f64 u0 3/2)) (sqrt.f64 1/3)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (*.f64 alpha (pow.f64 u0 3/2)) (sqrt.f64 1/3)) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 u0 (pow.f64 (cbrt.f64 alpha) 2)) (cbrt.f64 1/3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (*.f64 alpha (pow.f64 u0 3/2)) (sqrt.f64 1/3))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 alpha (*.f64 alpha (pow.f64 u0 4))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 alpha (pow.f64 u0 4)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 alpha (pow.f64 u0 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 alpha (pow.f64 u0 4))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 alpha (pow.f64 u0 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 alpha (*.f64 alpha (pow.f64 u0 4))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (*.f64 alpha (pow.f64 u0 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 u0 8) (pow.f64 alpha 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 alpha (*.f64 u0 u0)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 alpha (*.f64 u0 u0))) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (*.f64 u0 u0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 (*.f64 u0 alpha)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 u0 alpha) u0) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 u0 6) (pow.f64 (*.f64 u0 alpha) 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 u0) 2) (pow.f64 (cbrt.f64 (*.f64 u0 alpha)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 u0 alpha) 6) (pow.f64 u0 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 u0 alpha)) 2) (pow.f64 (cbrt.f64 u0) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 u0 8) (pow.f64 alpha 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 alpha) (*.f64 alpha (pow.f64 u0 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 alpha (*.f64 alpha (pow.f64 u0 4))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 alpha (*.f64 u0 u0)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 alpha (*.f64 alpha (pow.f64 u0 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 alpha (*.f64 alpha (pow.f64 u0 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (*.f64 alpha (*.f64 u0 u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 alpha (*.f64 u0 u0)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 alpha (*.f64 u0 u0)) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 (*.f64 alpha (*.f64 u0 u0))) 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 alpha (*.f64 u0 u0))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0)) 2)) (*.f64 1/3 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 u0 6)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 alpha 6) (pow.f64 u0 9)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 (pow.f64 (cbrt.f64 alpha) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (pow.f64 u0 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 u0 3) (pow.f64 (*.f64 u0 alpha) 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 u0) (pow.f64 (cbrt.f64 (*.f64 u0 alpha)) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 u0) (*.f64 u0 alpha)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 u0 alpha)) 2) (cbrt.f64 u0)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 u0 alpha) (sqrt.f64 u0)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 alpha 4) (pow.f64 u0 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)) u0))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 alpha 6) (pow.f64 u0 9)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 u0 (pow.f64 (*.f64 u0 alpha) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (*.f64 alpha (pow.f64 u0 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (*.f64 alpha (pow.f64 u0 3/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 alpha 6) (pow.f64 u0 9))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 u0 (pow.f64 (cbrt.f64 alpha) 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 alpha (pow.f64 u0 3/2))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (*.f64 u0 alpha) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (*.f64 u0 alpha) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 u0 alpha) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 u0 alpha) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 u0 alpha) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 u0 alpha)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 alpha) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 u0 alpha) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (*.f64 u0 alpha) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (*.f64 u0 alpha) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 u0 alpha) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (*.f64 u0 alpha) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (*.f64 u0 alpha) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 (*.f64 u0 alpha) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 u0 alpha) 2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 u0 alpha)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 u0 alpha) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (cbrt.f64 (*.f64 u0 alpha)) 2)) 3))))))"]],"rules":[["egg-rr",20],["egg-rr",25],["egg-rr",26],["egg-rr",20]],"stop":[["node limit",1]],"time":51.10888671875,"type":"rewrite"},{"count":[[91,91]],"egraph":[[0,0,0,2.0667e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.748046875,"type":"simplify"},{"compiler":[[3470,2580]],"time":42.430908203125,"type":"eval"},{"alts":[["(*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha)))))","fresh",10.07436841987728],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","next",10.0142443119325],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","done",10.006921763758164],["(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))))","fresh",13.276803027750834],["(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","fresh",19.87615377651569],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","done",0.371757519536884]],"compiler":[[31,22],[11,8],[21,14],[37,29],[17,11],[17,13],[10,7],[31,22],[11,8],[21,14],[17,11],[17,13]],"count":[[98,7]],"kept":[{"done":[1,1],"fresh":[5,5],"new":[91,0],"picked":[1,1]}],"min-error":[0.14291000976844204],"time":18.623046875,"type":"prune"},{"compiler":[[98,62]],"locations":[["(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))",0.28515625,true],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))",0.296875,true],["(+.f64 1/3 (*.f64 u0 1/4))",0.33984375,true],["(*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))",0.38900375976844204,true]],"time":19.965087890625,"type":"localize"},{"count":[[4,72]],"series":[["(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))","u0","-inf",0.205078125],["(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))","u0","inf",0.251953125],["(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))","u0","0",0.18798828125],["(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))","alpha","-inf",0.35302734375],["(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))","alpha","inf",0.2900390625],["(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))","alpha","0",0.376220703125],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","u0","-inf",0.258056640625],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","u0","inf",0.322021484375],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","u0","0",0.205810546875],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","alpha","-inf",0.220947265625],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","alpha","inf",0.398193359375],["(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","alpha","0",0.701904296875],["(+.f64 1/3 (*.f64 u0 1/4))","u0","-inf",0.176025390625],["(+.f64 1/3 (*.f64 u0 1/4))","u0","inf",0.237060546875],["(+.f64 1/3 (*.f64 u0 1/4))","u0","0",0.199951171875],["(*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))","u0","-inf",0.340087890625],["(*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))","u0","inf",0.3759765625],["(*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))","u0","0",2.3330078125]],"time":7.712890625,"type":"series"},{"count":[[4,183]],"egraph":[[2,5218,61,0.035485125],[1,351,61,0.0068606660000000005],[0,15,79,0.000482541]],"inputs":[["(*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))","(+.f64 1/3 (*.f64 u0 1/4))","(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)))))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u0 (*.f64 u0 1/2)) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 (*.f64 u0 1/2)) 1) (*.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 u0 (*.f64 u0 1/2)) 3) (pow.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)) 3)) (fma.f64 (*.f64 u0 (*.f64 u0 1/2)) (*.f64 u0 (*.f64 u0 1/2)) (-.f64 (*.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))) (*.f64 (*.f64 u0 (*.f64 u0 1/2)) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 u0 (*.f64 u0 1/2)) (*.f64 u0 (*.f64 u0 1/2))) (*.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))) (-.f64 (*.f64 u0 (*.f64 u0 1/2)) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1/8 (pow.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) 3)) (*.f64 u0 u0)) (fma.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) -1/2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/4 (pow.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) 2)) (*.f64 u0 u0)) (-.f64 1/2 (*.f64 u0 (fma.f64 u0 1/4 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 u0 u0) (+.f64 1/8 (pow.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) 3))) (fma.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) -1/2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 u0 u0) (-.f64 1/4 (pow.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) 2))) (-.f64 1/2 (*.f64 u0 (fma.f64 u0 1/4 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 u0) u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))) (exp.f64 (*.f64 u0 (*.f64 u0 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u0 (*.f64 u0 1/2) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u0 (*.f64 (fma.f64 u0 1/4 1/3) (*.f64 u0 u0)) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 u0) 1/2 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 u0) (*.f64 u0 (fma.f64 u0 1/4 1/3)) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (*.f64 u0 u0) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) (*.f64 u0 u0) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 u0 (*.f64 u0 1/2)) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) 2)) (*.f64 (cbrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 u0 u0)) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 u0 4)) (*.f64 (pow.f64 (cbrt.f64 u0) 2) (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 u0 4)) (*.f64 (pow.f64 (cbrt.f64 u0) 2) 1/2) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 u0 u0)) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (*.f64 u0 1/2)) 1 (*.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))) (cbrt.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))) (cbrt.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 u0 (*.f64 u0 1/2))) (cbrt.f64 (*.f64 u0 (*.f64 u0 1/2)))) (cbrt.f64 (*.f64 u0 (*.f64 u0 1/2))) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))) (sqrt.f64 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3))) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 u0 (*.f64 u0 1/2))) (sqrt.f64 (*.f64 u0 (*.f64 u0 1/2))) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)))) (*.f64 u0 (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)))) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3))) u0) (*.f64 (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3))) u0) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 u0) u0 (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) u0) u0 (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 u0) (fma.f64 u0 1/4 1/3)) u0 (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 u0) (cbrt.f64 (pow.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) 2))) (cbrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 u0) (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)))) (sqrt.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 u0 (*.f64 u0 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/2 (cbrt.f64 (pow.f64 u0 4))) (pow.f64 (cbrt.f64 u0) 2) (*.f64 (fma.f64 u0 1/4 1/3) (pow.f64 u0 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) (cbrt.f64 (pow.f64 u0 4))) (pow.f64 (cbrt.f64 u0) 2) (*.f64 u0 (*.f64 u0 1/2)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 u0 1/4 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 1/9 (+.f64 1/3 (*.f64 -1/4 u0))) (/.f64 (pow.f64 (*.f64 u0 1/4) 2) (+.f64 1/3 (*.f64 -1/4 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 u0 1/4 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 u0 1/4 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 u0 1/4 1/3)) (cbrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 2)) (cbrt.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 u0 1/4 1/3)) (sqrt.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/64 (pow.f64 u0 3) 1/27) (/.f64 1 (fma.f64 (*.f64 u0 1/4) (fma.f64 u0 1/4 -1/3) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 1/9 (pow.f64 (*.f64 u0 1/4) 2)) (/.f64 1 (+.f64 1/3 (*.f64 -1/4 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 u0 1/4) (fma.f64 u0 1/4 -1/3) 1/9) (fma.f64 1/64 (pow.f64 u0 3) 1/27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 1/3 (*.f64 -1/4 u0)) (-.f64 1/9 (pow.f64 (*.f64 u0 1/4) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/64 (pow.f64 u0 3) 1/27) (fma.f64 (*.f64 u0 1/4) (fma.f64 u0 1/4 -1/3) 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/64 (pow.f64 u0 3) 1/27) (fma.f64 (*.f64 u0 u0) 1/16 (-.f64 1/9 (*.f64 1/12 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 1/9 (pow.f64 (*.f64 u0 1/4) 2)) (+.f64 1/3 (*.f64 -1/4 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 1/64 (pow.f64 u0 3) 1/27)) (neg.f64 (fma.f64 (*.f64 u0 1/4) (fma.f64 u0 1/4 -1/3) 1/9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 1/9 (pow.f64 (*.f64 u0 1/4) 2))) (neg.f64 (+.f64 1/3 (*.f64 -1/4 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 u0 u0) 1/16 -1/9) (fma.f64 u0 1/4 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 u0 1/4 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 u0 1/4 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 u0 1/4 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 u0 1/4 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 u0 1/4 1/3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u0 1/4 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/4 u0 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 1/4) 1 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 u0 1/4) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 u0) 2) (*.f64 (cbrt.f64 u0) 1/4) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 u0 1/4)) (pow.f64 (cbrt.f64 (*.f64 u0 1/4)) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 u0 1/4)) 2) (cbrt.f64 (*.f64 u0 1/4)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 u0) (*.f64 (sqrt.f64 u0) 1/4) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 u0 1/4)) (sqrt.f64 (*.f64 u0 1/4)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/4 (pow.f64 (cbrt.f64 u0) 2)) (cbrt.f64 u0) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 1/4 (sqrt.f64 u0)) (sqrt.f64 u0) 1/3)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 alpha) alpha) (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u0 (*.f64 alpha alpha)) (*.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 alpha alpha)) (*.f64 u0 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 alpha (*.f64 u0 alpha)) (*.f64 alpha (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 alpha alpha) u0) (*.f64 (*.f64 alpha alpha) (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 alpha alpha) (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (*.f64 (*.f64 alpha alpha) u0))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (pow.f64 u0 3) (pow.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 3))) (fma.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (neg.f64 u0)) (*.f64 u0 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 alpha alpha) (-.f64 (*.f64 u0 u0) (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2)))) (-.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (sqrt.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 alpha 3) (pow.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)) 3) (pow.f64 alpha 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u0 (*.f64 alpha alpha) (*.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 alpha alpha) (*.f64 u0 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 alpha (*.f64 u0 alpha) (*.f64 alpha (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha alpha) u0 (*.f64 (*.f64 alpha alpha) (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha alpha) (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 (*.f64 alpha alpha) u0))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u0 alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 alpha) 1) (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 u0 alpha) 3) (pow.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) 3)) (fma.f64 (*.f64 u0 alpha) (*.f64 u0 alpha) (-.f64 (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) (*.f64 (*.f64 u0 alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 u0 alpha) (*.f64 u0 alpha)) (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))) (-.f64 (*.f64 u0 alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 u0 3) (pow.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 3)) alpha) (fma.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (neg.f64 u0)) (*.f64 u0 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 u0 u0) (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2))) alpha) (-.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 alpha (+.f64 (pow.f64 u0 3) (pow.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 3))) (fma.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (neg.f64 u0)) (*.f64 u0 u0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 alpha (-.f64 (*.f64 u0 u0) (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2)))) (-.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) (exp.f64 (*.f64 u0 alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 alpha 3) (pow.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) 3) (pow.f64 alpha 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 alpha (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u0 alpha (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 u0 (*.f64 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) alpha) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 (*.f64 u0 u0) alpha) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) alpha (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 alpha u0 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 alpha (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 u0 alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 alpha alpha)) (*.f64 (cbrt.f64 alpha) u0) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 alpha alpha)) (*.f64 (cbrt.f64 alpha) (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2))) (*.f64 (cbrt.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) alpha) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 u0) 2) (*.f64 (cbrt.f64 u0) alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 alpha) (*.f64 (sqrt.f64 alpha) u0) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 alpha) (*.f64 (sqrt.f64 alpha) (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) alpha) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 u0) (*.f64 (sqrt.f64 u0) alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 alpha) 1 (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 alpha) (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) (cbrt.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))) (cbrt.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (*.f64 u0 alpha)) (cbrt.f64 (*.f64 u0 alpha))) (cbrt.f64 (*.f64 u0 alpha)) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) (sqrt.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 u0 alpha)) (sqrt.f64 (*.f64 u0 alpha)) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (sqrt.f64 alpha)) (*.f64 (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (sqrt.f64 alpha)) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 alpha) (sqrt.f64 u0)) (*.f64 (sqrt.f64 alpha) (sqrt.f64 u0)) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 alpha) (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (*.f64 (sqrt.f64 alpha) (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 u0) (sqrt.f64 alpha)) (*.f64 (sqrt.f64 u0) (sqrt.f64 alpha)) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (cbrt.f64 (*.f64 alpha alpha))) (cbrt.f64 alpha) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (sqrt.f64 alpha)) (sqrt.f64 alpha) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha (pow.f64 (cbrt.f64 u0) 2)) (cbrt.f64 u0) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha (sqrt.f64 u0)) (sqrt.f64 u0) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) (*.f64 u0 u0) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha (cbrt.f64 (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2)))) (cbrt.f64 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 alpha (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (*.f64 u0 (sqrt.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) (*.f64 u0 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (cbrt.f64 (*.f64 alpha alpha))) (cbrt.f64 alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (sqrt.f64 alpha)) (sqrt.f64 alpha) (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))"]],"rules":[["egg-rr",62],["egg-rr",29],["egg-rr",40],["egg-rr",52]],"stop":[["node limit",1]],"time":68.279052734375,"type":"rewrite"},{"count":[[255,227]],"egraph":[[9,7266,1078,0.071588542],[8,7140,1078,0.059292375],[7,7032,1078,0.048971417],[6,6930,1078,0.03935891700000001],[5,6823,1078,0.030255792000000004],[4,4196,1078,0.020006959],[3,1833,1078,0.010563667],[2,519,1078,0.004163876],[1,180,1114,0.001344667],[0,61,1374,0.000365208]],"inputs":[["(*.f64 1/2 (pow.f64 u0 2))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (*.f64 1/3 (pow.f64 u0 3)))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 1/4 (pow.f64 u0 4))","(+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4)))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 1/4 (pow.f64 u0 4))","(+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4)))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","1/3","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(*.f64 1/4 u0)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(*.f64 1/4 u0)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 u0 (pow.f64 alpha 2))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 u0 alpha)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 u0 alpha))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 u0 alpha)))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (pow.f64 u0 2))","(*.f64 1/2 (*.f64 u0 u0))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (*.f64 1/3 (pow.f64 u0 3)))","(fma.f64 1/2 (*.f64 u0 u0) (*.f64 1/3 (pow.f64 u0 3)))","(*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(fma.f64 1/2 (*.f64 u0 u0) (fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(fma.f64 1/2 (*.f64 u0 u0) (fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 1/4 (pow.f64 u0 4))","(+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4)))","(fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4)))","(*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(fma.f64 1/2 (*.f64 u0 u0) (fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(fma.f64 1/2 (*.f64 u0 u0) (fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 1/4 (pow.f64 u0 4))","(+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4)))","(fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4)))","(*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(fma.f64 1/2 (*.f64 u0 u0) (fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/2 (pow.f64 u0 2)) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(fma.f64 1/2 (*.f64 u0 u0) (fma.f64 1/3 (pow.f64 u0 3) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","1/3","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(*.f64 1/4 u0)","(*.f64 u0 1/4)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(*.f64 1/4 u0)","(*.f64 u0 1/4)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 u0 (pow.f64 alpha 2))","(*.f64 u0 (*.f64 alpha alpha))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(fma.f64 u0 (*.f64 alpha alpha) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/2 (*.f64 u0 u0))))","(*.f64 alpha (*.f64 alpha (fma.f64 1/2 (*.f64 u0 u0) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 1/2 (*.f64 u0 u0) u0))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha)))))","(fma.f64 u0 (*.f64 alpha alpha) (*.f64 (*.f64 alpha alpha) (fma.f64 1/2 (*.f64 u0 u0) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)))","(*.f64 (pow.f64 u0 4) (*.f64 alpha (*.f64 1/4 alpha)))","(*.f64 (pow.f64 u0 4) (*.f64 1/4 (*.f64 alpha alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha))))","(*.f64 (*.f64 alpha alpha) (*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3)))","(*.f64 (*.f64 alpha (*.f64 (pow.f64 u0 3) alpha)) (fma.f64 u0 1/4 1/3))","(*.f64 (pow.f64 u0 3) (*.f64 (fma.f64 u0 1/4 1/3) (*.f64 alpha alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha)))))","(+.f64 (*.f64 1/2 (*.f64 alpha (*.f64 (*.f64 u0 u0) alpha))) (*.f64 (*.f64 alpha alpha) (*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3))))","(*.f64 u0 (*.f64 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) (*.f64 alpha alpha)))","(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 alpha alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)))","(*.f64 (pow.f64 u0 4) (*.f64 alpha (*.f64 1/4 alpha)))","(*.f64 (pow.f64 u0 4) (*.f64 1/4 (*.f64 alpha alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha))))","(*.f64 (*.f64 alpha alpha) (*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3)))","(*.f64 (*.f64 alpha (*.f64 (pow.f64 u0 3) alpha)) (fma.f64 u0 1/4 1/3))","(*.f64 (pow.f64 u0 3) (*.f64 (fma.f64 u0 1/4 1/3) (*.f64 alpha alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha)))))","(+.f64 (*.f64 1/2 (*.f64 alpha (*.f64 (*.f64 u0 u0) alpha))) (*.f64 (*.f64 alpha alpha) (*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3))))","(*.f64 u0 (*.f64 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) (*.f64 alpha alpha)))","(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 alpha alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) (*.f64 alpha alpha))","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) (*.f64 alpha alpha))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) alpha)","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 alpha (+.f64 u0 (*.f64 (pow.f64 u0 2) (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 u0 alpha)","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 u0 alpha))","(fma.f64 1/2 (*.f64 (*.f64 u0 u0) alpha) (*.f64 u0 alpha))","(*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) u0))","(*.f64 alpha (fma.f64 1/2 (*.f64 u0 u0) u0))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 u0 alpha)))","(fma.f64 1/2 (*.f64 (*.f64 u0 u0) alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) alpha) (*.f64 u0 alpha)))","(+.f64 (*.f64 u0 alpha) (*.f64 alpha (fma.f64 1/2 (*.f64 u0 u0) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))))","(+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(*.f64 (pow.f64 u0 4) (*.f64 1/4 alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(fma.f64 1/3 (*.f64 (pow.f64 u0 3) alpha) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(*.f64 alpha (*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3)))","(*.f64 (pow.f64 u0 3) (*.f64 (fma.f64 u0 1/4 1/3) alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 (pow.f64 u0 3) alpha) (fma.f64 1/2 (*.f64 (*.f64 u0 u0) alpha) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 (*.f64 u0 u0) alpha))","(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 (*.f64 u0 alpha)))","(*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 alpha)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(*.f64 (pow.f64 u0 4) (*.f64 1/4 alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(fma.f64 1/3 (*.f64 (pow.f64 u0 3) alpha) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(*.f64 alpha (*.f64 (pow.f64 u0 3) (fma.f64 u0 1/4 1/3)))","(*.f64 (pow.f64 u0 3) (*.f64 (fma.f64 u0 1/4 1/3) alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 (pow.f64 u0 3) alpha) (fma.f64 1/2 (*.f64 (*.f64 u0 u0) alpha) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 (*.f64 u0 u0) alpha))","(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 (*.f64 u0 alpha)))","(*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 alpha)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha))))","(*.f64 (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 u0 (+.f64 1/3 (*.f64 u0 1/4)) 1/2))) alpha)","(*.f64 (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0) alpha)","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) alpha)"]],"stop":[["node limit",1]],"time":106.138916015625,"type":"simplify"},{"compiler":[[5170,3074]],"time":57.190185546875,"type":"eval"},{"alts":[["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","next",9.949433158984878],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","done",10.006921763758164],["(pow.f64 (pow.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)) 3) 1/3)","fresh",11.712270722027247],["(/.f64 (*.f64 (*.f64 alpha alpha) (-.f64 (*.f64 u0 u0) (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2)))) (-.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))","fresh",10.057078505563696],["(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","fresh",9.990798866549227],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","done",0.371757519536884]],"compiler":[[11,8],[22,13],[37,29],[22,15],[37,25],[18,11],[10,7],[11,8],[22,13],[22,15],[37,25],[18,11]],"count":[[234,7]],"kept":[{"done":[2,2],"fresh":[4,1],"new":[227,4],"picked":[1,0]}],"min-error":[0.10384750976844201],"time":49.6328125,"type":"prune"},{"compiler":[[81,45]],"locations":[["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))",0.25,true],["(fma.f64 u0 1/4 1/3)",0.33984375,true],["(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))",0.36556625976844204,true],["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)",0.38671875,true]],"time":18.177978515625,"type":"localize"},{"count":[[4,84]],"series":[["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","alpha","-inf",0.559814453125],["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","alpha","inf",0.695068359375],["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","alpha","0",0.62109375],["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","u0","-inf",0.383056640625],["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","u0","inf",0.281005859375],["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","u0","0",0.253173828125],["(fma.f64 u0 1/4 1/3)","u0","-inf",0.22509765625],["(fma.f64 u0 1/4 1/3)","u0","inf",0.158203125],["(fma.f64 u0 1/4 1/3)","u0","0",0.18994140625],["(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","alpha","-inf",0.322021484375],["(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","alpha","inf",0.48291015625],["(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","alpha","0",0.341064453125],["(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","u0","-inf",0.247802734375],["(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","u0","inf",0.25],["(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","u0","0",0.2490234375],["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)","alpha","-inf",0.30712890625],["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)","alpha","inf",0.3369140625],["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)","alpha","0",0.549072265625],["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)","u0","-inf",0.329833984375],["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)","u0","inf",0.30712890625],["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)","u0","0",0.371826171875]],"time":7.775146484375,"type":"series"},{"count":[[4,104]],"egraph":[[2,3432,60,0.029058584],[1,288,62,0.005089959],[0,14,63,0.000424625]],"inputs":[["(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)","(*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))","(fma.f64 u0 1/4 1/3)","(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) alpha) (*.f64 1/2 alpha))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 alpha (*.f64 u0 (fma.f64 u0 1/4 1/3))) (*.f64 alpha 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 3) (pow.f64 alpha 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 alpha 3) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 3) (pow.f64 alpha 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 alpha 3) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 alpha (*.f64 u0 (fma.f64 u0 1/4 1/3)) (*.f64 alpha 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 u0 (fma.f64 u0 1/4 1/3)) alpha (*.f64 1/2 alpha))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 u0)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 u0))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 u0))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 u0))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 3) (pow.f64 u0 6)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 u0 6) (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 alpha) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 u0))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 3) (pow.f64 u0 6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 u0 6) (pow.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1/3 (*.f64 u0 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u0 1/4) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 u0 1/4 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 1/4) 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 u0 1/4 1/3))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 u0 1/4 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 u0 1/4 1/3)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 u0 1/4 1/3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 u0 1/4 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 u0 1/4 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 u0 1/4 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 u0 1/4 1/3)) (cbrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 2)) (cbrt.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 u0 1/4 1/3)) (sqrt.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 u0 1/4) 3) 1/27) (+.f64 (pow.f64 (*.f64 u0 1/4) 2) (-.f64 1/9 (*.f64 (*.f64 u0 1/4) 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 u0 1/4) 2) 1/9) (fma.f64 u0 1/4 -1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 u0 1/4 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 u0 1/4 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 u0 1/4 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 u0 1/4 1/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 u0 1/4 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 u0 1/4 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 u0 1/4 1/3)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u0 (*.f64 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha)) (*.f64 u0 (*.f64 alpha alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 u0 (*.f64 alpha alpha)) (*.f64 u0 (*.f64 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 u0 (*.f64 alpha alpha)) 1) (*.f64 u0 (*.f64 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (pow.f64 (cbrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) 2) (cbrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) (sqrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 u0 (*.f64 alpha alpha)) 3) (pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 alpha alpha)))) 6)) (+.f64 (pow.f64 (*.f64 u0 (*.f64 alpha alpha)) 2) (-.f64 (pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 alpha alpha)))) 4) (*.f64 (*.f64 u0 (*.f64 alpha alpha)) (*.f64 u0 (*.f64 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 u0 (*.f64 alpha alpha)) 2) (pow.f64 (*.f64 u0 (sqrt.f64 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 alpha alpha)))) 4)) (-.f64 (*.f64 u0 (*.f64 alpha alpha)) (*.f64 u0 (*.f64 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 alpha) (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 alpha) alpha) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 u0 u0))) (exp.f64 (*.f64 u0 (*.f64 alpha alpha)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 u0 (*.f64 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha)))) (exp.f64 (*.f64 u0 (*.f64 alpha alpha)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 u0 (*.f64 alpha alpha))) (+.f64 1 (expm1.f64 (*.f64 u0 (*.f64 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 alpha (fma.f64 u0 alpha (*.f64 u0 (*.f64 u0 (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)))))) 1))))))"]],"rules":[["egg-rr",31],["egg-rr",27],["egg-rr",21],["egg-rr",25]],"stop":[["node limit",1]],"time":58.577880859375,"type":"rewrite"},{"count":[[188,145]],"egraph":[[10,7871,1193,0.081928666],[9,6214,1193,0.068891832],[8,6088,1193,0.056472416],[7,5980,1193,0.046134207999999996],[6,5874,1193,0.036454291],[5,5642,1193,0.027184791],[4,3446,1193,0.017600833],[3,1562,1193,0.009058041],[2,437,1193,0.00357325],[1,149,1727,0.001217666],[0,52,2055,0.000354583]],"inputs":[["(*.f64 1/2 alpha)","(+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/3 (*.f64 u0 alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/3 (*.f64 u0 alpha)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","1/3","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(*.f64 1/4 u0)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(*.f64 1/4 u0)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 1/4 u0))","(*.f64 u0 (pow.f64 alpha 2))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 alpha)","(+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha)))","(fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0)))","(*.f64 alpha (+.f64 (*.f64 1/3 u0) 1/2))","(*.f64 alpha (fma.f64 1/3 u0 1/2))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha))","(*.f64 1/4 (*.f64 alpha (*.f64 u0 u0)))","(*.f64 alpha (*.f64 u0 (*.f64 u0 1/4)))","(*.f64 (*.f64 alpha u0) (*.f64 u0 1/4))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/3 (*.f64 u0 alpha)))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/3 (*.f64 alpha u0)))","(*.f64 alpha (*.f64 u0 (fma.f64 u0 1/4 1/3)))","(*.f64 (*.f64 alpha u0) (fma.f64 u0 1/4 1/3))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha))","(*.f64 1/4 (*.f64 alpha (*.f64 u0 u0)))","(*.f64 alpha (*.f64 u0 (*.f64 u0 1/4)))","(*.f64 (*.f64 alpha u0) (*.f64 u0 1/4))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/3 (*.f64 u0 alpha)))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/3 (*.f64 alpha u0)))","(*.f64 alpha (*.f64 u0 (fma.f64 u0 1/4 1/3)))","(*.f64 (*.f64 alpha u0) (fma.f64 u0 1/4 1/3))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/2 alpha) (*.f64 1/3 (*.f64 u0 alpha))))","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) alpha)","(fma.f64 1/4 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 1/2 alpha (*.f64 1/3 (*.f64 alpha u0))))","(*.f64 alpha (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha))","(*.f64 1/2 (*.f64 alpha (*.f64 u0 u0)))","(*.f64 (*.f64 alpha u0) (*.f64 1/2 u0))","(*.f64 u0 (*.f64 alpha (*.f64 1/2 u0)))","(*.f64 alpha (*.f64 1/2 (*.f64 u0 u0)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 1/2 (*.f64 alpha (*.f64 u0 u0))))","(*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3))))","(*.f64 alpha (*.f64 (*.f64 u0 u0) (fma.f64 1/3 u0 1/2)))","(*.f64 (*.f64 alpha u0) (*.f64 u0 (fma.f64 1/3 u0 1/2)))","(*.f64 alpha (*.f64 u0 (*.f64 u0 (fma.f64 1/3 u0 1/2))))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))","(*.f64 (pow.f64 u0 4) (*.f64 alpha 1/4))","(*.f64 alpha (*.f64 1/4 (pow.f64 u0 4)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4))))","(*.f64 alpha (+.f64 (*.f64 1/4 (pow.f64 u0 4)) (*.f64 1/3 (pow.f64 u0 3))))","(*.f64 (fma.f64 u0 1/4 1/3) (*.f64 alpha (pow.f64 u0 3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))","(*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))","(*.f64 (pow.f64 u0 4) (*.f64 alpha 1/4))","(*.f64 alpha (*.f64 1/4 (pow.f64 u0 4)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4))))","(*.f64 alpha (+.f64 (*.f64 1/4 (pow.f64 u0 4)) (*.f64 1/3 (pow.f64 u0 3))))","(*.f64 (fma.f64 u0 1/4 1/3) (*.f64 alpha (pow.f64 u0 3)))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","(*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (*.f64 (pow.f64 u0 2) alpha))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (fma.f64 1/2 (*.f64 alpha (*.f64 u0 u0)) (*.f64 1/4 (*.f64 alpha (pow.f64 u0 4)))))","(fma.f64 1/3 (*.f64 alpha (pow.f64 u0 3)) (*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/4 (pow.f64 u0 4)))))","(*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2))","1/3","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(*.f64 1/4 u0)","(*.f64 u0 1/4)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(*.f64 1/4 u0)","(*.f64 u0 1/4)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(+.f64 1/3 (*.f64 1/4 u0))","(+.f64 1/3 (*.f64 u0 1/4))","(fma.f64 u0 1/4 1/3)","(*.f64 u0 (pow.f64 alpha 2))","(*.f64 u0 (*.f64 alpha alpha))","(*.f64 alpha (*.f64 alpha u0))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(fma.f64 u0 (*.f64 alpha alpha) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 1/2 (*.f64 u0 u0))))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 1/2 u0) u0 u0))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 1/2 u0) u0 u0)))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha)))))","(fma.f64 u0 (*.f64 alpha alpha) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 (*.f64 u0 u0) (fma.f64 1/3 u0 1/2))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 1/3 u0 1/2)))))","(*.f64 alpha (*.f64 (*.f64 alpha u0) (+.f64 1 (*.f64 u0 (fma.f64 1/3 u0 1/2)))))","(*.f64 (*.f64 alpha (*.f64 alpha u0)) (+.f64 1 (*.f64 u0 (fma.f64 1/3 u0 1/2))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)))","(*.f64 alpha (*.f64 alpha (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 (*.f64 alpha alpha) (*.f64 1/4 (pow.f64 u0 4)))","(*.f64 alpha (*.f64 (pow.f64 u0 4) (*.f64 alpha 1/4)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha))))","(*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 alpha (*.f64 (fma.f64 u0 1/4 1/3) (*.f64 alpha (pow.f64 u0 3))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha)))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 alpha (*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 (*.f64 alpha u0) (*.f64 alpha u0)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2)))","(*.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)))","(*.f64 alpha (*.f64 alpha (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 (*.f64 alpha alpha) (*.f64 1/4 (pow.f64 u0 4)))","(*.f64 alpha (*.f64 (pow.f64 u0 4) (*.f64 alpha 1/4)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (*.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha))))","(*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/3 (pow.f64 u0 3)) (*.f64 1/4 (pow.f64 u0 4))))","(*.f64 alpha (*.f64 (fma.f64 u0 1/4 1/3) (*.f64 alpha (pow.f64 u0 3))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2)))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha)))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))))","(*.f64 alpha (*.f64 (*.f64 alpha (*.f64 u0 u0)) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))","(*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) (*.f64 (*.f64 alpha u0) (*.f64 alpha u0)))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(*.f64 (+.f64 u0 (*.f64 (+.f64 (*.f64 u0 (+.f64 1/3 (*.f64 1/4 u0))) 1/2) (pow.f64 u0 2))) (pow.f64 alpha 2))","(fma.f64 1/4 (*.f64 (pow.f64 u0 4) (*.f64 alpha alpha)) (fma.f64 u0 (*.f64 alpha alpha) (fma.f64 1/3 (*.f64 (pow.f64 u0 3) (*.f64 alpha alpha)) (*.f64 1/2 (*.f64 (*.f64 u0 u0) (*.f64 alpha alpha))))))","(+.f64 (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/2 (*.f64 u0 u0)) (*.f64 1/3 (pow.f64 u0 3)))) (*.f64 (*.f64 alpha alpha) (+.f64 (*.f64 1/4 (pow.f64 u0 4)) u0)))","(*.f64 alpha (*.f64 alpha (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0)))","(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))"]],"stop":[["node limit",1]],"time":120.97216796875,"type":"simplify"},{"compiler":[[3371,1866]],"time":37.86083984375,"type":"eval"},{"alts":[["(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","fresh",9.990798866549197],["(/.f64 (*.f64 (*.f64 alpha alpha) (-.f64 (*.f64 u0 u0) (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2)))) (-.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))","fresh",10.057078505563696],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))","fresh",13.661415832208254],["(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","done",9.949433158984878],["(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","done",10.006921763758164],["(pow.f64 (pow.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)) 3) 1/3)","fresh",11.712270722027247],["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","done",0.371757519536884]],"compiler":[[18,11],[37,25],[11,8],[22,13],[37,29],[22,15],[10,7]],"count":[[152,7]],"kept":[{"done":[2,2],"fresh":[4,3],"new":[145,1],"picked":[1,1]}],"min-error":[0.10384750976844201],"time":25.55908203125,"type":"prune"},{"accuracy":[0.371757519536884],"baseline":[0.371757519536884],"branch":[["alpha",0.3717575195368841,1],["u0",0.3717575195368841,1],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))",0.371757519536884,1],["(*.f64 (neg.f64 alpha) alpha)",0.3717575195368841,1],["(log.f64 (-.f64 1 u0))",0.3717575195368841,1],["(-.f64 1 u0)",0.3717575195368841,1]],"compiler":[[3,2],[3,2],[11,8],[6,4],[6,5],[5,4],[239,147]],"count":[[12,1]],"inputs":[["(*.f64 (*.f64 alpha alpha) (fma.f64 (*.f64 u0 u0) (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) u0))","(fma.f64 (*.f64 u0 alpha) alpha (*.f64 (*.f64 (*.f64 u0 u0) (*.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) alpha)) alpha))","(pow.f64 (pow.f64 (*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha)) 3) 1/3)","(/.f64 (*.f64 (*.f64 alpha alpha) (-.f64 (*.f64 u0 u0) (*.f64 (pow.f64 u0 4) (pow.f64 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2) 2)))) (-.f64 u0 (*.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)))))","(*.f64 (fma.f64 u0 (*.f64 u0 (fma.f64 u0 (fma.f64 u0 1/4 1/3) 1/2)) u0) (*.f64 alpha alpha))","(*.f64 alpha (+.f64 (*.f64 1/2 (*.f64 (pow.f64 u0 2) alpha)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) alpha)) (+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) alpha)) (*.f64 u0 alpha)))))","(*.f64 alpha (*.f64 alpha (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 (+.f64 1/3 (*.f64 u0 1/4))))))))","(+.f64 (*.f64 1/4 (*.f64 (pow.f64 u0 4) (pow.f64 alpha 2))) (+.f64 (*.f64 u0 (pow.f64 alpha 2)) (+.f64 (*.f64 1/3 (*.f64 (pow.f64 u0 3) (pow.f64 alpha 2))) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))))","(*.f64 (*.f64 alpha alpha) (+.f64 u0 (*.f64 (*.f64 u0 u0) (+.f64 1/2 (*.f64 u0 1/3)))))","(+.f64 (*.f64 u0 (pow.f64 alpha 2)) (*.f64 1/2 (*.f64 (pow.f64 u0 2) (pow.f64 alpha 2))))","(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))"]],"link":["."],"name":["Beckmann Distribution sample, tan2theta, alphax == alphay"],"oracle":[28.192140059887304],"outputs":[["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))"]],"time":34.759033203125,"times":[["alpha",5.083984375],["u0",4.94091796875],["(*.f64 (*.f64 (neg.f64 alpha) alpha) (log.f64 (-.f64 1 u0)))",5.10498046875],["(*.f64 (neg.f64 alpha) alpha)",5.152099609375],["(log.f64 (-.f64 1 u0))",5.02197265625],["(-.f64 1 u0)",5.278076171875]],"type":"regimes"},{"compiler":[[10,7]],"egraph":[[5,53,13,0.000361834],[4,51,13,0.000287001],[3,46,13,0.000219542],[2,32,13,0.000135042],[1,18,13,7.416700000000001e-5],[0,8,13,3.2042e-5]],"inputs":[["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 alpha (*.f64 (neg.f64 alpha) (log1p.f64 (neg.f64 u0))))","(*.f64 alpha (*.f64 alpha (neg.f64 (log1p.f64 (neg.f64 u0)))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.6728515625,"type":"simplify"},{"time":0.01318359375,"type":"soundness"},{"compiler":[[10,7]],"remove-preprocessing":[[]],"time":7.660888671875,"type":"end"}]
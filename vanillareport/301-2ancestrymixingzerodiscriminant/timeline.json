[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.9375603052321821,0.061463370686396956,0.0009763240814208984],[11,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[10,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[9,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[8,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[7,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[6,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[5,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[4,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":17.507080078125,"type":"analyze"},{"outcomes":[["body",256,"valid",288.60302734375,8256]],"time":296.179931640625,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,2,2,1.375e-6],[2,20,18,0.000127167],[1,16,18,8.612499999999999e-5],[0,10,18,4.4292e-5]],"inputs":[["0","1"],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","(cbrt.f64 (/.f64 a (*.f64 2 g)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","(cbrt.f64 (/.f64 (/.f64 g 2) a))","(cbrt.f64 (/.f64 a (*.f64 2 g)))","(cbrt.f64 (/.f64 a (*.f64 g 2)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":21.908935546875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[2,12,9,9.3625e-5],[1,10,9,6.4209e-5],[0,7,9,3.4417e-5]],"inputs":[["(cbrt.f64 (/.f64 g (*.f64 2 a)))"]],"method":["egg-herbie"],"outputs":[["(cbrt.f64 (/.f64 g (*.f64 2 a)))"]],"stop":[["saturated",1]],"time":10.97021484375,"type":"simplify"},{"compiler":[[8,6]],"time":0.200927734375,"type":"eval"},{"alts":[["(cbrt.f64 (/.f64 g (*.f64 2 a)))","next",17.325554927748072]],"compiler":[[8,6],[8,6]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[17.325554927748072],"time":0.701904296875,"type":"prune"},{"compiler":[[19,12]],"locations":[["(cbrt.f64 (/.f64 g (*.f64 2 a)))",16.86302018590082,true]],"time":4.717041015625,"type":"localize"},{"count":[[1,0]],"series":[["(cbrt.f64 (/.f64 g (*.f64 2 a)))","a","-inf",0.361083984375],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","a","inf",0.482177734375],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","a","0",0.410888671875],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","g","-inf",0.45703125],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","g","inf",0.486083984375],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","g","0",0.714111328125]],"time":2.987060546875,"type":"series"},{"count":[[1,27]],"egraph":[[2,1857,9,0.018533124],[1,146,9,0.002546333],[0,7,9,0.0001915]],"inputs":[["(cbrt.f64 (/.f64 g (*.f64 2 a)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 1/2 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (cbrt.f64 (/.f64 1/2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (pow.f64 (/.f64 1/2 a) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (/.f64 1 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2) (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 1/2 (/.f64 g a)) 1/6) (pow.f64 (*.f64 1/2 (/.f64 g a)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 1/2 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 1/2 (/.f64 g a))) 1/3) (pow.f64 (sqrt.f64 (*.f64 1/2 (/.f64 g a))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (*.f64 2 (/.f64 a g))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 g)) (cbrt.f64 (*.f64 a -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 g)) (neg.f64 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (/.f64 g a)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/2 (/.f64 g a)) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))))"]],"rules":[["egg-rr",27]],"stop":[["node limit",1]],"time":36.27490234375,"type":"rewrite"},{"count":[[27,27]],"egraph":[[0,0,0,1.975e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.18017578125,"type":"simplify"},{"compiler":[[268,177]],"time":3.90478515625,"type":"eval"},{"alts":[["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","next",0.37890625],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","fresh",0.40072250976844204],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","fresh",0.4229088379159782],["(/.f64 1 (cbrt.f64 (*.f64 2 (/.f64 a g))))","fresh",16.855941902782423],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","done",17.325554927748072],["(log.f64 (exp.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))","fresh",59.15518884061551],["(*.f64 (cbrt.f64 g) (cbrt.f64 (/.f64 1/2 a)))","fresh",0.42939379884221013]],"compiler":[[9,7],[9,7],[11,9],[10,8],[8,6],[10,8],[9,7],[9,7],[9,7],[11,9],[10,8],[10,8],[9,7]],"count":[[28,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[27,6],"picked":[1,1]}],"min-error":[0.01953125],"time":6.02001953125,"type":"prune"},{"compiler":[[21,13]],"locations":[["(cbrt.f64 a)",0.0703125,true],["(cbrt.f64 (*.f64 g 1/2))",0.08984375,true],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))",0.36328125,true]],"time":5.756103515625,"type":"localize"},{"count":[[3,0]],"series":[["(cbrt.f64 a)","a","-inf",0.33203125],["(cbrt.f64 a)","a","inf",0.244873046875],["(cbrt.f64 a)","a","0",0.319091796875],["(cbrt.f64 (*.f64 g 1/2))","g","-inf",0.22216796875],["(cbrt.f64 (*.f64 g 1/2))","g","inf",0.22412109375],["(cbrt.f64 (*.f64 g 1/2))","g","0",0.240966796875],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","a","-inf",0.5361328125],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","a","inf",0.2021484375],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","a","0",0.18603515625],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","g","-inf",0.238037109375],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","g","inf",0.2109375],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","g","0",0.281005859375]],"time":3.365966796875,"type":"series"},{"count":[[3,72]],"egraph":[[2,2020,18,0.018906166999999998],[1,163,18,0.002886],[0,8,18,0.00022175]],"inputs":[["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","(cbrt.f64 (*.f64 g 1/2))","(cbrt.f64 a)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 g 1/2)) (/.f64 1 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 1/2 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2) (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (/.f64 1 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (*.f64 (cbrt.f64 1/2) (/.f64 1 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) (sqrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 g 1/2) 1/6) (*.f64 (pow.f64 (*.f64 g 1/2) 1/6) (/.f64 1 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 g 1/2))) (/.f64 1 (neg.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 a)) (cbrt.f64 (*.f64 g 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2) 1) (/.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 g) 1) (/.f64 (cbrt.f64 1/2) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 g 1/2) 1/6) 1) (/.f64 (pow.f64 (*.f64 g 1/2) 1/6) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2)) (/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2)) (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 g) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2)) (/.f64 (cbrt.f64 1/2) (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 g 1/2) 1/6) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2)) (/.f64 (pow.f64 (*.f64 g 1/2) 1/6) (cbrt.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 a 1/6)) (/.f64 (cbrt.f64 (*.f64 g 1/2)) (pow.f64 a 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2) (pow.f64 a 1/6)) (/.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (pow.f64 a 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 g) (pow.f64 a 1/6)) (/.f64 (cbrt.f64 1/2) (pow.f64 a 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (/.f64 g a)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 a (*.f64 g 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 (*.f64 g 1/2)) (neg.f64 (cbrt.f64 a))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/2 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 g 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 g 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 g 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2) (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (cbrt.f64 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 1/2) (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 g 1/2) 1/6) (pow.f64 (*.f64 g 1/2) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 g 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 g 1/2)) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 g 1/2)) 1/3) (pow.f64 (sqrt.f64 (*.f64 g 1/2)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 g 1/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 g 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 g 1/2) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 g 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 g 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 g 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 g 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 g 1/2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 a)) (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 a)) 2) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 a 1/6) (pow.f64 a 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 a) 2) 1/3) (cbrt.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 a) 1/3) (pow.f64 (sqrt.f64 a) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 a 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 a 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 a)))))))"]],"rules":[["egg-rr",18],["egg-rr",20],["egg-rr",34]],"stop":[["node limit",1]],"time":41.47509765625,"type":"rewrite"},{"count":[[72,72]],"egraph":[[0,0,0,1.9542e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.513916015625,"type":"simplify"},{"compiler":[[822,557]],"time":11.89697265625,"type":"eval"},{"alts":[["(/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2)) (cbrt.f64 a))","fresh",0.7691729493483332],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","next",0.40072250976844204],["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","done",0.37890625],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","fresh",0.4229088379159782],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","done",17.325554927748072],["(*.f64 (/.f64 (cbrt.f64 g) 1) (/.f64 (cbrt.f64 1/2) (cbrt.f64 a)))","fresh",0.5446663574528623],["(*.f64 (/.f64 1 (cbrt.f64 a)) (cbrt.f64 (*.f64 g 1/2)))","fresh",0.44111254884221013],["(*.f64 (cbrt.f64 g) (cbrt.f64 (/.f64 1/2 a)))","fresh",0.42939379884221013]],"compiler":[[18,15],[9,7],[9,7],[11,9],[8,6],[12,10],[11,9],[9,7],[18,15],[9,7],[11,9],[12,10],[11,9],[9,7]],"count":[[79,8]],"kept":[{"done":[1,1],"fresh":[5,3],"new":[72,3],"picked":[1,1]}],"min-error":[0.00390625],"time":13.488037109375,"type":"prune"},{"compiler":[[21,13]],"locations":[["(cbrt.f64 (*.f64 2 a))",0.0625,true],["(cbrt.f64 g)",0.078125,true],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))",0.41244125976844204,true]],"time":5.615966796875,"type":"localize"},{"count":[[3,0]],"series":[["(cbrt.f64 (*.f64 2 a))","a","-inf",0.3359375],["(cbrt.f64 (*.f64 2 a))","a","inf",0.282958984375],["(cbrt.f64 (*.f64 2 a))","a","0",0.44482421875],["(cbrt.f64 g)","g","-inf",0.3251953125],["(cbrt.f64 g)","g","inf",0.22119140625],["(cbrt.f64 g)","g","0",0.22705078125],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","a","-inf",0.4599609375],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","a","inf",0.324951171875],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","a","0",0.3701171875],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","g","-inf",0.455810546875],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","g","inf",0.5009765625],["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","g","0",0.5048828125]],"time":4.583984375,"type":"series"},{"count":[[3,71]],"egraph":[[2,2015,18,0.018886624],[1,163,18,0.0028366660000000003],[0,8,18,0.000209625]],"inputs":[["(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","(cbrt.f64 g)","(cbrt.f64 (*.f64 2 a))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (/.f64 1 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 1/2 (/.f64 g a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2) (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (*.f64 (cbrt.f64 (cbrt.f64 g)) (/.f64 1 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) (sqrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 g 1/6) (*.f64 (pow.f64 g 1/6) (/.f64 1 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 g)) (/.f64 1 (neg.f64 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 2 a))) (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) 1) (/.f64 (cbrt.f64 (cbrt.f64 g)) (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 g 1/6) 1) (/.f64 (pow.f64 g 1/6) (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 g 1/6) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2)) (/.f64 (pow.f64 g 1/6) (cbrt.f64 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (cbrt.f64 2)) (/.f64 (cbrt.f64 (cbrt.f64 g)) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 g 1/6) (cbrt.f64 2)) (/.f64 (pow.f64 g 1/6) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (*.f64 2 a) 1/6)) (/.f64 (cbrt.f64 g) (pow.f64 (*.f64 2 a) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (pow.f64 (*.f64 2 a) 1/6)) (/.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (*.f64 2 a) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/2 (/.f64 g a)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 2 a) g)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 g) (neg.f64 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/2 (/.f64 g a)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 g)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (cbrt.f64 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 g 1/6) (pow.f64 g 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 g) 2) 1/3) (cbrt.f64 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 g) 1/3) (pow.f64 (sqrt.f64 g) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 g 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 g) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 g)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 g 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 g) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 g)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (*.f64 2 a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (cbrt.f64 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2) (cbrt.f64 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 2 a) 1/6) (pow.f64 (*.f64 2 a) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (*.f64 2 a)) 2) 1/3) (cbrt.f64 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (*.f64 2 a)) 1/3) (pow.f64 (sqrt.f64 (*.f64 2 a)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 a) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 a)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 a) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 2 a))))))))"]],"rules":[["egg-rr",20],["egg-rr",18],["egg-rr",33]],"stop":[["node limit",1]],"time":41.55712890625,"type":"rewrite"},{"count":[[71,71]],"egraph":[[0,0,0,1.9708e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.473876953125,"type":"simplify"},{"compiler":[[808,546]],"time":11.31591796875,"type":"eval"},{"alts":[["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","done",0.37890625],["(/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2)) (cbrt.f64 a))","fresh",0.7691729493483332],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","next",0.4229088379159782],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","done",17.325554927748072],["(*.f64 (/.f64 (cbrt.f64 g) 1) (/.f64 (cbrt.f64 1/2) (cbrt.f64 a)))","fresh",0.5446663574528623],["(*.f64 (cbrt.f64 g) (cbrt.f64 (/.f64 1/2 a)))","fresh",0.42939379884221013],["(*.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))","fresh",0.49417880861065216]],"compiler":[[9,7],[18,15],[11,9],[8,6],[12,10],[9,7],[12,10],[18,15],[11,9],[12,10],[9,7],[12,10]],"count":[[79,7]],"kept":[{"done":[2,2],"fresh":[5,4],"new":[71,1],"picked":[1,0]}],"min-error":[0],"time":13.05419921875,"type":"prune"},{"compiler":[[31,20]],"locations":[["(cbrt.f64 (*.f64 2 a))",0.0625,false],["(cbrt.f64 g)",0.078125,false],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))",0.24609375,true],["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))",0.3522262695368841,true]],"time":7.976806640625,"type":"localize"},{"count":[[2,0]],"series":[["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","g","-inf",0.282958984375],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","g","inf",0.242919921875],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","g","0",0.267822265625],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","a","-inf",0.208984375],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","a","inf",0.257080078125],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","a","0",0.280029296875],["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))","g","-inf",0.472900390625],["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))","g","inf",0.398193359375],["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))","g","0",0.77197265625],["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))","a","-inf",0.216064453125],["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))","a","inf",0.343017578125],["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))","a","0",0.39599609375]],"time":4.2841796875,"type":"series"},{"count":[[2,75]],"egraph":[[2,2506,18,0.021333791999999997],[1,204,18,0.003510542],[0,10,21,0.000284917]],"inputs":[["(/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g))","(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 a)) (/.f64 1 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 2 (/.f64 a g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) 2) (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) (/.f64 1 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (*.f64 (cbrt.f64 a) (/.f64 1 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) (sqrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 2 a) 1/6) (*.f64 (pow.f64 (*.f64 2 a) 1/6) (/.f64 1 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (*.f64 2 a))) (/.f64 1 (neg.f64 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 g)) (cbrt.f64 (*.f64 2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2) 1) (/.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 2) 1) (/.f64 (cbrt.f64 a) (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 2 a) 1/6) 1) (/.f64 (pow.f64 (*.f64 2 a) 1/6) (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2)) (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2)) (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 2) (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2)) (/.f64 (cbrt.f64 a) (cbrt.f64 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (*.f64 2 a) 1/6) (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2)) (/.f64 (pow.f64 (*.f64 2 a) 1/6) (cbrt.f64 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 g 1/6)) (/.f64 (cbrt.f64 (*.f64 2 a)) (pow.f64 g 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2) (pow.f64 g 1/6)) (/.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) (pow.f64 g 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 2) (pow.f64 g 1/6)) (/.f64 (cbrt.f64 a) (pow.f64 g 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 g (*.f64 2 a))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (/.f64 a g)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 (*.f64 2 a)) (neg.f64 (cbrt.f64 g))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 2 (/.f64 a g)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 g (*.f64 2 a))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 g) (/.f64 1 (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 g (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 g (*.f64 2 a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))) (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))) 2) (cbrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))) (sqrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 2 a))) (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (*.f64 2 a))) (pow.f64 (/.f64 1 (cbrt.f64 g)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) 2) -1) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) -1) (pow.f64 (sqrt.f64 (cbrt.f64 (*.f64 2 (/.f64 a g)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) 1) (/.f64 (cbrt.f64 (cbrt.f64 g)) (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 g 1/6) 1) (/.f64 (pow.f64 g 1/6) (cbrt.f64 (*.f64 2 a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2)) (/.f64 (cbrt.f64 (cbrt.f64 g)) (cbrt.f64 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 g 1/6) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 2 a))) 2)) (/.f64 (pow.f64 g 1/6) (cbrt.f64 (cbrt.f64 (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (cbrt.f64 2)) (/.f64 (cbrt.f64 (cbrt.f64 g)) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 g 1/6) (cbrt.f64 2)) (/.f64 (pow.f64 g 1/6) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (*.f64 2 a) 1/6)) (/.f64 (cbrt.f64 g) (pow.f64 (*.f64 2 a) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2) (pow.f64 (*.f64 2 a) 1/6)) (/.f64 (cbrt.f64 (cbrt.f64 g)) (pow.f64 (*.f64 2 a) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 g 1/6) (pow.f64 (*.f64 2 a) 1/6)) (/.f64 (pow.f64 g 1/6) (pow.f64 (*.f64 2 a) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 (cbrt.f64 (*.f64 2 a)))) (neg.f64 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (cbrt.f64 (*.f64 2 a))) 1) (cbrt.f64 g))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (cbrt.f64 (*.f64 2 a))) (pow.f64 (cbrt.f64 (cbrt.f64 g)) 2)) (cbrt.f64 (cbrt.f64 g)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 1 (cbrt.f64 (*.f64 2 a))) (pow.f64 g 1/6)) (pow.f64 g 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 g (*.f64 2 a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (/.f64 g (*.f64 2 a))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 2 (/.f64 a g))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 g (*.f64 2 a))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 g (*.f64 2 a))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 g (*.f64 2 a)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 g (*.f64 2 a)))))))))"]],"rules":[["egg-rr",40],["egg-rr",35]],"stop":[["node limit",1]],"time":43.035888671875,"type":"rewrite"},{"count":[[75,75]],"egraph":[[0,0,0,2e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.85498046875,"type":"simplify"},{"compiler":[[1483,1070]],"time":19.97314453125,"type":"eval"},{"alts":[["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","done",0.37890625],["(/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2)) (cbrt.f64 a))","fresh",0.7691729493483332],["(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","done",0.4229088379159782],["(*.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))","fresh",0.49417880861065216],["(cbrt.f64 (/.f64 g (*.f64 2 a)))","done",17.325554927748072],["(*.f64 (/.f64 (cbrt.f64 g) 1) (/.f64 (cbrt.f64 1/2) (cbrt.f64 a)))","fresh",0.5446663574528623],["(*.f64 (cbrt.f64 g) (cbrt.f64 (/.f64 1/2 a)))","fresh",0.42939379884221013]],"compiler":[[9,7],[18,15],[11,9],[12,10],[8,6],[12,10],[9,7]],"count":[[120,7]],"kept":[{"done":[2,2],"fresh":[4,3],"new":[113,1],"picked":[1,1]}],"min-error":[0],"time":19.135009765625,"type":"prune"},{"accuracy":[0.37890625],"baseline":[0.37890625],"branch":[["g",0.37890625,1],["a",0.37890625,1],["(cbrt.f64 (/.f64 g (*.f64 2 a)))",0.37890625,1],["(/.f64 g (*.f64 2 a))",0.37890625,1],["(*.f64 2 a)",0.37890625,1],["(*.f64 2 a)",0.37890625,1]],"compiler":[[3,2],[3,2],[8,6],[7,5],[5,4],[5,4],[109,73]],"count":[[12,1]],"inputs":[["(*.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))","(*.f64 (/.f64 1 (cbrt.f64 2)) (/.f64 (cbrt.f64 g) (cbrt.f64 a)))","(/.f64 (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 g 1/2))) 2)) (cbrt.f64 a))","(*.f64 (/.f64 (cbrt.f64 g) 1) (/.f64 (cbrt.f64 1/2) (cbrt.f64 a)))","(*.f64 (/.f64 1 (cbrt.f64 a)) (cbrt.f64 (*.f64 g 1/2)))","(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))","(/.f64 (cbrt.f64 g) (cbrt.f64 (*.f64 2 a)))","(/.f64 1 (/.f64 (cbrt.f64 (*.f64 2 a)) (cbrt.f64 g)))","(/.f64 1 (cbrt.f64 (*.f64 2 (/.f64 a g))))","(log.f64 (exp.f64 (cbrt.f64 (*.f64 1/2 (/.f64 g a)))))","(*.f64 (cbrt.f64 g) (cbrt.f64 (/.f64 1/2 a)))","(cbrt.f64 (/.f64 g (*.f64 2 a)))"]],"link":["."],"name":["2-ancestry mixing, zero discriminant"],"oracle":[59.187102610152394],"outputs":[["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))"]],"time":33.392822265625,"times":[["g",5.30078125],["a",5.14501953125],["(cbrt.f64 (/.f64 g (*.f64 2 a)))",4.526123046875],["(/.f64 g (*.f64 2 a))",4.386962890625],["(*.f64 2 a)",5.37890625],["(*.f64 2 a)",5.2509765625]],"type":"regimes"},{"compiler":[[9,7]],"egraph":[[1,9,11,2.475e-5],[0,8,11,1.5125e-5]],"inputs":[["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (cbrt.f64 (*.f64 g 1/2)) (cbrt.f64 a))"]],"stop":[["fuel",1],["saturated",1]],"time":8.177978515625,"type":"simplify"},{"time":0.004150390625,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.0810546875,"type":"end"}]
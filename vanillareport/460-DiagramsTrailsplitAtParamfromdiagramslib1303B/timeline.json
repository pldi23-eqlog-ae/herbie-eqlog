[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.850731099024415,0.14829257689416409,0.0009763240814208984],[11,0.8234140453860164,0.17560963053256273,0.0009763240814208984],[10,0.7180482670664787,0.2809754088521004,0.0009763240814208984],[9,0.6712190322577953,0.32780464366078377,0.0009763240814208984],[8,0.49951183795928955,0.49951183795928955,0.0009763240814208984],[7,0.43707285821437836,0.5619508177042007,0.0009763240814208984],[6,0.18731693923473358,0.8117067366838455,0.0009763240814208984],[5,0.12487795948982239,0.8741457164287567,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":33.57177734375,"type":"analyze"},{"outcomes":[["body",256,"valid",282.408935546875,8256]],"time":289.8681640625,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.583e-6],[4,35,20,0.000299625],[3,33,20,0.00022708399999999998],[2,27,20,0.000162584],[1,19,20,0.00010224999999999999],[0,10,20,5.5375e-5]],"inputs":[["0","1"],["(/.f64 (*.f64 x y) (+.f64 y 1))","(/.f64 (*.f64 y x) (+.f64 x 1))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(/.f64 (*.f64 x y) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 x 1))","(/.f64 y (/.f64 (+.f64 x 1) x))","(*.f64 (/.f64 y (+.f64 x 1)) x)","(*.f64 x (/.f64 y (+.f64 x 1)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.1689453125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[4,21,10,0.000206709],[3,20,10,0.00016275],[2,17,10,0.000118709],[1,13,10,7.741700000000001e-5],[0,7,10,4.1042e-5]],"inputs":[["(/.f64 (*.f64 x y) (+.f64 y 1))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x y) (+.f64 y 1))","(/.f64 x (/.f64 (+.f64 y 1) y))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))"]],"stop":[["saturated",1]],"time":10.47900390625,"type":"simplify"},{"compiler":[[16,10]],"time":0.324951171875,"type":"eval"},{"alts":[["(*.f64 x (/.f64 y (+.f64 y 1)))","next",0.0078125],["(/.f64 (*.f64 x y) (+.f64 y 1))","fresh",8.0546875]],"compiler":[[9,6],[9,6],[9,6],[9,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.00390625],"time":1.177001953125,"type":"prune"},{"compiler":[[20,12]],"locations":[["(*.f64 x (/.f64 y (+.f64 y 1)))",0.00390625,true],["(/.f64 y (+.f64 y 1))",0.00390625,true]],"time":4.819091796875,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 x (/.f64 y (+.f64 y 1)))","y","-inf",0.241943359375],["(*.f64 x (/.f64 y (+.f64 y 1)))","y","inf",0.220947265625],["(*.f64 x (/.f64 y (+.f64 y 1)))","y","0",0.30078125],["(*.f64 x (/.f64 y (+.f64 y 1)))","x","-inf",0.711181640625],["(*.f64 x (/.f64 y (+.f64 y 1)))","x","inf",0.427001953125],["(*.f64 x (/.f64 y (+.f64 y 1)))","x","0",0.553955078125],["(/.f64 y (+.f64 y 1))","y","-inf",0.23388671875],["(/.f64 y (+.f64 y 1))","y","inf",0.321044921875],["(/.f64 y (+.f64 y 1))","y","0",0.326904296875]],"time":3.4609375,"type":"series"},{"count":[[2,55]],"egraph":[[2,2065,17,0.019263126],[1,150,17,0.002698501],[0,7,17,0.000192834]],"inputs":[["(/.f64 y (+.f64 y 1))","(*.f64 x (/.f64 y (+.f64 y 1)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 2) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (+.f64 y 1))) (sqrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (+.f64 (neg.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 y 1))) (/.f64 y (sqrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 1 (pow.f64 y 3))) (fma.f64 y y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (+.f64 y 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y 1) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (+.f64 (neg.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (+.f64 y 1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 y) (log1p.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 y 1) (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (+.f64 y 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 y x)) (+.f64 (neg.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) 1) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 y x) (sqrt.f64 (+.f64 y 1))) (sqrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) x) (+.f64 (neg.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 y)) (+.f64 (neg.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (+.f64 y 1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 y x)) (log1p.f64 y)))))))"]],"rules":[["egg-rr",22],["egg-rr",33]],"stop":[["node limit",1]],"time":39.22802734375,"type":"rewrite"},{"count":[[91,85]],"egraph":[[4,4817,388,0.024759959999999998],[3,1258,388,0.010551251],[2,372,400,0.002961543],[1,136,413,0.000896001],[0,49,437,0.000236209]],"inputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(fma.f64 -1 (*.f64 y y) (+.f64 y (pow.f64 y 3)))","(+.f64 (-.f64 y (*.f64 y y)) (pow.f64 y 3))","(fma.f64 (*.f64 y y) (+.f64 y -1) y)","(*.f64 y (-.f64 (fma.f64 y y 1) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","(fma.f64 -1 (*.f64 y y) (+.f64 (pow.f64 y 3) (+.f64 y (neg.f64 (pow.f64 y 4)))))","(+.f64 (-.f64 y (pow.f64 y 4)) (*.f64 (*.f64 y y) (+.f64 -1 y)))","(fma.f64 (*.f64 y y) (+.f64 y -1) (-.f64 y (pow.f64 y 4)))","(*.f64 (fma.f64 y y 1) (-.f64 y (*.f64 y y)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (/.f64 1 y)))","(+.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 1 (*.f64 y y)))","(+.f64 1 (+.f64 (/.f64 1 (*.f64 y y)) (/.f64 -1 y)))","(+.f64 1 (+.f64 (/.f64 (/.f64 1 y) y) (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 1 (/.f64 1 (*.f64 y y))) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3)))))","(+.f64 1 (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 -1 y) (/.f64 -1 (pow.f64 y 3)))))","(+.f64 1 (-.f64 (/.f64 1 (*.f64 y y)) (-.f64 (/.f64 1 y) (/.f64 -1 (pow.f64 y 3)))))","(+.f64 (/.f64 (/.f64 1 y) y) (+.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 -1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (/.f64 1 y)))","(+.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 1 (*.f64 y y)))","(+.f64 1 (+.f64 (/.f64 1 (*.f64 y y)) (/.f64 -1 y)))","(+.f64 1 (+.f64 (/.f64 (/.f64 1 y) y) (/.f64 -1 y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 1 (/.f64 1 (*.f64 y y))) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3)))))","(+.f64 1 (+.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 -1 y) (/.f64 -1 (pow.f64 y 3)))))","(+.f64 1 (-.f64 (/.f64 1 (*.f64 y y)) (-.f64 (/.f64 1 y) (/.f64 -1 (pow.f64 y 3)))))","(+.f64 (/.f64 (/.f64 1 y) y) (+.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 -1 (pow.f64 y 3))))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 x (+.f64 y 1)) y)","(*.f64 y (/.f64 x (+.f64 y 1)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 y (-.f64 x (*.f64 y x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(fma.f64 y x (fma.f64 -1 (*.f64 (*.f64 y y) x) (*.f64 (pow.f64 y 3) x)))","(fma.f64 y x (*.f64 x (*.f64 (*.f64 y y) (+.f64 -1 y))))","(*.f64 x (fma.f64 (*.f64 y y) (+.f64 y -1) y))","(*.f64 (*.f64 y (-.f64 (fma.f64 y y 1) y)) x)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","(fma.f64 y x (fma.f64 -1 (*.f64 (*.f64 y y) x) (fma.f64 (pow.f64 y 3) x (*.f64 (neg.f64 (pow.f64 y 4)) x))))","(fma.f64 y x (-.f64 (*.f64 x (*.f64 (*.f64 y y) (+.f64 -1 y))) (*.f64 (pow.f64 y 4) x)))","(*.f64 x (fma.f64 (*.f64 y y) (+.f64 y -1) (-.f64 y (pow.f64 y 4))))","(*.f64 (fma.f64 y y 1) (*.f64 y (-.f64 x (*.f64 y x))))","(*.f64 (-.f64 y (*.f64 y y)) (*.f64 (fma.f64 y y 1) x))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(fma.f64 -1 (/.f64 x y) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y)))","(+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(fma.f64 -1 (/.f64 x (pow.f64 y 3)) (+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y))))","(-.f64 (+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y))) (/.f64 x (pow.f64 y 3)))","(+.f64 x (-.f64 (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 3))) (/.f64 x y)))","(+.f64 x (-.f64 (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)) (/.f64 x y)))","(+.f64 (-.f64 x (/.f64 x y)) (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(fma.f64 -1 (/.f64 x y) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y)))","(+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(fma.f64 -1 (/.f64 x (pow.f64 y 3)) (+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y))))","(-.f64 (+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y))) (/.f64 x (pow.f64 y 3)))","(+.f64 x (-.f64 (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 3))) (/.f64 x y)))","(+.f64 x (-.f64 (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)) (/.f64 x y)))","(+.f64 (-.f64 x (/.f64 x y)) (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)))"]],"stop":[["node limit",1]],"time":41.428955078125,"type":"simplify"},{"compiler":[[951,592]],"time":12.386962890625,"type":"eval"},{"alts":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","next",0.0078125],["(*.f64 x (/.f64 y (+.f64 y 1)))","done",0.0078125]],"compiler":[[11,8],[9,6],[11,8]],"count":[[87,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[85,1],"picked":[1,1]}],"min-error":[0],"time":18.109130859375,"type":"prune"},{"compiler":[[35,23]],"locations":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))",0.00390625,true],["(/.f64 y (+.f64 y 1))",0.00390625,false],["(log1p.f64 (/.f64 y (+.f64 y 1)))",0.0078125,true],["(expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1))))",0.01953125,true]],"time":11.408935546875,"type":"localize"},{"count":[[3,48]],"series":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","y","-inf",0.1689453125],["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","y","inf",0.18603515625],["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","y","0",0.177978515625],["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","x","-inf",0.181884765625],["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","x","inf",0.1630859375],["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","x","0",0.1748046875],["(log1p.f64 (/.f64 y (+.f64 y 1)))","y","-inf",0.26416015625],["(log1p.f64 (/.f64 y (+.f64 y 1)))","y","inf",0.27392578125],["(log1p.f64 (/.f64 y (+.f64 y 1)))","y","0",0.324951171875],["(expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1))))","y","-inf",0.2060546875],["(expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1))))","y","inf",0.208984375],["(expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1))))","y","0",0.257080078125]],"time":2.77294921875,"type":"series"},{"count":[[3,79]],"egraph":[[2,2206,26,0.025223583],[1,168,26,0.0037647500000000003],[0,9,26,0.000240792]],"inputs":[["(expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1))))","(log1p.f64 (/.f64 y (+.f64 y 1)))","(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 2) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (+.f64 y 1))) (sqrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (+.f64 (neg.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (+.f64 y 1)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 y (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (cbrt.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (+.f64 y 1))) (/.f64 y (sqrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (sqrt.f64 (+.f64 y 1))) (/.f64 (cbrt.f64 y) (sqrt.f64 (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (+.f64 1 (pow.f64 y 3))) (fma.f64 y y (-.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (fma.f64 y y -1)) (+.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 y 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (+.f64 y 1) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 (+.f64 y 1) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 y) (/.f64 (+.f64 y 1) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (+.f64 (neg.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 (+.f64 y 1) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 y)) (neg.f64 (+.f64 (neg.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (sqrt.f64 (+.f64 y 1))) (sqrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) 3) 1) (+.f64 (*.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) (+.f64 1 (/.f64 y (+.f64 y 1)))) (+.f64 1 (*.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) (+.f64 1 (/.f64 y (+.f64 y 1)))) 1) (+.f64 (+.f64 1 (/.f64 y (+.f64 y 1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y 1) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (pow.f64 (cbrt.f64 (+.f64 y 1)) 2)) (cbrt.f64 (+.f64 y 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (+.f64 y 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (+.f64 y 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (+.f64 y 1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 y 1) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (+.f64 (neg.f64 y) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (+.f64 y 1) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 y) (log1p.f64 y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (/.f64 y (+.f64 y 1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (/.f64 y (+.f64 y 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))) (pow.f64 (cbrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))) 2) (cbrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))) (sqrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (/.f64 y (+.f64 y 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (/.f64 y (+.f64 y 1))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (/.f64 y (+.f64 y 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (/.f64 y (+.f64 y 1))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (/.f64 y (+.f64 y 1)) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (+.f64 y 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y x) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 y) x) (+.f64 (neg.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x y) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 y)) (+.f64 (neg.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 y (+.f64 y 1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 y (+.f64 y 1)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 y (+.f64 y 1)) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (/.f64 y (+.f64 y 1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 y (+.f64 y 1)) x)))))))"]],"rules":[["egg-rr",18],["egg-rr",15],["egg-rr",46]],"stop":[["node limit",1]],"time":51.81005859375,"type":"rewrite"},{"count":[[127,122]],"egraph":[[4,6331,548,0.031494292],[3,1825,548,0.016234375000000002],[2,559,560,0.004694],[1,202,573,0.001464125],[0,71,603,0.000396167]],"inputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","y","(+.f64 y (*.f64 -3/2 (pow.f64 y 2)))","(+.f64 (*.f64 7/3 (pow.f64 y 3)) (+.f64 y (*.f64 -3/2 (pow.f64 y 2))))","(+.f64 (*.f64 7/3 (pow.f64 y 3)) (+.f64 (*.f64 -15/4 (pow.f64 y 4)) (+.f64 y (*.f64 -3/2 (pow.f64 y 2)))))","(log.f64 2)","(-.f64 (log.f64 2) (*.f64 1/2 (/.f64 1 y)))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (*.f64 1/2 (/.f64 1 y)))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (+.f64 (*.f64 7/24 (/.f64 1 (pow.f64 y 3))) (*.f64 1/2 (/.f64 1 y))))","(log.f64 2)","(-.f64 (log.f64 2) (*.f64 1/2 (/.f64 1 y)))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (*.f64 1/2 (/.f64 1 y)))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (+.f64 (*.f64 7/24 (/.f64 1 (pow.f64 y 3))) (*.f64 1/2 (/.f64 1 y))))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 1 y))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))"]],"method":["egg-herbie"],"outputs":[["y","(+.f64 (*.f64 -1 (pow.f64 y 2)) y)","(fma.f64 -1 (*.f64 y y) y)","(-.f64 y (*.f64 y y))","(fma.f64 y (neg.f64 y) y)","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) y))","(fma.f64 -1 (*.f64 y y) (+.f64 y (pow.f64 y 3)))","(+.f64 (-.f64 y (*.f64 y y)) (pow.f64 y 3))","(*.f64 y (-.f64 (fma.f64 y y 1) y))","(+.f64 (*.f64 -1 (pow.f64 y 2)) (+.f64 (pow.f64 y 3) (+.f64 y (*.f64 -1 (pow.f64 y 4)))))","(fma.f64 -1 (*.f64 y y) (+.f64 (+.f64 y (pow.f64 y 3)) (neg.f64 (pow.f64 y 4))))","(+.f64 (-.f64 y (pow.f64 y 4)) (*.f64 (*.f64 y y) (+.f64 -1 y)))","(-.f64 (*.f64 y (-.f64 (fma.f64 y y 1) y)) (pow.f64 y 4))","(*.f64 (fma.f64 y y 1) (fma.f64 y (neg.f64 y) y))","(*.f64 (fma.f64 y y 1) (-.f64 y (*.f64 y y)))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (/.f64 1 y)))","(+.f64 1 (-.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 y)))","(+.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 1 (*.f64 y y)))","(+.f64 (-.f64 1 (/.f64 1 y)) (/.f64 1 (*.f64 y y)))","(-.f64 1 (+.f64 (/.f64 1 y) (/.f64 (/.f64 -1 y) y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 1 (/.f64 1 (*.f64 y y))) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(+.f64 1 (-.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3)))))","(+.f64 (+.f64 1 (/.f64 -1 y)) (-.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (+.f64 1 (/.f64 (/.f64 1 y) y)) (+.f64 (/.f64 -1 y) (/.f64 -1 (pow.f64 y 3))))","1","(-.f64 1 (/.f64 1 y))","(+.f64 1 (/.f64 -1 y))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (/.f64 1 y))","(+.f64 (/.f64 1 (*.f64 y y)) (-.f64 1 (/.f64 1 y)))","(+.f64 1 (-.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 y)))","(+.f64 (+.f64 1 (/.f64 -1 y)) (/.f64 1 (*.f64 y y)))","(+.f64 (-.f64 1 (/.f64 1 y)) (/.f64 1 (*.f64 y y)))","(-.f64 1 (+.f64 (/.f64 1 y) (/.f64 (/.f64 -1 y) y)))","(-.f64 (+.f64 (/.f64 1 (pow.f64 y 2)) 1) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(-.f64 (+.f64 1 (/.f64 1 (*.f64 y y))) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3))))","(+.f64 1 (-.f64 (/.f64 1 (*.f64 y y)) (+.f64 (/.f64 1 y) (/.f64 1 (pow.f64 y 3)))))","(+.f64 (+.f64 1 (/.f64 -1 y)) (-.f64 (/.f64 1 (*.f64 y y)) (/.f64 1 (pow.f64 y 3))))","(+.f64 (+.f64 1 (/.f64 (/.f64 1 y) y)) (+.f64 (/.f64 -1 y) (/.f64 -1 (pow.f64 y 3))))","y","(+.f64 y (*.f64 -3/2 (pow.f64 y 2)))","(+.f64 y (*.f64 (*.f64 y y) -3/2))","(fma.f64 (*.f64 y y) -3/2 y)","(fma.f64 y (*.f64 y -3/2) y)","(+.f64 (*.f64 7/3 (pow.f64 y 3)) (+.f64 y (*.f64 -3/2 (pow.f64 y 2))))","(fma.f64 7/3 (pow.f64 y 3) (+.f64 y (*.f64 (*.f64 y y) -3/2)))","(fma.f64 (pow.f64 y 3) 7/3 (fma.f64 (*.f64 y y) -3/2 y))","(fma.f64 y (*.f64 y -3/2) (fma.f64 (pow.f64 y 3) 7/3 y))","(+.f64 (*.f64 7/3 (pow.f64 y 3)) (+.f64 (*.f64 -15/4 (pow.f64 y 4)) (+.f64 y (*.f64 -3/2 (pow.f64 y 2)))))","(fma.f64 7/3 (pow.f64 y 3) (fma.f64 -15/4 (pow.f64 y 4) (+.f64 y (*.f64 (*.f64 y y) -3/2))))","(fma.f64 (pow.f64 y 3) 7/3 (fma.f64 (pow.f64 y 4) -15/4 (fma.f64 (*.f64 y y) -3/2 y)))","(fma.f64 (pow.f64 y 3) 7/3 (fma.f64 y (*.f64 y -3/2) (fma.f64 (pow.f64 y 4) -15/4 y)))","(+.f64 y (*.f64 (*.f64 y y) (+.f64 (*.f64 y (+.f64 7/3 (*.f64 y -15/4))) -3/2)))","(log.f64 2)","(-.f64 (log.f64 2) (*.f64 1/2 (/.f64 1 y)))","(-.f64 (log.f64 2) (/.f64 1/2 y))","(+.f64 (log.f64 2) (/.f64 -1/2 y))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (*.f64 1/2 (/.f64 1 y)))","(+.f64 (log.f64 2) (-.f64 (/.f64 3/8 (*.f64 y y)) (/.f64 1/2 y)))","(+.f64 (/.f64 3/8 (*.f64 y y)) (+.f64 (log.f64 2) (/.f64 -1/2 y)))","(+.f64 (log.f64 2) (+.f64 (/.f64 (/.f64 3/8 y) y) (/.f64 -1/2 y)))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (+.f64 (*.f64 7/24 (/.f64 1 (pow.f64 y 3))) (*.f64 1/2 (/.f64 1 y))))","(+.f64 (log.f64 2) (-.f64 (/.f64 3/8 (*.f64 y y)) (+.f64 (/.f64 1/2 y) (/.f64 7/24 (pow.f64 y 3)))))","(-.f64 (+.f64 (/.f64 3/8 (*.f64 y y)) (+.f64 (log.f64 2) (/.f64 -1/2 y))) (/.f64 7/24 (pow.f64 y 3)))","(-.f64 (+.f64 (/.f64 (/.f64 3/8 y) y) (/.f64 -1/2 y)) (-.f64 (/.f64 7/24 (pow.f64 y 3)) (log.f64 2)))","(+.f64 (log.f64 2) (+.f64 (/.f64 (/.f64 3/8 y) y) (-.f64 (/.f64 -7/24 (pow.f64 y 3)) (/.f64 1/2 y))))","(+.f64 (log.f64 2) (+.f64 (+.f64 (/.f64 (/.f64 3/8 y) y) (/.f64 -1/2 y)) (/.f64 -7/24 (pow.f64 y 3))))","(log.f64 2)","(-.f64 (log.f64 2) (*.f64 1/2 (/.f64 1 y)))","(-.f64 (log.f64 2) (/.f64 1/2 y))","(+.f64 (log.f64 2) (/.f64 -1/2 y))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (*.f64 1/2 (/.f64 1 y)))","(+.f64 (log.f64 2) (-.f64 (/.f64 3/8 (*.f64 y y)) (/.f64 1/2 y)))","(+.f64 (/.f64 3/8 (*.f64 y y)) (+.f64 (log.f64 2) (/.f64 -1/2 y)))","(+.f64 (log.f64 2) (+.f64 (/.f64 (/.f64 3/8 y) y) (/.f64 -1/2 y)))","(-.f64 (+.f64 (log.f64 2) (*.f64 3/8 (/.f64 1 (pow.f64 y 2)))) (+.f64 (*.f64 7/24 (/.f64 1 (pow.f64 y 3))) (*.f64 1/2 (/.f64 1 y))))","(+.f64 (log.f64 2) (-.f64 (/.f64 3/8 (*.f64 y y)) (+.f64 (/.f64 1/2 y) (/.f64 7/24 (pow.f64 y 3)))))","(-.f64 (+.f64 (/.f64 3/8 (*.f64 y y)) (+.f64 (log.f64 2) (/.f64 -1/2 y))) (/.f64 7/24 (pow.f64 y 3)))","(-.f64 (+.f64 (/.f64 (/.f64 3/8 y) y) (/.f64 -1/2 y)) (-.f64 (/.f64 7/24 (pow.f64 y 3)) (log.f64 2)))","(+.f64 (log.f64 2) (+.f64 (/.f64 (/.f64 3/8 y) y) (-.f64 (/.f64 -7/24 (pow.f64 y 3)) (/.f64 1/2 y))))","(+.f64 (log.f64 2) (+.f64 (+.f64 (/.f64 (/.f64 3/8 y) y) (/.f64 -1/2 y)) (/.f64 -7/24 (pow.f64 y 3))))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(/.f64 (*.f64 y x) (+.f64 1 y))","(/.f64 (*.f64 y x) (+.f64 y 1))","(*.f64 (/.f64 y (+.f64 y 1)) x)","(*.f64 x (/.f64 y (+.f64 y 1)))","(*.f64 y (/.f64 x (+.f64 y 1)))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 (*.f64 (pow.f64 y 2) x)))","(fma.f64 y x (*.f64 (neg.f64 (*.f64 y y)) x))","(*.f64 x (-.f64 y (*.f64 y y)))","(*.f64 (fma.f64 y (neg.f64 y) y) x)","(*.f64 (-.f64 1 y) (*.f64 y x))","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (*.f64 (pow.f64 y 3) x)))","(fma.f64 y x (fma.f64 -1 (*.f64 (*.f64 y y) x) (*.f64 (pow.f64 y 3) x)))","(fma.f64 y x (*.f64 x (*.f64 (*.f64 y y) (+.f64 -1 y))))","(*.f64 x (*.f64 y (-.f64 (fma.f64 y y 1) y)))","(*.f64 (*.f64 y (-.f64 (fma.f64 y y 1) y)) x)","(+.f64 (*.f64 y x) (+.f64 (*.f64 -1 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 (pow.f64 y 3) x) (*.f64 -1 (*.f64 (pow.f64 y 4) x)))))","(fma.f64 y x (fma.f64 -1 (*.f64 (*.f64 y y) x) (fma.f64 (pow.f64 y 3) x (*.f64 (neg.f64 (pow.f64 y 4)) x))))","(fma.f64 y x (-.f64 (*.f64 x (*.f64 (*.f64 y y) (+.f64 -1 y))) (*.f64 (pow.f64 y 4) x)))","(*.f64 x (-.f64 (*.f64 y (-.f64 (fma.f64 y y 1) y)) (pow.f64 y 4)))","(*.f64 (fma.f64 y y 1) (*.f64 (fma.f64 y (neg.f64 y) y) x))","(*.f64 (fma.f64 y y 1) (*.f64 (-.f64 1 y) (*.f64 y x)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(fma.f64 -1 (/.f64 x y) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y)))","(+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y)))","(-.f64 (/.f64 x (*.f64 y y)) (-.f64 (/.f64 x y) x))","(+.f64 (-.f64 x (/.f64 x y)) (/.f64 x (*.f64 y y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(fma.f64 -1 (/.f64 x (pow.f64 y 3)) (+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y))))","(-.f64 (+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y))) (/.f64 x (pow.f64 y 3)))","(+.f64 (-.f64 x (/.f64 x y)) (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 3))))","(+.f64 (-.f64 x (/.f64 x y)) (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)))","(+.f64 x (-.f64 (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)) (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 x y)) x)","(fma.f64 -1 (/.f64 x y) x)","(-.f64 x (/.f64 x y))","(+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x))","(+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y)))","(+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y)))","(-.f64 (/.f64 x (*.f64 y y)) (-.f64 (/.f64 x y) x))","(+.f64 (-.f64 x (/.f64 x y)) (/.f64 x (*.f64 y y)))","(+.f64 (*.f64 -1 (/.f64 x (pow.f64 y 3))) (+.f64 (/.f64 x (pow.f64 y 2)) (+.f64 (*.f64 -1 (/.f64 x y)) x)))","(fma.f64 -1 (/.f64 x (pow.f64 y 3)) (+.f64 (fma.f64 -1 (/.f64 x y) x) (/.f64 x (*.f64 y y))))","(-.f64 (+.f64 x (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x y))) (/.f64 x (pow.f64 y 3)))","(+.f64 (-.f64 x (/.f64 x y)) (-.f64 (/.f64 x (*.f64 y y)) (/.f64 x (pow.f64 y 3))))","(+.f64 (-.f64 x (/.f64 x y)) (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)))","(+.f64 x (-.f64 (/.f64 (-.f64 x (/.f64 x y)) (*.f64 y y)) (/.f64 x y)))"]],"stop":[["node limit",1]],"time":53.85009765625,"type":"simplify"},{"compiler":[[2142,1450]],"time":28.948974609375,"type":"eval"},{"alts":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","done",0.0078125],["(*.f64 x (/.f64 y (+.f64 y 1)))","done",0.0078125]],"compiler":[[11,8],[9,6]],"count":[[171,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[169,0],"picked":[1,1]}],"min-error":[0],"time":44.448974609375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(/.f64 (*.f64 x y) (+.f64 y 1))",0.0078125,1]],"compiler":[[3,2],[3,2],[9,6],[25,16]],"count":[[3,1]],"inputs":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))","(*.f64 x (/.f64 y (+.f64 y 1)))","(/.f64 (*.f64 x y) (+.f64 y 1))"]],"link":["."],"name":["Diagrams.Trail:splitAtParam  from diagrams-lib-1.3.0.3, B"],"oracle":[8.0625],"outputs":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))"]],"time":8.52294921875,"times":[["x",2.64599609375],["y",2.711181640625],["(/.f64 (*.f64 x y) (+.f64 y 1))",2.47802734375]],"type":"regimes"},{"compiler":[[11,8]],"egraph":[[1,13,14,4.35e-5],[0,9,14,2.7333e-5]],"inputs":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 x (expm1.f64 (log1p.f64 (/.f64 y (+.f64 y 1)))))"]],"stop":[["done",1],["saturated",1]],"time":8.407958984375,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[11,8]],"remove-preprocessing":[[]],"time":8.426025390625,"type":"end"}]
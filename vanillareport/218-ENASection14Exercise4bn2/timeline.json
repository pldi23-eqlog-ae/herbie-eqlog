[{"compiler":[[26,19]],"method":["search"],"sampling":[[1,0.25679552221004087,0.0,0.7432044777899591],[0,0.0,0.25679552221004087,0.7432044777899591]],"time":0.296142578125,"type":"analyze"},{"outcomes":[["body",512,"valid",107.5166015625,1052],["body",1024,"valid",151.030517578125,998],["body",2048,"valid",5.81640625,27],["body",256,"valid",341.163330078125,6179]],"time":614.218017578125,"type":"sample"},{"compiler":[[11,8]],"egraph":[[0,2,2,1.875e-6],[5,4509,20,0.021515791],[4,1173,20,0.008322666],[3,270,26,0.002137333],[2,76,26,0.000589083],[1,32,26,0.00021475],[0,12,26,7.5083e-5]],"inputs":[["0","1"],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","(-.f64 (pow.f64 (+.f64 eps x) 2) (pow.f64 eps 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","(-.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 x x))","(*.f64 eps (+.f64 eps (+.f64 x x)))","(*.f64 eps (+.f64 x (+.f64 x eps)))","(-.f64 (pow.f64 (+.f64 eps x) 2) (pow.f64 eps 2))","(-.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 eps eps))","(*.f64 x (+.f64 x (+.f64 eps eps)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":45.06591796875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,2828,8,0.016125917],[4,636,8,0.005110417],[3,161,13,0.0012933749999999998],[2,49,13,0.00041141699999999997],[1,19,13,0.00015625],[0,8,13,5.1042e-5]],"inputs":[["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))","(-.f64 (pow.f64 (+.f64 x eps) 2) (*.f64 x x))","(fma.f64 x (neg.f64 x) (pow.f64 (+.f64 x eps) 2))","(*.f64 eps (fma.f64 2 x eps))"]],"stop":[["node limit",1]],"time":26.945068359375,"type":"simplify"},{"compiler":[[17,11]],"time":0.3798828125,"type":"eval"},{"alts":[["(*.f64 eps (fma.f64 2 x eps))","next",0.01171875]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.01171875],"time":0.7939453125,"type":"prune"},{"compiler":[[15,8]],"locations":[["(*.f64 eps (fma.f64 2 x eps))",0.01171875,true]],"time":3.830078125,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 eps (fma.f64 2 x eps))","x","-inf",0.337890625],["(*.f64 eps (fma.f64 2 x eps))","x","inf",0.375],["(*.f64 eps (fma.f64 2 x eps))","x","0",0.44677734375],["(*.f64 eps (fma.f64 2 x eps))","eps","-inf",0.468017578125],["(*.f64 eps (fma.f64 2 x eps))","eps","inf",0.450927734375],["(*.f64 eps (fma.f64 2 x eps))","eps","0",0.486083984375]],"time":2.64599609375,"type":"series"},{"count":[[1,13]],"egraph":[[2,1364,8,0.014894458999999999],[1,120,8,0.001893292],[0,6,8,0.000175792]],"inputs":[["(*.f64 eps (fma.f64 2 x eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 eps (*.f64 2 x)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 eps (fma.f64 2 x eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 eps (fma.f64 2 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 eps (fma.f64 2 x eps))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 eps) (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 eps (fma.f64 2 x eps))))))))"]],"rules":[["egg-rr",13]],"stop":[["node limit",1]],"time":31.591064453125,"type":"rewrite"},{"count":[[37,19]],"egraph":[[19,7941,177,0.10545891599999999],[18,7669,177,0.09630362399999999],[17,7379,177,0.08680895699999999],[16,6986,177,0.07763754099999999],[15,6136,177,0.068305124],[14,5436,177,0.057906957999999994],[13,4864,177,0.048917958],[12,4351,177,0.041052791],[11,3931,177,0.033283083],[10,3616,177,0.026837541],[9,3394,177,0.021097540999999997],[8,3172,177,0.016073083],[7,2817,177,0.011560375],[6,1565,177,0.007331832999999999],[5,467,177,0.0035001669999999998],[4,166,177,0.001306458],[3,75,177,0.000616083],[2,37,213,0.000323541],[1,18,231,0.00016858299999999998],[0,8,267,6.7083e-5]],"inputs":[["(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 (*.f64 eps x))","(*.f64 eps (*.f64 x 2))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(*.f64 2 (*.f64 eps x))","(*.f64 eps (*.f64 x 2))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(*.f64 2 (*.f64 eps x))","(*.f64 eps (*.f64 x 2))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 2 (*.f64 eps x)) (*.f64 eps eps))","(fma.f64 eps eps (*.f64 eps (*.f64 x 2)))","(*.f64 eps (+.f64 (*.f64 2 x) eps))","(*.f64 eps (fma.f64 2 x eps))"]],"stop":[["node limit",1]],"time":123.16796875,"type":"simplify"},{"compiler":[[147,90]],"time":2.64990234375,"type":"eval"},{"alts":[["(*.f64 eps (fma.f64 2 x eps))","done",0.01171875],["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","next",0.02734375]],"compiler":[[8,5],[11,7],[11,7]],"count":[[20,2]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[19,1],"picked":[1,1]}],"min-error":[0],"time":2.89501953125,"type":"prune"},{"compiler":[[25,13]],"locations":[["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))",0.02734375,true]],"time":5.43603515625,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","eps","-inf",0.2099609375],["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","eps","inf",0.344970703125],["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","eps","0",0.366943359375],["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","x","-inf",0.22900390625],["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","x","inf",0.60302734375],["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","x","0",0.375]],"time":2.212158203125,"type":"series"},{"count":[[1,40]],"egraph":[[2,2324,8,0.021002624999999997],[1,174,8,0.003157333],[0,8,10,0.000223791]],"inputs":[["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 eps (fma.f64 2 x eps))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (*.f64 eps (-.f64 (*.f64 2 x) eps))) (/.f64 (pow.f64 eps 4) (*.f64 eps (-.f64 (*.f64 2 x) eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 eps (fma.f64 2 x eps))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 eps (fma.f64 2 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 eps (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))) (pow.f64 (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))) 2) (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 eps) 2) (*.f64 (cbrt.f64 eps) (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 eps (fma.f64 2 x eps))) (sqrt.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 eps) (*.f64 (sqrt.f64 eps) (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 8 (pow.f64 (*.f64 x eps) 3)) (pow.f64 eps 6)) (/.f64 1 (+.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (-.f64 (pow.f64 eps 4) (*.f64 (*.f64 2 x) (pow.f64 eps 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (pow.f64 eps 4)) (/.f64 1 (*.f64 eps (-.f64 (*.f64 2 x) eps))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 2 x eps) eps)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (-.f64 (pow.f64 eps 4) (*.f64 (*.f64 2 x) (pow.f64 eps 3)))) (+.f64 (*.f64 8 (pow.f64 (*.f64 x eps) 3)) (pow.f64 eps 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 eps (-.f64 (*.f64 2 x) eps)) (-.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (pow.f64 eps 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 8 (pow.f64 (*.f64 x eps) 3)) (pow.f64 eps 6)) (+.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (-.f64 (pow.f64 eps 4) (*.f64 (*.f64 2 x) (pow.f64 eps 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 8 (pow.f64 (*.f64 x eps) 3)) (pow.f64 eps 6)) (+.f64 (pow.f64 eps 4) (-.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (*.f64 (*.f64 2 x) (pow.f64 eps 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (pow.f64 eps 4)) (*.f64 eps (-.f64 (*.f64 2 x) eps)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 8 (pow.f64 (*.f64 x eps) 3)) (pow.f64 eps 6))) (neg.f64 (+.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (-.f64 (pow.f64 eps 4) (*.f64 (*.f64 2 x) (pow.f64 eps 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 2 (*.f64 x eps)) 2) (pow.f64 eps 4))) (neg.f64 (*.f64 eps (-.f64 (*.f64 2 x) eps))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 eps 4) (pow.f64 (*.f64 2 (*.f64 x eps)) 2)) (-.f64 (*.f64 eps eps) (*.f64 2 (*.f64 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 eps (fma.f64 2 x eps)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 eps (fma.f64 2 x eps))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 eps (fma.f64 2 x eps))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 eps) (fma.f64 2 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 eps (fma.f64 2 x eps)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 eps (fma.f64 2 x eps))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 (*.f64 x eps) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 2 x) eps (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps (*.f64 2 x) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 eps eps (*.f64 2 (*.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 2 (*.f64 x eps)) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 eps eps) (*.f64 2 (*.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 2 (*.f64 x eps))) 2) (cbrt.f64 (*.f64 2 (*.f64 x eps))) (*.f64 eps eps))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 eps 4)) (pow.f64 (cbrt.f64 eps) 2) (*.f64 2 (*.f64 x eps)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 2 (*.f64 x eps))) (sqrt.f64 (*.f64 2 (*.f64 x eps))) (*.f64 eps eps))))))"]],"rules":[["egg-rr",40]],"stop":[["node limit",1]],"time":40.060791015625,"type":"rewrite"},{"count":[[64,45]],"egraph":[[19,7952,177,0.105047999],[18,7674,177,0.095970041],[17,7386,177,0.086554291],[16,6991,177,0.077449666],[15,6141,177,0.068192624],[14,5449,177,0.057768374],[13,4875,177,0.048782499],[12,4360,177,0.041007791],[11,3938,177,0.033377208000000005],[10,3621,177,0.026876958000000003],[9,3399,177,0.021138624],[8,3177,177,0.016102874],[7,2822,177,0.011575624],[6,1568,177,0.007342541],[5,469,177,0.0035019160000000003],[4,168,177,0.0013005830000000001],[3,75,177,0.000609041],[2,37,213,0.000326249],[1,18,231,0.000171166],[0,8,267,6.7458e-5]],"inputs":[["(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(*.f64 2 (*.f64 eps x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(pow.f64 eps 2)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (*.f64 2 x) eps)","(*.f64 eps (*.f64 2 x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (*.f64 2 x) eps)","(*.f64 eps (*.f64 2 x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(*.f64 2 (*.f64 eps x))","(*.f64 (*.f64 2 x) eps)","(*.f64 eps (*.f64 2 x))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(pow.f64 eps 2)","(*.f64 eps eps)","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))","(+.f64 (pow.f64 eps 2) (*.f64 2 (*.f64 eps x)))","(+.f64 (*.f64 eps eps) (*.f64 2 (*.f64 eps x)))","(fma.f64 eps eps (*.f64 (*.f64 2 x) eps))","(*.f64 eps (+.f64 eps (*.f64 2 x)))","(*.f64 eps (fma.f64 2 x eps))"]],"stop":[["node limit",1]],"time":122.798095703125,"type":"simplify"},{"compiler":[[613,375]],"time":7.742919921875,"type":"eval"},{"alts":[["(*.f64 eps (fma.f64 2 x eps))","done",0.01171875],["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","done",0.02734375]],"compiler":[[8,5],[11,7]],"count":[[47,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[45,0],"picked":[1,1]}],"min-error":[0],"time":6.718994140625,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["eps",0.01171875,1],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))",0.01171875,1]],"compiler":[[3,2],[3,2],[11,8],[26,16]],"count":[[3,1]],"inputs":[["(+.f64 (*.f64 (*.f64 2 x) eps) (*.f64 eps eps))","(*.f64 eps (fma.f64 2 x eps))","(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))"]],"link":["."],"name":["ENA, Section 1.4, Exercise 4b, n=2"],"oracle":[14.370493393754275],"outputs":[["(*.f64 eps (fma.f64 2 x eps))"]],"time":8.940185546875,"times":[["x",3.012939453125],["eps",2.993896484375],["(-.f64 (pow.f64 (+.f64 x eps) 2) (pow.f64 x 2))",2.199951171875]],"type":"regimes"},{"compiler":[[8,5]],"egraph":[[1,7,8,2.5626e-5],[0,6,8,1.5542e-5]],"inputs":[["(*.f64 eps (fma.f64 2 x eps))"]],"method":["egg-herbie"],"outputs":[["(*.f64 eps (fma.f64 2 x eps))"]],"stop":[["done",1],["saturated",1]],"time":8.184814453125,"type":"simplify"},{"time":0.01416015625,"type":"soundness"},{"compiler":[[8,5]],"remove-preprocessing":[[]],"time":7.546875,"type":"end"}]
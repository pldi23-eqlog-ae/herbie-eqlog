[{"compiler":[[11,9]],"method":["search"],"sampling":[[12,0.7486577033996582,0.0009760856628417969,0.2503662109375],[11,0.7476816177368164,0.0019521713256835938,0.2503662109375],[10,0.7457294464111328,0.0039043426513671875,0.2503662109375],[9,0.7418251037597656,0.007808685302734375,0.2503662109375],[8,0.7340164184570313,0.01561737060546875,0.2503662109375],[7,0.7183990478515625,0.0312347412109375,0.2503662109375],[6,0.687164306640625,0.062469482421875,0.2503662109375],[5,0.62469482421875,0.12493896484375,0.2503662109375],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.43310546875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.06005859375,2],["body",512,"valid",74.547607421875,1375],["body",1024,"valid",214.1181640625,2773],["body",2048,"valid",28.765380859375,282],["body",256,"valid",117.668701171875,3826]],"time":443.575927734375,"type":"sample"},{"compiler":[[10,8]],"egraph":[[0,1,1,1.75e-6],[7,7895,7,0.034524666],[6,5410,7,0.025371125],[5,1967,7,0.012638709000000001],[4,571,7,0.004683917],[3,134,7,0.001436251],[2,55,7,0.000425417],[1,22,10,0.000182501],[0,6,11,6.2667e-5]],"inputs":[["0"],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)","(fma.f64 (+.f64 x 1) (+.f64 x 1) -1)","(*.f64 (+.f64 x 2) (+.f64 x 0))","(*.f64 x (+.f64 x 2))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":58.364990234375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[7,7895,7,0.033806417000000005],[6,5410,7,0.024551584],[5,1967,7,0.012278876],[4,571,7,0.004580376],[3,134,7,0.0014275009999999999],[2,55,7,0.00042495900000000004],[1,22,10,0.000178667],[0,6,11,5.8667e-5]],"inputs":[["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)","(fma.f64 (+.f64 x 1) (+.f64 x 1) -1)","(*.f64 (+.f64 x 2) (+.f64 x 0))","(*.f64 x (+.f64 x 2))"]],"stop":[["node limit",1]],"time":44.840087890625,"type":"simplify"},{"compiler":[[15,11]],"time":0.352783203125,"type":"eval"},{"alts":[["(*.f64 x (+.f64 x 2))","next",0.0078125]],"compiler":[[6,4],[6,4]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.0078125],"time":0.748046875,"type":"prune"},{"compiler":[[11,7]],"locations":[["(*.f64 x (+.f64 x 2))",0.0078125,true]],"time":2.656005859375,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 x (+.f64 x 2))","x","-inf",0.411865234375],["(*.f64 x (+.f64 x 2))","x","inf",0.3759765625],["(*.f64 x (+.f64 x 2))","x","0",0.35107421875]],"time":1.18310546875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1488,7,0.015523625],[1,114,7,0.002095583],[0,5,7,0.000180583]],"inputs":[["(*.f64 x (+.f64 x 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1) (*.f64 (*.f64 x 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (+.f64 x 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x x) 3) (pow.f64 (*.f64 x 2) 3)) (+.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (-.f64 (*.f64 (*.f64 x 2) (*.f64 x 2)) (*.f64 (*.f64 x x) (*.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x 2) (*.f64 x 2))) (-.f64 (*.f64 x x) (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 8 (pow.f64 x 3)) x) (fma.f64 x x (-.f64 4 (*.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 x x -4) x) (+.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 8 (pow.f64 x 3))) (fma.f64 x x (-.f64 4 (*.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 x x -4)) (+.f64 x -2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 x 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 x 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 x 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 x 2))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":32.473876953125,"type":"rewrite"},{"count":[[33,26]],"egraph":[[21,7324,75,0.11610837300000001],[20,7290,75,0.10276037300000002],[19,7216,75,0.09212349800000001],[18,6940,75,0.08309245700000001],[17,6650,75,0.073714582],[16,6259,75,0.065297041],[15,5415,75,0.056974374],[14,4719,75,0.047838749],[13,4145,75,0.040048666],[12,3660,75,0.033360874],[11,3251,75,0.027014916],[10,2941,75,0.021331416],[9,2731,75,0.016564374],[8,2539,75,0.012570333],[7,2192,75,0.009008958],[6,1042,75,0.005327958],[5,311,75,0.0024085419999999996],[4,109,75,0.0009526669999999999],[3,50,75,0.000456751],[2,28,75,0.000254667],[1,14,75,0.000138251],[0,6,84,5.2667e-5]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))"]],"stop":[["node limit",1]],"time":130.175048828125,"type":"simplify"},{"compiler":[[248,156]],"time":3.52490234375,"type":"eval"},{"alts":[["(fma.f64 x x (*.f64 x 2))","next",0]],"compiler":[[7,4],[7,4]],"count":[[27,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[26,1],"picked":[1,0]}],"min-error":[0],"time":3.59619140625,"type":"prune"},{"compiler":[[12,7]],"time":3.059814453125,"type":"localize"},{"compiler":[[1,1]],"time":0.086181640625,"type":"eval"},{"alts":[["(fma.f64 x x (*.f64 x 2))","done",0]],"compiler":[[7,4]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.43994140625,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)",0,1],["(*.f64 (+.f64 x 1) (+.f64 x 1))",0,1],["(+.f64 x 1)",0,1]],"compiler":[[2,1],[10,8],[8,6],[4,3],[21,14]],"count":[[3,1]],"inputs":[["(fma.f64 x x (*.f64 x 2))","(*.f64 x (+.f64 x 2))","(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)"]],"link":["."],"name":["Expanding a square"],"oracle":[40.35326525728827],"outputs":[["(fma.f64 x x (*.f64 x 2))"]],"time":9.1279296875,"times":[["x",2.691162109375],["(-.f64 (*.f64 (+.f64 x 1) (+.f64 x 1)) 1)",1.866943359375],["(*.f64 (+.f64 x 1) (+.f64 x 1))",1.842041015625],["(+.f64 x 1)",2.052978515625]],"type":"regimes"},{"compiler":[[7,4]],"egraph":[[1,6,8,2.3292e-5],[0,5,8,1.3792e-5]],"inputs":[["(fma.f64 x x (*.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x x (*.f64 x 2))"]],"stop":[["done",1],["saturated",1]],"time":8.028076171875,"type":"simplify"},{"time":0.011962890625,"type":"soundness"},{"compiler":[[7,4]],"remove-preprocessing":[[]],"time":7.705078125,"type":"end"}]
[{"compiler":[[11,8]],"method":["search"],"sampling":[[12,0.4302435948047787,0.06292678427416831,0.506829620921053],[11,0.41560945892706513,0.09463407867588103,0.48975646239705384],[10,0.3941460596397519,0.12292674137279391,0.4829271989874542],[9,0.36682900600135326,0.18341450300067663,0.4497564909979701],[8,0.32780464366078377,0.23414617404341698,0.43804918229579926],[7,0.2809754088521004,0.34341438859701157,0.37561020255088806],[6,0.18731693923473358,0.43707285821437836,0.37561020255088806],[5,0.12487795948982239,0.6243897974491119,0.2507322430610657],[4,0.0,0.7492677569389343,0.2507322430610657],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":20.798095703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",16.6123046875,438],["body",512,"valid",0.06787109375,1],["body",256,"valid",328.288818359375,8255]],"time":352.89794921875,"type":"sample"},{"compiler":[[10,7]],"egraph":[[0,2,2,1.625e-6],[9,1218,20,0.019052707999999998],[8,1206,20,0.015775708],[7,1146,20,0.012220042],[6,983,20,0.008758458],[5,592,20,0.005434667000000001],[4,285,20,0.002285417],[3,130,20,0.0009161250000000001],[2,65,20,0.00039312500000000003],[1,26,20,0.000163666],[0,12,24,6.2958e-5]],"inputs":[["0","1"],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))","(+.f64 (-.f64 1 y) (*.f64 x (sqrt.f64 y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(+.f64 (-.f64 1 y) (*.f64 x (sqrt.f64 y)))","(fma.f64 x (sqrt.f64 y) (-.f64 1 y))","(-.f64 (fma.f64 x (sqrt.f64 y) 1) y)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":42.673095703125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[9,729,10,0.010104832],[8,715,10,0.00831679],[7,633,10,0.006479665],[6,509,10,0.00455604],[5,312,10,0.002791248],[4,150,10,0.001236707],[3,72,10,0.000535623],[2,37,10,0.000247707],[1,16,10,0.000112166],[0,8,12,4.6416e-5]],"inputs":[["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)"]],"stop":[["saturated",1]],"time":20.491943359375,"type":"simplify"},{"compiler":[[17,10]],"time":0.344970703125,"type":"eval"},{"alts":[["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","next",0.12109375]],"compiler":[[9,6],[9,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.12109375],"time":0.827880859375,"type":"prune"},{"compiler":[[19,9]],"locations":[["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)",0.00390625,true],["(fma.f64 y (sqrt.f64 x) 1)",0.17025375976844204,true]],"time":4.6240234375,"type":"localize"},{"count":[[2,28]],"series":[["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","x","-inf",0.23388671875],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","x","inf",0.22900390625],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","x","0",0.251953125],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","y","-inf",0.157958984375],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","y","inf",0.1640625],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","y","0",0.19677734375],["(fma.f64 y (sqrt.f64 x) 1)","x","-inf",0.534912109375],["(fma.f64 y (sqrt.f64 x) 1)","x","inf",0.52099609375],["(fma.f64 y (sqrt.f64 x) 1)","x","0",0.431884765625],["(fma.f64 y (sqrt.f64 x) 1)","y","-inf",0.362060546875],["(fma.f64 y (sqrt.f64 x) 1)","y","inf",0.308837890625],["(fma.f64 y (sqrt.f64 x) 1)","y","0",0.4091796875]],"time":3.951171875,"type":"series"},{"count":[[2,58]],"egraph":[[2,1846,17,0.018335],[1,144,17,0.0025355],[0,7,17,0.000187375]],"inputs":[["(fma.f64 y (sqrt.f64 x) 1)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (*.f64 y (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (sqrt.f64 x)) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (sqrt.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (sqrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (sqrt.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (sqrt.f64 x)) 3) 1) (+.f64 (*.f64 (*.f64 y (sqrt.f64 x)) (*.f64 y (sqrt.f64 x))) (-.f64 1 (*.f64 (*.f64 y (sqrt.f64 x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (sqrt.f64 x)) (*.f64 y (sqrt.f64 x))) 1) (-.f64 (*.f64 y (sqrt.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (sqrt.f64 x) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) 1) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 x)) (-.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 x)) (+.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (fma.f64 y (sqrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)) (pow.f64 (cbrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 2) (cbrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)) (sqrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x (+.f64 x (fma.f64 y (sqrt.f64 x) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x (+.f64 x (fma.f64 y (sqrt.f64 x) 1)))) (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (fma.f64 y (sqrt.f64 x) 1)) (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x (+.f64 x (fma.f64 y (sqrt.f64 x) 1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x)) (+.f64 x (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x (+.f64 x (fma.f64 y (sqrt.f64 x) 1))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x))) (neg.f64 (+.f64 x (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3) (pow.f64 (neg.f64 x) 3)) (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (fma.f64 y (sqrt.f64 x) 1) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (fma.f64 y (sqrt.f64 x) 1) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y (sqrt.f64 x) 1) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))))))"]],"rules":[["egg-rr",37],["egg-rr",21]],"stop":[["node limit",1]],"time":39.453857421875,"type":"rewrite"},{"count":[[86,66]],"egraph":[[11,842,190,0.012327667],[10,836,190,0.010547833],[9,744,190,0.008674],[8,606,190,0.006629125],[7,437,190,0.004678709],[6,283,190,0.00286125],[5,147,190,0.0015225],[4,88,190,0.0008189170000000001],[3,54,190,0.0004946250000000001],[2,32,190,0.00029625],[1,21,190,0.000162291],[0,11,190,7.5375e-5]],"inputs":[["1","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","1","(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","1","(*.f64 -1 x)","(*.f64 -1 x)"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(*.f64 y (sqrt.f64 x))","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","(+.f64 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (sqrt.f64 x) 1)","1","(-.f64 1 x)","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(*.f64 y (sqrt.f64 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","(-.f64 (+.f64 (*.f64 y (sqrt.f64 x)) 1) x)","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(fma.f64 y (sqrt.f64 x) (-.f64 1 x))","1","(*.f64 -1 x)","(neg.f64 x)","(*.f64 -1 x)","(neg.f64 x)"]],"stop":[["saturated",1]],"time":27.489013671875,"type":"simplify"},{"compiler":[[868,459]],"time":10.81103515625,"type":"eval"},{"alts":[["(*.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (fma.f64 y (sqrt.f64 x) 1))))","fresh",22.131855029305328],["(-.f64 (log1p.f64 (expm1.f64 (fma.f64 y (sqrt.f64 x) 1))) x)","fresh",28.75390625],["(-.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 3) x)","fresh",0.29533012698974626],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","next",0.2943726562950723],["(/.f64 1 (/.f64 (+.f64 x (fma.f64 y (sqrt.f64 x) 1)) (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x))))","fresh",22.12109375],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","done",0.12109375]],"compiler":[[23,15],[11,8],[12,9],[19,13],[23,15],[9,6],[23,15],[11,8],[12,9],[19,13],[23,15]],"count":[[67,6]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[66,5],"picked":[1,1]}],"min-error":[0.0546875],"time":13.97509765625,"type":"prune"},{"compiler":[[46,25]],"locations":[["(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))",0.07421875,true],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))",0.12337875976844201,true],["(fma.f64 y (sqrt.f64 x) 1)",0.17025375976844204,false],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)",0.2545700195368841,true]],"time":12.6669921875,"type":"localize"},{"count":[[3,19]],"series":[["(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))","x","-inf",0.773193359375],["(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))","x","inf",0.785888671875],["(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))","x","0",0.329833984375],["(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))","y","-inf",0.26318359375],["(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))","y","inf",0.257080078125],["(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))","y","0",0.2890625],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","x","-inf",1.82080078125],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","x","inf",1.269775390625],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","x","0",1.262939453125],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","y","-inf",0.2978515625],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","y","inf",0.450927734375],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","y","0",1.30908203125],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)","x","-inf",2.55712890625],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)","x","inf",3.31396484375],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)","x","0",0.928955078125],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)","y","-inf",0.39306640625],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)","y","inf",0.794189453125],["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)","y","0",0.97509765625]],"time":18.534912109375,"type":"series"},{"count":[[3,59]],"egraph":[[2,2371,31,0.022568542],[1,217,31,0.004554209],[0,11,33,0.000430167]],"inputs":[["(pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)","(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","(cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2) (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1/6) (*.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1/6) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2)) (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y (sqrt.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 y (sqrt.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (sqrt.f64 x)) (+.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 y (sqrt.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) 0) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)) (pow.f64 (cbrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 2) (cbrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)) (sqrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (-.f64 (*.f64 x x) (*.f64 (fma.f64 y (sqrt.f64 x) 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x)) (+.f64 (fma.f64 y (sqrt.f64 x) 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (fma.f64 y (sqrt.f64 x) 1) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2) (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1/6) (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 4))) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 1/3) (pow.f64 (sqrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))))))))"]],"rules":[["egg-rr",20],["egg-rr",23],["egg-rr",16]],"stop":[["node limit",1]],"time":47.94287109375,"type":"rewrite"},{"count":[[78,79]],"egraph":[[4,6543,201,0.035002],[3,4698,201,0.021572292],[2,950,213,0.009497792],[1,246,248,0.001862458],[0,78,288,0.000392625]],"inputs":[["1","(+.f64 1 (*.f64 2/3 (*.f64 y (sqrt.f64 x))))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 x) (*.f64 1/9 x))) (+.f64 1 (*.f64 2/3 (*.f64 y (sqrt.f64 x)))))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 x) (*.f64 1/9 x))) (+.f64 1 (+.f64 (*.f64 2/3 (*.f64 y (sqrt.f64 x))) (*.f64 (+.f64 (*.f64 -2/27 (sqrt.f64 (pow.f64 x 3))) (*.f64 -2/3 (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3)))))) (pow.f64 y 3)))))","1","(-.f64 1 x)","(-.f64 (+.f64 1 (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)) x)","(-.f64 (+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 1/9 x) (+.f64 (*.f64 -2/9 x) (+.f64 (*.f64 2/9 x) (*.f64 -1/9 x)))) (pow.f64 y 2)) (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y))) x)","(-.f64 (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -4/27 (sqrt.f64 (pow.f64 x 3))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3))))) (+.f64 (*.f64 -2/3 (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3))))) (*.f64 1/3 (*.f64 (+.f64 (*.f64 -2/9 x) (*.f64 1/9 x)) (sqrt.f64 x))))))) (+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 1/9 x) (+.f64 (*.f64 -2/9 x) (+.f64 (*.f64 2/9 x) (*.f64 -1/9 x)))) (pow.f64 y 2)) (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)))) x)","(*.f64 -1 x)","(*.f64 -1 x)","1","(*.f64 -1 x)","(*.f64 -1 x)","1","(+.f64 1 (*.f64 1/3 (*.f64 y (sqrt.f64 x))))","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 y (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (pow.f64 y 2) x))))","(+.f64 1 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3)))))) (+.f64 (*.f64 1/3 (*.f64 y (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (pow.f64 y 2) x)))))","1"]],"method":["egg-herbie"],"outputs":[["1","(+.f64 1 (*.f64 2/3 (*.f64 y (sqrt.f64 x))))","(+.f64 1 (*.f64 (*.f64 2/3 y) (sqrt.f64 x)))","(fma.f64 (*.f64 2/3 y) (sqrt.f64 x) 1)","(fma.f64 (sqrt.f64 x) (*.f64 2/3 y) 1)","(fma.f64 2/3 (*.f64 y (sqrt.f64 x)) 1)","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 x) (*.f64 1/9 x))) (+.f64 1 (*.f64 2/3 (*.f64 y (sqrt.f64 x)))))","(fma.f64 (*.f64 y y) (*.f64 x -1/9) (+.f64 1 (*.f64 (*.f64 2/3 y) (sqrt.f64 x))))","(fma.f64 (*.f64 y y) (*.f64 x -1/9) (fma.f64 (*.f64 2/3 y) (sqrt.f64 x) 1))","(fma.f64 2/3 (*.f64 y (sqrt.f64 x)) (fma.f64 y (*.f64 y (*.f64 x -1/9)) 1))","(+.f64 (*.f64 (pow.f64 y 2) (+.f64 (*.f64 -2/9 x) (*.f64 1/9 x))) (+.f64 1 (+.f64 (*.f64 2/3 (*.f64 y (sqrt.f64 x))) (*.f64 (+.f64 (*.f64 -2/27 (sqrt.f64 (pow.f64 x 3))) (*.f64 -2/3 (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3)))))) (pow.f64 y 3)))))","(fma.f64 (*.f64 y y) (*.f64 x -1/9) (+.f64 1 (fma.f64 2/3 (*.f64 y (sqrt.f64 x)) (*.f64 (fma.f64 -2/27 (sqrt.f64 (pow.f64 x 3)) (*.f64 -2/3 (*.f64 (sqrt.f64 (pow.f64 x 3)) -5/27))) (pow.f64 y 3)))))","(+.f64 (fma.f64 (*.f64 y y) (*.f64 x -1/9) (fma.f64 (*.f64 2/3 y) (sqrt.f64 x) 1)) (*.f64 (fma.f64 -2/27 (sqrt.f64 (pow.f64 x 3)) (*.f64 (sqrt.f64 (pow.f64 x 3)) 10/81)) (pow.f64 y 3)))","(fma.f64 y (*.f64 y (*.f64 x -1/9)) (fma.f64 2/3 (*.f64 y (sqrt.f64 x)) (fma.f64 (*.f64 (pow.f64 x 3/2) 4/81) (pow.f64 y 3) 1)))","1","(-.f64 1 x)","(-.f64 (+.f64 1 (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)) x)","(+.f64 1 (-.f64 (*.f64 y (*.f64 (sqrt.f64 x) 1)) x))","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(-.f64 (+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 1/9 x) (+.f64 (*.f64 -2/9 x) (+.f64 (*.f64 2/9 x) (*.f64 -1/9 x)))) (pow.f64 y 2)) (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y))) x)","(+.f64 1 (-.f64 (*.f64 y (*.f64 (sqrt.f64 x) 1)) x))","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(-.f64 (+.f64 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -4/27 (sqrt.f64 (pow.f64 x 3))) (+.f64 (*.f64 -1/3 (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3))))) (+.f64 (*.f64 -2/3 (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3))))) (*.f64 1/3 (*.f64 (+.f64 (*.f64 -2/9 x) (*.f64 1/9 x)) (sqrt.f64 x))))))) (+.f64 1 (+.f64 (*.f64 (+.f64 (*.f64 1/9 x) (+.f64 (*.f64 -2/9 x) (+.f64 (*.f64 2/9 x) (*.f64 -1/9 x)))) (pow.f64 y 2)) (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)))) x)","(-.f64 (fma.f64 (pow.f64 y 3) (fma.f64 -4/27 (sqrt.f64 (pow.f64 x 3)) (fma.f64 -1/3 (*.f64 (sqrt.f64 (pow.f64 x 3)) -5/27) (fma.f64 -2/3 (*.f64 (sqrt.f64 (pow.f64 x 3)) -5/27) (*.f64 1/3 (*.f64 (sqrt.f64 x) (*.f64 x -1/9)))))) (+.f64 1 (fma.f64 (fma.f64 1/9 x (*.f64 x -1/9)) (*.f64 y y) (*.f64 y (*.f64 (sqrt.f64 x) 1))))) x)","(+.f64 (fma.f64 (pow.f64 y 3) (fma.f64 (sqrt.f64 (pow.f64 x 3)) -4/27 (+.f64 (*.f64 (sqrt.f64 x) (*.f64 -1/27 x)) (*.f64 (*.f64 (sqrt.f64 (pow.f64 x 3)) -5/27) -1))) 1) (-.f64 (fma.f64 y (sqrt.f64 x) (*.f64 (*.f64 y y) (*.f64 x 0))) x))","(-.f64 (fma.f64 (pow.f64 y 3) (fma.f64 (pow.f64 x 3/2) -4/27 (fma.f64 (sqrt.f64 x) (*.f64 x -1/27) (*.f64 (pow.f64 x 3/2) 5/27))) (fma.f64 y (sqrt.f64 x) (fma.f64 (*.f64 y y) 0 1))) x)","(fma.f64 (pow.f64 y 3) (+.f64 (*.f64 (pow.f64 x 3/2) 1/27) (*.f64 (sqrt.f64 x) (*.f64 x -1/27))) (-.f64 (fma.f64 y (sqrt.f64 x) 1) x))","(*.f64 -1 x)","(neg.f64 x)","(*.f64 -1 x)","(neg.f64 x)","1","(*.f64 -1 x)","(neg.f64 x)","(*.f64 -1 x)","(neg.f64 x)","1","(+.f64 1 (*.f64 1/3 (*.f64 y (sqrt.f64 x))))","(+.f64 1 (*.f64 (*.f64 y (sqrt.f64 x)) 1/3))","(fma.f64 1/3 (*.f64 y (sqrt.f64 x)) 1)","(fma.f64 y (*.f64 (sqrt.f64 x) 1/3) 1)","(+.f64 1 (+.f64 (*.f64 1/3 (*.f64 y (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (pow.f64 y 2) x))))","(+.f64 1 (fma.f64 1/3 (*.f64 y (sqrt.f64 x)) (*.f64 (*.f64 -1/9 (*.f64 y y)) x)))","(+.f64 1 (fma.f64 1/3 (*.f64 y (sqrt.f64 x)) (*.f64 y (*.f64 y (*.f64 x -1/9)))))","(fma.f64 y (*.f64 y (*.f64 x -1/9)) (fma.f64 y (*.f64 (sqrt.f64 x) 1/3) 1))","(fma.f64 y (*.f64 y (*.f64 x -1/9)) (fma.f64 1/3 (*.f64 y (sqrt.f64 x)) 1))","(+.f64 1 (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 y 3) (+.f64 (*.f64 -2/9 (sqrt.f64 (pow.f64 x 3))) (*.f64 1/27 (sqrt.f64 (pow.f64 x 3)))))) (+.f64 (*.f64 1/3 (*.f64 y (sqrt.f64 x))) (*.f64 -1/9 (*.f64 (pow.f64 y 2) x)))))","(+.f64 1 (fma.f64 -1/3 (*.f64 (*.f64 (sqrt.f64 (pow.f64 x 3)) -5/27) (pow.f64 y 3)) (fma.f64 1/3 (*.f64 y (sqrt.f64 x)) (*.f64 (*.f64 -1/9 (*.f64 y y)) x))))","(+.f64 (+.f64 1 (fma.f64 1/3 (*.f64 y (sqrt.f64 x)) (*.f64 y (*.f64 y (*.f64 x -1/9))))) (*.f64 (pow.f64 y 3) (*.f64 (sqrt.f64 (pow.f64 x 3)) 5/81)))","(fma.f64 (pow.f64 y 3) (*.f64 (pow.f64 x 3/2) 5/81) (fma.f64 y (*.f64 y (*.f64 x -1/9)) (fma.f64 y (*.f64 (sqrt.f64 x) 1/3) 1)))","(fma.f64 (pow.f64 y 3) (*.f64 (pow.f64 x 3/2) 5/81) (fma.f64 y (*.f64 y (*.f64 x -1/9)) (fma.f64 1/3 (*.f64 y (sqrt.f64 x)) 1)))","1"]],"stop":[["node limit",1]],"time":52.107177734375,"type":"simplify"},{"compiler":[[3211,1870]],"time":44.1640625,"type":"eval"},{"alts":[["(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 3) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","fresh",0.4867952896331449],["(*.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (fma.f64 y (sqrt.f64 x) 1))))","fresh",22.131855029305328],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","done",0.12109375],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2)) (neg.f64 x))","fresh",0.3596877804623597],["(fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 4)) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","fresh",6.7087288574528605],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (-.f64 (+.f64 1 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 1) (neg.f64 x))","fresh",0.2904664062950723],["(/.f64 1 (/.f64 (+.f64 x (fma.f64 y (sqrt.f64 x) 1)) (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x))))","fresh",22.12109375],["(fma.f64 (pow.f64 y 3) (+.f64 (*.f64 (pow.f64 x 3/2) 1/27) (*.f64 (sqrt.f64 x) (*.f64 x -1/27))) (-.f64 (fma.f64 y (sqrt.f64 x) 1) x))","fresh",27.467728643776827],["(-.f64 (+.f64 1 (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)) x)","next",0.162441259768442]],"compiler":[[22,16],[23,15],[9,6],[30,21],[20,14],[23,17],[23,15],[25,17],[17,12],[22,16],[23,15],[30,21],[20,14],[23,17],[23,15],[25,17],[17,12]],"count":[[159,9]],"kept":[{"done":[1,1],"fresh":[4,2],"new":[153,6],"picked":[1,0]}],"min-error":[0.02734375],"time":50.344970703125,"type":"prune"},{"compiler":[[65,38]],"locations":[["(+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x)))",0.2109375,true],["(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)",0.2265625,true],["(*.f64 2/3 (sqrt.f64 x))",0.3125,true],["(*.f64 1/3 (sqrt.f64 x))",0.3125,true]],"time":14.309814453125,"type":"localize"},{"count":[[4,0]],"series":[["(+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x)))","x","-inf",0.4970703125],["(+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x)))","x","inf",0.43310546875],["(+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x)))","x","0",0.410888671875],["(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)","y","-inf",0.302978515625],["(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)","y","inf",0.376953125],["(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)","y","0",0.638916015625],["(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)","x","-inf",0.5869140625],["(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)","x","inf",0.41796875],["(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)","x","0",0.47900390625],["(*.f64 2/3 (sqrt.f64 x))","x","-inf",0.343017578125],["(*.f64 2/3 (sqrt.f64 x))","x","inf",0.31396484375],["(*.f64 2/3 (sqrt.f64 x))","x","0",0.2890625],["(*.f64 1/3 (sqrt.f64 x))","x","-inf",0.3740234375],["(*.f64 1/3 (sqrt.f64 x))","x","inf",0.31591796875],["(*.f64 1/3 (sqrt.f64 x))","x","0",0.434814453125]],"time":6.4912109375,"type":"series"},{"count":[[4,109]],"egraph":[[2,2755,21,0.027987957],[1,214,21,0.005211541],[0,10,27,0.000352958]],"inputs":[["(*.f64 1/3 (sqrt.f64 x))","(*.f64 2/3 (sqrt.f64 x))","(*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)","(+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 x)) 1/3 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (sqrt.f64 x)) (fma.f64 -1/3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (sqrt.f64 x)) (fma.f64 (neg.f64 (*.f64 1/3 (sqrt.f64 x))) 1 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (sqrt.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 1/3 (sqrt.f64 x)))) (cbrt.f64 (*.f64 x 1/9)) (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (sqrt.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 1/3 (sqrt.f64 x)))) (sqrt.f64 (*.f64 1/3 (sqrt.f64 x))) (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) 2/3) (neg.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) 2/3) (*.f64 -1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) 2/3) (*.f64 (neg.f64 (sqrt.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) 2/3) (*.f64 -1 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) 2/3) (*.f64 (neg.f64 (cbrt.f64 (*.f64 x 1/9))) (cbrt.f64 (*.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (sqrt.f64 x) 2/3) (*.f64 (neg.f64 (sqrt.f64 (*.f64 1/3 (sqrt.f64 x)))) (sqrt.f64 (*.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sqrt.f64 x) 2/3) (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 1/3 (sqrt.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2))) (+.f64 (*.f64 x 4/9) (+.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 (sqrt.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/3 (sqrt.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/27 (pow.f64 x 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x 1/9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 1/3 (sqrt.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 2/3) (sqrt.f64 x)) (pow.f64 (exp.f64 1/3) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 1/27 (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 2/3 (neg.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 (sqrt.f64 x) (neg.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 x) 2/3) (neg.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 4/9)) (cbrt.f64 (*.f64 (sqrt.f64 x) 2/3)) (neg.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) 2/3)) (sqrt.f64 (*.f64 (sqrt.f64 x) 2/3)) (neg.f64 (*.f64 1/3 (sqrt.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 x) 2/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) 2/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) 2/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) 2/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/27 (pow.f64 x 3/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x 4/9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 2/3) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) 2/3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 8/27 (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) 2/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 1/3 (sqrt.f64 x)) y) (*.f64 (*.f64 (sqrt.f64 x) 2/3) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (sqrt.f64 x) 2/3) y) (*.f64 (*.f64 1/3 (sqrt.f64 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 1/3 (sqrt.f64 x))) (*.f64 y (*.f64 (sqrt.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 (sqrt.f64 x) 2/3)) (*.f64 y (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (sqrt.f64 x) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2))) y) (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)) y) (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2)))) (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))) (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (sqrt.f64 x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3/2) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 y 3) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sqrt.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x 4/9) (*.f64 1/3 (sqrt.f64 x))) (/.f64 (*.f64 x 1/9) (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sqrt.f64 x)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/4) (pow.f64 x 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2))) (/.f64 1 (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)) (/.f64 1 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 x) 2)) (sqrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 1/2) (pow.f64 (cbrt.f64 x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))) (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 1/3 (sqrt.f64 x)) (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2))) (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2))) (+.f64 (*.f64 x 1/9) (-.f64 (*.f64 x 4/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)) (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2)))) (neg.f64 (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))) (neg.f64 (*.f64 1/3 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x 1/9) (*.f64 x 4/9)) (-.f64 (*.f64 1/3 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) 2/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sqrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/3 (sqrt.f64 x) (*.f64 (sqrt.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 1/3 (*.f64 (sqrt.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) 2/3 (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2/3 (sqrt.f64 x) (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 1/3 (sqrt.f64 x)) (*.f64 (sqrt.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (sqrt.f64 x) 2/3) (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 1/9)) (cbrt.f64 (*.f64 1/3 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x 4/9)) (cbrt.f64 (*.f64 (sqrt.f64 x) 2/3)) (*.f64 1/3 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 1/3 (sqrt.f64 x))) (sqrt.f64 (*.f64 1/3 (sqrt.f64 x))) (*.f64 (sqrt.f64 x) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) 2/3)) (sqrt.f64 (*.f64 (sqrt.f64 x) 2/3)) (*.f64 1/3 (sqrt.f64 x)))))))"]],"rules":[["egg-rr",43],["egg-rr",22],["egg-rr",12],["egg-rr",32]],"stop":[["node limit",1]],"time":58.451904296875,"type":"rewrite"},{"count":[[109,109]],"egraph":[[0,0,0,2.825e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":11.81591796875,"type":"simplify"},{"compiler":[[1963,1281]],"time":24.8701171875,"type":"eval"},{"alts":[["(-.f64 (+.f64 1 (*.f64 (/.f64 1 (/.f64 (*.f64 1/3 (sqrt.f64 x)) (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)))) y)) x)","fresh",0.18035126953688402],["(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 3) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","fresh",0.4867952896331449],["(-.f64 (+.f64 1 (+.f64 (*.f64 y (*.f64 1/3 (sqrt.f64 x))) (*.f64 y (*.f64 (sqrt.f64 x) 2/3)))) x)","fresh",0.15986254884221007],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","done",0.12109375],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2)) (neg.f64 x))","fresh",0.3596877804623597],["(-.f64 (+.f64 1 (*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)) x)","next",0.154628759768442],["(-.f64 (+.f64 1 (/.f64 (*.f64 y (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))) (*.f64 1/3 (sqrt.f64 x)))) x)","fresh",5.611660009768442],["(-.f64 (+.f64 1 (/.f64 (*.f64 y (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2)))) (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))) x)","fresh",15.463854215412518],["(fma.f64 (pow.f64 y 3) (+.f64 (*.f64 (pow.f64 x 3/2) 1/27) (*.f64 (sqrt.f64 x) (*.f64 x -1/27))) (-.f64 (fma.f64 y (sqrt.f64 x) 1) x))","fresh",27.467728643776827]],"compiler":[[22,17],[22,16],[19,13],[9,6],[30,21],[14,10],[20,15],[37,29],[25,17],[22,17],[22,16],[19,13],[30,21],[14,10],[20,15],[37,29],[25,17]],"count":[[118,9]],"kept":[{"done":[1,1],"fresh":[7,3],"new":[109,5],"picked":[1,0]}],"min-error":[0],"time":36.68994140625,"type":"prune"},{"compiler":[[48,13]],"locations":[["(cbrt.f64 x)",0.0390625,true],["(cbrt.f64 (sqrt.f64 x))",0.11328125,true],["(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)",0.2265625,true],["(*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)))",0.35546875,true]],"time":9.2490234375,"type":"localize"},{"count":[[4,20]],"series":[["(cbrt.f64 x)","x","-inf",0.3349609375],["(cbrt.f64 x)","x","inf",0.283935546875],["(cbrt.f64 x)","x","0",0.26708984375],["(cbrt.f64 (sqrt.f64 x))","x","-inf",1.385986328125],["(cbrt.f64 (sqrt.f64 x))","x","inf",5.989990234375],["(cbrt.f64 (sqrt.f64 x))","x","0",7.423095703125],["(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)","y","-inf",0.257080078125],["(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)","y","inf",0.26904296875],["(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)","y","0",0.219970703125],["(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)","x","-inf",0.632080078125],["(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)","x","inf",0.27685546875],["(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)","x","0",0.2900390625],["(*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)))","x","-inf",32.60009765625],["(*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)))","x","inf",0.255126953125],["(*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)))","x","0",0.362060546875]],"time":51.14794921875,"type":"series"},{"count":[[4,67]],"egraph":[[2,1594,16,0.019446625999999998],[1,160,16,0.0025366670000000003],[0,8,17,0.000226042]],"inputs":[["(*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x)))","(*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)","(cbrt.f64 (sqrt.f64 x))","(cbrt.f64 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sqrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sqrt.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 x) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 x) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 x (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 x) y)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (pow.f64 x 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 x 1/6)) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (cbrt.f64 (pow.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) 1/6) (pow.f64 (sqrt.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2)) (sqrt.f64 (cbrt.f64 (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 x 1/4) 1/3) (pow.f64 (pow.f64 x 1/4) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 x 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sqrt.f64 x) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (pow.f64 x 1/6)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/6) (pow.f64 x 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 x)) (*.f64 (cbrt.f64 (pow.f64 x 1/6)) (pow.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 x)) 2) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 x) 1/6) (pow.f64 x 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 1/4) (pow.f64 (sqrt.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 x) 2) 1/3) (cbrt.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 x 1/6) (cbrt.f64 (cbrt.f64 x))) (cbrt.f64 (pow.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 x 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 x) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 x 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 x)))))))"]],"rules":[["egg-rr",22],["egg-rr",21],["egg-rr",11],["egg-rr",13]],"stop":[["node limit",1]],"time":45.696044921875,"type":"rewrite"},{"count":[[87,68]],"egraph":[[24,7866,104,0.133925916],[23,7400,104,0.123356374],[22,6423,104,0.110378791],[21,5480,104,0.09267966600000001],[20,5398,104,0.078215374],[19,5220,104,0.070079082],[18,4998,104,0.062611166],[17,4714,104,0.055455833],[16,4391,104,0.048416666000000004],[15,3666,104,0.041996166],[14,3063,104,0.032709875],[13,2558,104,0.026551958],[12,2131,104,0.020963083],[11,1806,104,0.015898125],[10,1569,104,0.012307583],[9,1408,104,0.009582041],[8,1272,104,0.007370958],[7,1182,104,0.005234333],[6,518,104,0.003168791],[5,131,104,0.00142425],[4,49,104,0.000626583],[3,27,104,0.000345499],[2,18,104,0.000225458],[1,13,104,0.00014595800000000001],[0,7,104,6.6916e-5]],"inputs":[["(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)"]],"method":["egg-herbie"],"outputs":[["(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(*.f64 y (sqrt.f64 x))","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)","(pow.f64 x 1/6)"]],"stop":[["node limit",1]],"time":153.7490234375,"type":"simplify"},{"compiler":[[930,534]],"time":11.599853515625,"type":"eval"},{"alts":[["(-.f64 (+.f64 1 (*.f64 (/.f64 1 (/.f64 (*.f64 1/3 (sqrt.f64 x)) (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)))) y)) x)","fresh",0.18035126953688402],["(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 3) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","fresh",0.4867952896331449],["(-.f64 (+.f64 1 (+.f64 (*.f64 y (*.f64 1/3 (sqrt.f64 x))) (*.f64 y (*.f64 (sqrt.f64 x) 2/3)))) x)","fresh",0.15986254884221007],["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","done",0.12109375],["(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2)) (neg.f64 x))","fresh",0.3596877804623597],["(-.f64 (+.f64 1 (*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)) x)","done",0.154628759768442],["(-.f64 (+.f64 1 (/.f64 (*.f64 y (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))) (*.f64 1/3 (sqrt.f64 x)))) x)","fresh",5.611660009768442],["(-.f64 (+.f64 1 (/.f64 (*.f64 y (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2)))) (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))) x)","fresh",15.463854215412518],["(fma.f64 (pow.f64 y 3) (+.f64 (*.f64 (pow.f64 x 3/2) 1/27) (*.f64 (sqrt.f64 x) (*.f64 x -1/27))) (-.f64 (fma.f64 y (sqrt.f64 x) 1) x))","fresh",27.467728643776827]],"compiler":[[22,17],[22,16],[19,13],[9,6],[30,21],[14,10],[20,15],[37,29],[25,17]],"count":[[77,9]],"kept":[{"done":[1,1],"fresh":[7,7],"new":[68,0],"picked":[1,1]}],"min-error":[0],"time":17.248046875,"type":"prune"},{"accuracy":[0.12109375],"baseline":[0.12109375],"branch":[["x",0.12109375,1],["y",0.12109375,1],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))",0.12109375,1]],"compiler":[[3,2],[3,2],[10,7],[322,199]],"count":[[18,1]],"inputs":[["(-.f64 (+.f64 1 (*.f64 (/.f64 1 (/.f64 (*.f64 1/3 (sqrt.f64 x)) (-.f64 (*.f64 x 4/9) (*.f64 x 1/9)))) y)) x)","(-.f64 (+.f64 1 (+.f64 (*.f64 y (*.f64 1/3 (sqrt.f64 x))) (*.f64 y (*.f64 (sqrt.f64 x) 2/3)))) x)","(-.f64 (+.f64 1 (*.f64 (*.f64 (cbrt.f64 x) (cbrt.f64 (sqrt.f64 x))) y)) x)","(-.f64 (+.f64 1 (/.f64 (*.f64 y (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))) (*.f64 1/3 (sqrt.f64 x)))) x)","(-.f64 (+.f64 1 (/.f64 (*.f64 y (+.f64 (*.f64 8/27 (pow.f64 x 3/2)) (*.f64 1/27 (pow.f64 x 3/2)))) (+.f64 (*.f64 x 4/9) (-.f64 (*.f64 x 1/9) (*.f64 2/3 (-.f64 (*.f64 x 4/9) (*.f64 x 1/9))))))) x)","(fma.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 3) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (*.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 2)) (neg.f64 x))","(fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 4)) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (-.f64 (+.f64 1 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1))) 1) (neg.f64 x))","(fma.f64 (pow.f64 y 3) (+.f64 (*.f64 (pow.f64 x 3/2) 1/27) (*.f64 (sqrt.f64 x) (*.f64 x -1/27))) (-.f64 (fma.f64 y (sqrt.f64 x) 1) x))","(-.f64 (+.f64 1 (*.f64 (+.f64 (*.f64 2/3 (sqrt.f64 x)) (*.f64 1/3 (sqrt.f64 x))) y)) x)","(*.f64 (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (fma.f64 y (sqrt.f64 x) 1))))","(-.f64 (log1p.f64 (expm1.f64 (fma.f64 y (sqrt.f64 x) 1))) x)","(-.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 3) x)","(fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) 2) (cbrt.f64 (fma.f64 y (sqrt.f64 x) 1)) (neg.f64 x))","(/.f64 1 (/.f64 (+.f64 x (fma.f64 y (sqrt.f64 x) 1)) (-.f64 (pow.f64 (fma.f64 y (sqrt.f64 x) 1) 2) (*.f64 x x))))","(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)","(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, E"],"oracle":[34.32259750976844],"outputs":[["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)"]],"time":29.47900390625,"times":[["x",6.91796875],["y",7.403076171875],["(+.f64 (-.f64 1 x) (*.f64 y (sqrt.f64 x)))",6.119873046875]],"type":"regimes"},{"compiler":[[9,6]],"egraph":[[4,18,10,0.000108417],[3,17,10,8.7959e-5],[2,15,10,6.7084e-5],[1,11,10,4.7249999999999997e-5],[0,7,10,2.55e-5]],"inputs":[["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (fma.f64 y (sqrt.f64 x) 1) x)"]],"stop":[["fuel",1],["saturated",1]],"time":9.321044921875,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[9,6]],"remove-preprocessing":[[]],"time":9.0,"type":"end"}]
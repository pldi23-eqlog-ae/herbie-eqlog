[{"compiler":[[16,11]],"method":["search"],"sampling":[[12,0.2866890099496686,0.21257892574499238,0.500732064305339],[11,0.24573343709971596,0.25353449859494503,0.500732064305339],[10,0.2106286603711851,0.2886392753234759,0.500732064305339],[9,0.1404191069141234,0.3588488287805376,0.500732064305339],[8,0.09361273794274894,0.6552891655992426,0.2510980964580085],[7,0.062408491961832624,0.6864934115801589,0.2510980964580085],[6,0.0,0.7489019035419915,0.2510980964580085],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":59.573974609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",2.08447265625,41],["body",1024,"valid",0.1640625,1],["body",512,"valid",0.197998046875,2],["body",256,"valid",438.1904296875,8253]],"time":447.97412109375,"type":"sample"},{"compiler":[[15,10]],"egraph":[[0,3,3,2.25e-6],[9,7960,64,0.063906043],[8,7748,64,0.055909167999999995],[7,7487,64,0.04746946],[6,6454,64,0.03804221],[5,4936,64,0.025605335],[4,3186,64,0.014525376],[3,1069,64,0.006571751],[2,242,64,0.001702042],[1,75,72,0.000426542],[0,26,72,0.00010825]],"inputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","(-.f64 (+.f64 (-.f64 y (*.f64 (+.f64 x 1/2) (log.f64 x))) x) z)","(-.f64 (+.f64 (-.f64 z (*.f64 (+.f64 y 1/2) (log.f64 y))) y) x)","(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 z 1/2) (log.f64 z))) z) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) (-.f64 y z))","(+.f64 (-.f64 x z) (fma.f64 (log.f64 y) (-.f64 -1/2 y) y))","(+.f64 x (-.f64 y (fma.f64 (-.f64 y -1/2) (log.f64 y) z)))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) x) (-.f64 y z))","(-.f64 (+.f64 (-.f64 y (*.f64 (+.f64 x 1/2) (log.f64 x))) x) z)","(+.f64 (-.f64 y (*.f64 (+.f64 x 1/2) (log.f64 x))) (-.f64 x z))","(+.f64 x (-.f64 (-.f64 y (*.f64 (+.f64 x 1/2) (log.f64 x))) z))","(+.f64 x (-.f64 (fma.f64 (log.f64 x) (-.f64 -1/2 x) y) z))","(+.f64 x (fma.f64 (log.f64 x) (-.f64 -1/2 x) (-.f64 y z)))","(+.f64 y (fma.f64 (log.f64 x) (-.f64 -1/2 x) (-.f64 x z)))","(-.f64 (+.f64 (-.f64 z (*.f64 (+.f64 y 1/2) (log.f64 y))) y) x)","(+.f64 (-.f64 z (*.f64 (+.f64 y 1/2) (log.f64 y))) (-.f64 y x))","(+.f64 y (-.f64 (-.f64 z (*.f64 (+.f64 y 1/2) (log.f64 y))) x))","(+.f64 y (-.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) z) x))","(-.f64 z (fma.f64 (-.f64 y -1/2) (log.f64 y) (-.f64 x y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 z x)))","(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 z 1/2) (log.f64 z))) z) y)","(+.f64 (-.f64 x (*.f64 (+.f64 1/2 z) (log.f64 z))) (-.f64 z y))","(+.f64 x (fma.f64 (log.f64 z) (-.f64 -1/2 z) (-.f64 z y)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":88.322021484375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[13,7990,16,0.091446335],[12,6392,16,0.080587377],[11,5524,16,0.067342127],[10,5214,16,0.057227544000000005],[9,5197,16,0.047083085000000004],[8,5170,16,0.03954396],[7,5005,16,0.031549668],[6,4513,16,0.022858293000000002],[5,2897,16,0.014675918],[4,983,16,0.007092251000000001],[3,313,16,0.001991918],[2,77,16,0.000586293],[1,25,18,0.000175376],[0,11,18,5.1417e-5]],"inputs":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)"]],"method":["egg-herbie"],"outputs":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","(-.f64 (-.f64 x (-.f64 (*.f64 (+.f64 y 1/2) (log.f64 y)) y)) z)","(+.f64 y (-.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) z))","(+.f64 x (fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z)))","(+.f64 x (-.f64 y (fma.f64 (+.f64 y 1/2) (log.f64 y) z)))","(+.f64 x (-.f64 y (fma.f64 (-.f64 y -1/2) (log.f64 y) z)))"]],"stop":[["node limit",1]],"time":103.341796875,"type":"simplify"},{"compiler":[[26,15]],"time":0.416015625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","next",0.11556625976844202]],"compiler":[[15,10],[15,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.11556625976844202],"time":0.89111328125,"type":"prune"},{"compiler":[[48,25]],"locations":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)",0.00390625,true],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))",0.0078125,true],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)",0.09765625,true],["(*.f64 (+.f64 y 1/2) (log.f64 y))",0.171875,true]],"time":11.468017578125,"type":"localize"},{"count":[[4,96]],"series":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","z","-inf",0.196044921875],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","z","inf",0.26904296875],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","z","0",0.975830078125],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","y","-inf",0.2841796875],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","y","inf",0.24609375],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","y","0",0.197998046875],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","x","-inf",0.218017578125],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","x","inf",0.172119140625],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","x","0",0.199951171875],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","y","-inf",0.2421875],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","y","inf",0.18798828125],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","y","0",0.205078125],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","x","-inf",0.149169921875],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","x","inf",0.189208984375],["(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","x","0",0.178955078125],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)","y","-inf",0.31201171875],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)","y","inf",0.22607421875],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)","y","0",0.23291015625],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)","x","-inf",0.195068359375],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)","x","inf",0.263916015625],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)","x","0",1.869140625],["(*.f64 (+.f64 y 1/2) (log.f64 y))","y","-inf",2.526123046875],["(*.f64 (+.f64 y 1/2) (log.f64 y))","y","inf",1.2177734375],["(*.f64 (+.f64 y 1/2) (log.f64 y))","y","0",3.1708984375]],"time":14.306884765625,"type":"series"},{"count":[[4,341]],"egraph":[[2,4127,54,0.031003333],[1,264,54,0.005327458],[0,11,54,0.000319958]],"inputs":[["(*.f64 (+.f64 y 1/2) (log.f64 y))","(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)","(-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y)))","(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (pow.f64 y (+.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 y)) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (log.f64 y)) (log.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) y) (*.f64 (log.f64 y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) 1/2) (*.f64 (log.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (pow.f64 y (+.f64 y 1/2))) (cbrt.f64 (pow.f64 y (+.f64 y 1/2))))) (log.f64 (cbrt.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (+.f64 y 1/2)))) (log.f64 (sqrt.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 1/8 (pow.f64 y 3)) (log.f64 y)) (-.f64 (fma.f64 y y 1/4) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y y -1/4) (log.f64 y)) (+.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (+.f64 1/8 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1/4) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (log.f64 y) (fma.f64 y y -1/4)) (+.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (+.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (pow.f64 y (+.f64 y 1/2)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 y (+.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (log.f64 y) (log.f64 (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (log.f64 y) (*.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) y (*.f64 (log.f64 y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) 1/2 (*.f64 (log.f64 y) y))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 x (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y))) (/.f64 (*.f64 y y) (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 y x) (log.f64 (pow.f64 y (+.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (pow.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 2) (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (-.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 y y)) (/.f64 1 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y (-.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2)) (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 y 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y)) (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 y 3)) (fma.f64 y (-.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 y 3)) (fma.f64 y y (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 y y)) (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 y 3))) (neg.f64 (fma.f64 y (-.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 y y))) (neg.f64 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) 3)) (fma.f64 x x (fma.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (*.f64 x (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y))) (+.f64 x (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 y y) (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2)) (-.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (/.f64 (pow.f64 y (+.f64 y 1/2)) (exp.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (/.f64 (pow.f64 y (+.f64 y 1/2)) (exp.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 y)) (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 y) (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 y)) (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (exp.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (+.f64 1 (expm1.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 (+.f64 y 1/2) (neg.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 (+.f64 y 1/2) (neg.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 2) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 y) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (fma.f64 (+.f64 y 1/2) (neg.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (fma.f64 (+.f64 y 1/2) (neg.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (fma.f64 (+.f64 y 1/2) (neg.f64 (log.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (/.f64 1 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (/.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)) y)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) y)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2)))) (cbrt.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2)))))) (log.f64 (cbrt.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))))) (log.f64 (sqrt.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (/.f64 1 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (/.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x)) (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (fma.f64 (+.f64 y 1/2) (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3))) (neg.f64 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2))) (neg.f64 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3)) (fma.f64 x x (-.f64 (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (*.f64 x (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (-.f64 x (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 y (+.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (+.f64 1 (-.f64 (pow.f64 y (+.f64 y 1/2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (-.f64 (pow.f64 y (+.f64 y 1/2)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (/.f64 1 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (/.f64 1 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 y (+.f64 y 1/2))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 y (+.f64 y 1/2))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1/2) (neg.f64 (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) (neg.f64 (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (/.f64 1 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (/.f64 1 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (/.f64 1 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (/.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (/.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (/.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (cbrt.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (cbrt.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (log.f64 (pow.f64 y (+.f64 y 1/2))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (+.f64 (neg.f64 y) -1/2) (log.f64 y) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (neg.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2)) (cbrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) 1) (log.f64 y) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) x)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 z) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y z) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 (-.f64 y z)))) (cbrt.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 (-.f64 y z)))))) (log.f64 (cbrt.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 (-.f64 y z))))) (log.f64 (sqrt.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 (-.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2) (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 z z)) (/.f64 1 (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 z (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2)) (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 z 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 z z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 z 3)) (fma.f64 z (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 z z)) (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 z 3))) (neg.f64 (fma.f64 z (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 z z))) (neg.f64 (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 (-.f64 y z) 3)) (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (-.f64 (*.f64 (-.f64 y z) (-.f64 y z)) (*.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 (neg.f64 z) 3)) (+.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (-.f64 (*.f64 (neg.f64 z) (neg.f64 z)) (*.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (neg.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 (-.f64 y z) (-.f64 y z))) (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 (neg.f64 z) (neg.f64 z))) (-.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))) (exp.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 y)) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))) (+.f64 1 (expm1.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (exp.f64 (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (/.f64 (exp.f64 y) (exp.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (/.f64 (exp.f64 y) (exp.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))) (exp.f64 (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 y)) (/.f64 1 (exp.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))) (/.f64 1 (exp.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 z)) (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 z)) (*.f64 (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2))) (exp.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 z)) (+.f64 1 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 z)) (+.f64 1 (expm1.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 y z)) (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 y) (exp.f64 z)) (/.f64 (exp.f64 x) (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 y z)) (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 y) (exp.f64 z)) (+.f64 1 (expm1.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 1 (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (+.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (-.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 1 (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 1 (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 1 (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 1 (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 1 (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) 1 (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (+.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (-.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 z) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 y z) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2) (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2) (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) 2) (cbrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (cbrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 y) (pow.f64 (cbrt.f64 y) 2) (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (cbrt.f64 y) (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (pow.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 2) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (pow.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 2) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 2) (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) 2) (cbrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (neg.f64 (cbrt.f64 z)) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (+.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (-.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (+.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (-.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (sqrt.f64 (+.f64 y (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (sqrt.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (sqrt.f64 y) (-.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (neg.f64 (sqrt.f64 z)) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (+.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (-.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (-.f64 (-.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) y) (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2))) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 3) (pow.f64 z 3)) (/.f64 1 (fma.f64 z (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z)) (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2))) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (/.f64 1 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 3)) (/.f64 1 (fma.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) (fma.f64 (+.f64 y 1/2) (log.f64 y) x) (*.f64 x x))) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (-.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 3) (pow.f64 y 3)) (/.f64 1 (fma.f64 y (-.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 z z)) (/.f64 1 (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 z z)) (/.f64 1 (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))) 2) (*.f64 z z)) (/.f64 1 (+.f64 y (+.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) z))) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (/.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))) 2)) (/.f64 1 (fma.f64 (+.f64 y 1/2) (log.f64 y) x)) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 y y)) (/.f64 1 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))) 2) (*.f64 y y)) (/.f64 1 (-.f64 x (fma.f64 (+.f64 y 1/2) (log.f64 y) y))) (*.f64 (neg.f64 z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (neg.f64 z)) (cbrt.f64 (neg.f64 z))) (cbrt.f64 (neg.f64 z)) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (-.f64 y z)) (cbrt.f64 (-.f64 y z))) (cbrt.f64 (-.f64 y z)) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 z)) (sqrt.f64 (neg.f64 z)) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 y z)) (sqrt.f64 (-.f64 y z)) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 z)) (sqrt.f64 z) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 z (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 y) (sqrt.f64 z)) (-.f64 (sqrt.f64 y) (sqrt.f64 z)) (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)) (fma.f64 (neg.f64 z) 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)) (fma.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (cbrt.f64 z) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)) (-.f64 (sqrt.f64 (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2)))))) (sqrt.f64 z)) (+.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (-.f64 (sqrt.f64 x) (sqrt.f64 (log.f64 (pow.f64 y (+.f64 y 1/2))))) (*.f64 (-.f64 y z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) (+.f64 y (-.f64 x (log.f64 (pow.f64 y (+.f64 y 1/2))))))))))"]],"rules":[["egg-rr",152],["egg-rr",96],["egg-rr",65],["egg-rr",28]],"stop":[["node limit",1]],"time":79.407958984375,"type":"rewrite"},{"count":[[437,384]],"egraph":[[5,7092,1078,0.038133082],[4,5526,1078,0.026178249],[3,1945,1078,0.015122832],[2,705,1078,0.0052512489999999995],[1,241,1160,0.0016283740000000001],[0,70,1202,0.000433916]],"inputs":[["(*.f64 1/2 (log.f64 y))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(-.f64 y (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","x","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","x","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 x (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (*.f64 1/2 (log.f64 y)))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y)))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(-.f64 x (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(*.f64 y (log.f64 (/.f64 1 y)))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 y (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(*.f64 -1 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 (log.f64 y))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(+.f64 (*.f64 1/2 (log.f64 y)) (*.f64 y (log.f64 y)))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y))))","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 y (log.f64 y))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) (*.f64 -1 (*.f64 y (log.f64 (/.f64 1 y)))))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)","(neg.f64 (*.f64 y (neg.f64 (log.f64 y))))","(*.f64 y (log.f64 y))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))","(*.f64 (log.f64 y) (+.f64 1/2 y))","(*.f64 (log.f64 y) (-.f64 y -1/2))","(-.f64 y (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 y (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) y)","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","x","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","x","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 x (*.f64 1/2 (log.f64 y)))","(+.f64 x (*.f64 -1/2 (log.f64 y)))","(+.f64 x (*.f64 (log.f64 y) -1/2))","(fma.f64 (log.f64 y) -1/2 x)","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (*.f64 1/2 (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(*.f64 y (-.f64 1 (neg.f64 (neg.f64 (log.f64 y)))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(fma.f64 (log.f64 y) (neg.f64 y) y)","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(*.f64 y (-.f64 1 (neg.f64 (neg.f64 (log.f64 y)))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(fma.f64 (log.f64 y) (neg.f64 y) y)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y)))","(neg.f64 (*.f64 (log.f64 y) (+.f64 1/2 y)))","(*.f64 (log.f64 y) (+.f64 -1/2 (neg.f64 y)))","(*.f64 (log.f64 y) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) x)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 x (*.f64 1/2 (log.f64 y)))","(+.f64 x (*.f64 -1/2 (log.f64 y)))","(+.f64 x (*.f64 (log.f64 y) -1/2))","(fma.f64 (log.f64 y) -1/2 x)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (log.f64 y))) x) (*.f64 1/2 (log.f64 y)))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 y (log.f64 (/.f64 1 y)))","(*.f64 y (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (neg.f64 y))","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 (+.f64 (*.f64 y (log.f64 (/.f64 1 y))) x) (*.f64 -1/2 (log.f64 (/.f64 1 y))))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(*.f64 y (neg.f64 (log.f64 y)))","(*.f64 (log.f64 y) (neg.f64 y))","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 (+.f64 (*.f64 -1 (*.f64 y (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) x) (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 1/2 y)) x)","(-.f64 x (*.f64 (log.f64 y) (+.f64 1/2 y)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(-.f64 y (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 y (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 y (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","x","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 y x) (+.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 x (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 x (fma.f64 1/2 (log.f64 y) z))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 (-.f64 1 (log.f64 y)) y) x) (+.f64 (*.f64 1/2 (log.f64 y)) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y)))))","(*.f64 y (-.f64 1 (neg.f64 (neg.f64 (log.f64 y)))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(fma.f64 (log.f64 y) (neg.f64 y) y)","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 y (-.f64 1 (*.f64 -1 (log.f64 (/.f64 1 y))))) x) (+.f64 (*.f64 -1/2 (log.f64 (/.f64 1 y))) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))))","(*.f64 y (-.f64 1 (neg.f64 (neg.f64 (log.f64 y)))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(fma.f64 (log.f64 y) (neg.f64 y) y)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))))) x) (+.f64 (*.f64 1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) z))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 y x) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (*.f64 (log.f64 y) (+.f64 1/2 y)))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(*.f64 -1 z)","(neg.f64 z)","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))","(-.f64 (+.f64 (*.f64 -1 z) (+.f64 y x)) (*.f64 (+.f64 1/2 y) (log.f64 y)))","(-.f64 (+.f64 y x) (fma.f64 (+.f64 1/2 y) (log.f64 y) z))","(-.f64 (+.f64 y x) (fma.f64 (log.f64 y) (+.f64 1/2 y) z))","(+.f64 x (-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z)))","(+.f64 y (-.f64 x (fma.f64 (log.f64 y) (+.f64 1/2 y) z)))"]],"stop":[["node limit",1]],"time":70.22509765625,"type":"simplify"},{"compiler":[[8256,4981]],"time":87.968994140625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","done",0.11556625976844202],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","next",0.07421875],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) x) y) z)","fresh",32.201210058610656],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x) y) z)","fresh",0.3545876465266303]],"compiler":[[15,10],[15,10],[20,12],[22,14],[15,10],[20,12],[22,14]],"count":[[385,4]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[384,3],"picked":[1,1]}],"min-error":[0.01953125],"time":141.3779296875,"type":"prune"},{"compiler":[[40,16]],"locations":[["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))",0.00390625,true],["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))",0.08984375,true]],"time":9.218017578125,"type":"localize"},{"count":[[2,60]],"series":[["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","z","-inf",0.18701171875],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","z","inf",0.176025390625],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","z","0",0.20703125],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","y","-inf",0.23681640625],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","y","inf",0.22412109375],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","y","0",0.19287109375],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","x","-inf",0.18994140625],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","x","inf",0.175048828125],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","x","0",0.27294921875],["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))","z","-inf",0.177978515625],["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))","z","inf",0.214111328125],["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))","z","0",0.279052734375],["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))","y","-inf",0.484130859375],["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))","y","inf",0.35009765625],["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))","y","0",0.39013671875]],"time":3.97509765625,"type":"series"},{"count":[[2,89]],"egraph":[[2,3645,29,0.027514291],[1,251,29,0.0047770830000000005],[0,11,33,0.00031075]],"inputs":[["(fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z))","(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 y z) (*.f64 (log.f64 y) (+.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)) 1) (-.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) (pow.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) 2) (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)) 3) (pow.f64 (-.f64 y z) 3)) (+.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)) 2) (-.f64 (pow.f64 (-.f64 y z) 2) (*.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)) (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)) 2) (pow.f64 (-.f64 y z) 2)) (-.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)) (-.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 y z)) (exp.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 y z))) (exp.f64 (*.f64 (log.f64 y) (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (log.f64 y) (+.f64 y -1/2))) (+.f64 1 (expm1.f64 (-.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (-.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))) (/.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2) (-.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)) (pow.f64 (cbrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)) 2) (cbrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)) (sqrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3)) (/.f64 1 (fma.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2)) (/.f64 1 (-.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) (-.f64 (*.f64 x x) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3)) (fma.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3)) (+.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2) (-.f64 (*.f64 x x) (*.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2)) (-.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3))) (neg.f64 (fma.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2))) (neg.f64 (-.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2) (*.f64 x x)) (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) (-.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) (*.f64 x x)) (+.f64 (pow.f64 x 3) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) (-.f64 (*.f64 x x) (pow.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log.f64 y) (+.f64 y -1/2) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y -1/2) (log.f64 y) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (log.f64 y) (+.f64 y -1/2)) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) (pow.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) 2) (cbrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (cbrt.f64 (log.f64 y)) (+.f64 y -1/2)) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) (sqrt.f64 (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 y)) (*.f64 (sqrt.f64 (log.f64 y)) (+.f64 y -1/2)) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (-.f64 (fma.f64 (log.f64 y) (+.f64 y -1/2) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 (log.f64 y) (+.f64 y -1/2))) 2) (cbrt.f64 (*.f64 (log.f64 y) (+.f64 y -1/2))) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (log.f64 y) (+.f64 y -1/2))) (sqrt.f64 (*.f64 (log.f64 y) (+.f64 y -1/2))) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (pow.f64 (cbrt.f64 (+.f64 y -1/2)) 2)) (cbrt.f64 (+.f64 y -1/2)) (+.f64 (-.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (log.f64 y) (sqrt.f64 (+.f64 y -1/2))) (sqrt.f64 (+.f64 y -1/2)) (+.f64 (-.f64 y z) x))))))"]],"rules":[["egg-rr",57],["egg-rr",32]],"stop":[["node limit",1]],"time":52.361083984375,"type":"rewrite"},{"count":[[149,114]],"egraph":[[5,7105,771,0.032896209],[4,5191,771,0.021973167000000002],[3,1652,771,0.011320084],[2,466,771,0.0034745],[1,163,924,0.00108675],[0,54,999,0.000299625]],"inputs":[["(-.f64 (*.f64 -1/2 (log.f64 y)) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (*.f64 -1/2 (log.f64 y))) z)","(*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))) z)","(-.f64 (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))) z)","(-.f64 (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))) z)","(*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))) z)","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))) z)","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))) z)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y) z)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","x","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","x","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (+.f64 (*.f64 -1/2 (log.f64 y)) x)) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (+.f64 (*.f64 -1/2 (log.f64 y)) x)) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (+.f64 (*.f64 -1/2 (log.f64 y)) x)) z)","(*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))","(-.f64 (+.f64 x (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y)))))) z)","(-.f64 (+.f64 x (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y)))))) z)","(-.f64 (+.f64 x (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y)))))) z)","(*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1))) x)) z)","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1))) x)) z)","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1))) x)) z)","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(*.f64 -1 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 -1/2 (log.f64 y)) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))","(*.f64 y (+.f64 1 (neg.f64 (log.f64 y))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(-.f64 (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))","(*.f64 y (+.f64 1 (neg.f64 (log.f64 y))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y)","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) y)","(fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) y)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y))","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) y) z)","(-.f64 (fma.f64 y (+.f64 1 (neg.f64 (log.f64 y))) (*.f64 -1/2 (log.f64 y))) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) (*.f64 y (-.f64 1 (log.f64 y)))) z)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z))","(-.f64 y (fma.f64 (log.f64 y) (-.f64 y -1/2) z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","x","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","x","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) z)","(-.f64 (fma.f64 -1/2 (log.f64 y) x) z)","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (+.f64 (*.f64 -1/2 (log.f64 y)) x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (+.f64 (*.f64 -1/2 (log.f64 y)) x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 y (+.f64 1 (*.f64 -1 (log.f64 y)))) (+.f64 (*.f64 -1/2 (log.f64 y)) x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(*.f64 y (+.f64 1 (log.f64 (/.f64 1 y))))","(*.f64 y (+.f64 1 (neg.f64 (log.f64 y))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(-.f64 (+.f64 x (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y)))))) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 x (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y)))))) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 x (+.f64 (*.f64 1/2 (log.f64 (/.f64 1 y))) (*.f64 y (+.f64 1 (log.f64 (/.f64 1 y)))))) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1)))","(*.f64 y (+.f64 1 (neg.f64 (log.f64 y))))","(*.f64 y (-.f64 1 (log.f64 y)))","(-.f64 y (*.f64 y (log.f64 y)))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1))) x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1))) x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(-.f64 (+.f64 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1))) (+.f64 (*.f64 -1 (*.f64 y (-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1))) x)) z)","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x))","(fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x))","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) (+.f64 y x))","(+.f64 y (fma.f64 (log.f64 y) (-.f64 -1/2 y) x))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(*.f64 -1 z)","(neg.f64 z)","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))","(+.f64 (*.f64 -1 z) (+.f64 (*.f64 -1 (*.f64 (+.f64 1/2 y) (log.f64 y))) (+.f64 y x)))","(-.f64 (fma.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)) (+.f64 y x)) z)","(+.f64 (fma.f64 (+.f64 -1/2 (neg.f64 y)) (log.f64 y) y) (-.f64 x z))","(+.f64 (fma.f64 (log.f64 y) (-.f64 -1/2 y) y) (-.f64 x z))"]],"stop":[["node limit",1]],"time":55.929931640625,"type":"simplify"},{"compiler":[[2042,1118]],"time":21.653076171875,"type":"eval"},{"alts":[["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","done",0.11556625976844202],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","done",0.07421875],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) x) y) z)","fresh",32.201210058610656],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x) y) z)","next",0.3545876465266303]],"compiler":[[15,10],[15,10],[20,12],[22,14],[20,12],[22,14]],"count":[[118,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[114,0],"picked":[1,1]}],"min-error":[0.01953125],"time":22.475830078125,"type":"prune"},{"compiler":[[85,38]],"locations":[["(cbrt.f64 (log.f64 y))",0.1328125,true],["(*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2))",0.154628759768442,true],["(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)",0.189785009768442,true],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)",0.5475387695368841,true]],"time":19.126953125,"type":"localize"},{"count":[[4,60]],"series":[["(cbrt.f64 (log.f64 y))","y","-inf",0.19091796875],["(cbrt.f64 (log.f64 y))","y","inf",0.180908203125],["(cbrt.f64 (log.f64 y))","y","0",0.1611328125],["(*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2))","y","-inf",0.23583984375],["(*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2))","y","inf",0.34912109375],["(*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2))","y","0",0.2001953125],["(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)","x","-inf",0.241943359375],["(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)","x","inf",0.180908203125],["(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)","x","0",1.116943359375],["(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)","y","-inf",1.08203125],["(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)","y","inf",0.98193359375],["(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)","y","0",1.22119140625],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","y","-inf",7.2158203125],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","y","inf",4.119140625],["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","y","0",14.537109375]],"time":32.26904296875,"type":"series"},{"count":[[4,138]],"egraph":[[2,3041,37,0.024902583],[1,253,39,0.004404458],[0,12,53,0.000354417]],"inputs":[["(pow.f64 (cbrt.f64 (log.f64 y)) 2)","(fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x)","(*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2))","(cbrt.f64 (log.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 1/6) (sqrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 5) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 y)) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (log.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 (log.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 y)) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 y)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (log.f64 y))) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 y))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (+.f64 y -1/2) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 y -1/2) (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (+.f64 y -1/2) (log.f64 y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) (pow.f64 (cbrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) 2) (cbrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) (sqrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (+.f64 y -1/2) (log.f64 y)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 (+.f64 y -1/2) (log.f64 y)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 (+.f64 y -1/2) (log.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (+.f64 y -1/2) (log.f64 y)) 2) (*.f64 x x)) (-.f64 (*.f64 (+.f64 y -1/2) (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))) 2)) (cbrt.f64 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))) (sqrt.f64 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 (+.f64 y -1/2)) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (+.f64 y -1/2)) (log.f64 y)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (+.f64 y -1/2) (log.f64 y) x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (*.f64 -1/2 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/2 (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (*.f64 y (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) y) (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) -1/2) (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 y -1/2)) (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (+.f64 y -1/2)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 y -1/2)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (+.f64 y -1/2)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 -1/8 (pow.f64 y 3)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (-.f64 (fma.f64 y y 1/4) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y y -1/4) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (+.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 -1/8 (pow.f64 y 3))) (-.f64 (fma.f64 y y 1/4) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (fma.f64 y y -1/4)) (+.f64 y 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 y -1/2))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (+.f64 y -1/2) 3) (pow.f64 (log.f64 y) 2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 y -1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y))))) 2)) (cbrt.f64 (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y)))))) (sqrt.f64 (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 y -1/2))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (+.f64 y -1/2)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 y -1/2) 3) (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (+.f64 y -1/2) 3) (pow.f64 (log.f64 y) 2))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (+.f64 y -1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (+.f64 y -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 (+.f64 y -1/2)) (*.f64 2/3 (log.f64 (log.f64 y)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) y (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) -1/2 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 -1/2 (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 y (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (log.f64 y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (log.f64 y))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (log.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) (cbrt.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 1/6) (pow.f64 (log.f64 y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 4)) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1/3) (log.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (cbrt.f64 (log.f64 y)))) 2)) (cbrt.f64 (log.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (cbrt.f64 (log.f64 y))))) (sqrt.f64 (log.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (log.f64 y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 y))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (log.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 y)) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 y)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (log.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 y))) 1) 1/2))))))"]],"rules":[["egg-rr",39],["egg-rr",36],["egg-rr",36],["egg-rr",27]],"stop":[["node limit",1]],"time":52.926025390625,"type":"rewrite"},{"count":[[198,170]],"egraph":[[4,4884,617,0.0249905],[3,1870,617,0.012525167],[2,591,669,0.004484500000000001],[1,242,832,0.0014502920000000002],[0,76,951,0.000432917]],"inputs":[["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","x","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","x","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(pow.f64 (log.f64 y) 1/3)","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (log.f64 y) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2)) (pow.f64 (cbrt.f64 -1) 2))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (pow.f64 (cbrt.f64 -1) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(pow.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2) 1/3)","(cbrt.f64 (pow.f64 (log.f64 y) 2))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x)","(+.f64 (*.f64 -1/2 (log.f64 y)) x)","(fma.f64 (log.f64 y) -1/2 x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))","(*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(*.f64 (neg.f64 y) (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)))","(*.f64 y (*.f64 (log.f64 y) (cbrt.f64 -1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))) (+.f64 x (*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))))","(-.f64 (fma.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) x) (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(+.f64 x (*.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (neg.f64 (+.f64 y 1/2))))","(fma.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))) (+.f64 x (*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))))","(-.f64 (fma.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) x) (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(+.f64 x (*.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (neg.f64 (+.f64 y 1/2))))","(fma.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))) (+.f64 x (*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))))","(-.f64 (fma.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) x) (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(+.f64 x (*.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (neg.f64 (+.f64 y 1/2))))","(fma.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (-.f64 -1/2 y) x)","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)))","(*.f64 -1 (*.f64 y (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(*.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (neg.f64 y))","(*.f64 y (neg.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))))","(*.f64 y (neg.f64 (log.f64 y)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3)))","(neg.f64 (*.f64 1 (*.f64 (log.f64 y) (+.f64 y 1/2))))","(*.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2))","(*.f64 (log.f64 y) (neg.f64 (+.f64 y 1/2)))","(*.f64 (log.f64 y) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (*.f64 (+.f64 1/2 y) (log.f64 y)) (pow.f64 1 1/3))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 (log.f64 y) -1/2 x) (*.f64 y (log.f64 y)))","(-.f64 x (*.f64 (log.f64 y) (+.f64 y 1/2)))","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))","(*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y))","(neg.f64 (*.f64 y (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2))))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y))","(neg.f64 (*.f64 y (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2))))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) -1/2 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (log.f64 y) 1/3)","(cbrt.f64 (log.f64 y))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(*.f64 (pow.f64 (*.f64 1 (log.f64 (/.f64 1 y))) 1/3) (cbrt.f64 -1))","(*.f64 (cbrt.f64 -1) (cbrt.f64 (neg.f64 (log.f64 y))))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 1/3)","(cbrt.f64 (log.f64 y))"]],"stop":[["node limit",1]],"time":49.35009765625,"type":"simplify"},{"compiler":[[4718,2485]],"time":45.926025390625,"type":"eval"},{"alts":[["(-.f64 (+.f64 (fma.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))) (cbrt.f64 (log.f64 y)) x) y) z)","fresh",0.43669526374793466],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x) y) z)","done",0.3545876465266303],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 5) (cbrt.f64 (cbrt.f64 (log.f64 y))))) (cbrt.f64 (log.f64 y)) x) y) z)","fresh",0.5034805184308357],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","done",0.11556625976844202],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","done",0.07421875],["(-.f64 (+.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x) y) z)","next",0.24322133791597814]],"compiler":[[35,26],[22,14],[28,16],[15,10],[15,10],[21,14],[35,26],[28,16],[21,14]],"count":[[217,6]],"kept":[{"done":[2,2],"fresh":[1,0],"new":[213,3],"picked":[1,1]}],"min-error":[0],"time":60.534912109375,"type":"prune"},{"compiler":[[82,44]],"locations":[["(cbrt.f64 (log.f64 y))",0.1328125,false],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))",0.154628759768442,true],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)",0.189785009768442,true],["(pow.f64 (log.f64 y) 2)",0.584316259768442,true]],"time":21.14794921875,"type":"localize"},{"count":[[3,44]],"series":[["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","y","-inf",0.220947265625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","y","inf",0.181884765625],["(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","y","0",0.19091796875],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)","x","-inf",0.175048828125],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)","x","inf",0.180908203125],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)","x","0",0.760009765625],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)","y","-inf",0.6572265625],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)","y","inf",0.693115234375],["(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)","y","0",0.798828125],["(pow.f64 (log.f64 y) 2)","y","-inf",0.2890625],["(pow.f64 (log.f64 y) 2)","y","inf",0.2509765625],["(pow.f64 (log.f64 y) 2)","y","0",0.26708984375]],"time":4.875,"type":"series"},{"count":[[3,96]],"egraph":[[2,2898,30,0.025633292000000002],[1,248,32,0.0042689170000000005],[0,12,42,0.000365542]],"inputs":[["(pow.f64 (log.f64 y) 2)","(fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x)","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 y (log.f64 y))) 2)) (log.f64 (cbrt.f64 (pow.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 y (log.f64 y)))) (log.f64 (sqrt.f64 (pow.f64 y (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (log.f64 y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 y) (log.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (pow.f64 (cbrt.f64 (log.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (log.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4) (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 y)) (pow.f64 (log.f64 y) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (log.f64 y) 3/2) (sqrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 5) (cbrt.f64 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 4) 1) (pow.f64 (cbrt.f64 (log.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2) 4) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 y) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 y (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (log.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 y) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (log.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2 (log.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (log.f64 y) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (log.f64 y)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (log.f64 y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2 (log.f64 (log.f64 y))) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 (log.f64 y))) 1) 3))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 -1/2 y) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) 2) (cbrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) (sqrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) 2) (*.f64 x x)) (-.f64 (*.f64 (-.f64 -1/2 y) (log.f64 y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))) 2)) (cbrt.f64 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))) (sqrt.f64 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 (-.f64 -1/2 y)) (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (-.f64 -1/2 y)) (log.f64 y)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (-.f64 -1/2 y) (log.f64 y) x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/2 (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (*.f64 (neg.f64 y) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) -1/2) (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 -1/2 y)) (pow.f64 (cbrt.f64 (log.f64 y)) 2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (-.f64 -1/2 y)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 -1/2 y)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (-.f64 -1/2 y)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 -1/8 (pow.f64 y 3)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (fma.f64 y (+.f64 y -1/2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 1/4 (*.f64 y y)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (+.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/8 (pow.f64 y 3))) (fma.f64 y (+.f64 y -1/2) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 1/4 (*.f64 y y))) (+.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (-.f64 -1/2 y))) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 (-.f64 -1/2 y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (-.f64 -1/2 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y))))) 2)) (cbrt.f64 (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y)))))) (sqrt.f64 (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (-.f64 -1/2 y))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 -1/2 y)) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 (-.f64 -1/2 y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (pow.f64 (log.f64 y) 2) (pow.f64 (-.f64 -1/2 y) 3))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (-.f64 -1/2 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (cbrt.f64 (log.f64 y)) (sqrt.f64 (-.f64 -1/2 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log.f64 (-.f64 -1/2 y)) (*.f64 2/3 (log.f64 (log.f64 y)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) -1/2 (*.f64 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (pow.f64 (cbrt.f64 (log.f64 y)) 2) (*.f64 (neg.f64 y) (pow.f64 (cbrt.f64 (log.f64 y)) 2)))))))"]],"rules":[["egg-rr",32],["egg-rr",36],["egg-rr",28]],"stop":[["node limit",1]],"time":53.299072265625,"type":"rewrite"},{"count":[[140,123]],"egraph":[[5,7301,449,0.032417375],[4,4375,449,0.022702958],[3,1666,449,0.011149665999999999],[2,543,501,0.004008332999999999],[1,212,664,0.001331166],[0,67,789,0.000375333]],"inputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","x","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","x","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (log.f64 (/.f64 1 y)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)","(pow.f64 (neg.f64 (log.f64 y)) 2)","(pow.f64 (log.f64 y) 2)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x)","(+.f64 (*.f64 -1/2 (log.f64 y)) x)","(fma.f64 -1/2 (log.f64 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (log.f64 y)))) (+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (log.f64 y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))","(*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(*.f64 y (neg.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(*.f64 y (*.f64 (log.f64 y) (cbrt.f64 -1)))","(*.f64 (log.f64 y) (*.f64 y (cbrt.f64 -1)))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))) (+.f64 x (*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))))","(-.f64 (fma.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) x) (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(+.f64 x (*.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (+.f64 -1/2 (neg.f64 y))))","(+.f64 x (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 y) (+.f64 y 1/2))))","(fma.f64 (*.f64 (log.f64 y) (neg.f64 (cbrt.f64 -1))) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))) (+.f64 x (*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))))","(-.f64 (fma.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) x) (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(+.f64 x (*.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (+.f64 -1/2 (neg.f64 y))))","(+.f64 x (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 y) (+.f64 y 1/2))))","(fma.f64 (*.f64 (log.f64 y) (neg.f64 (cbrt.f64 -1))) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))) (+.f64 x (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 y (*.f64 (cbrt.f64 -1) (log.f64 (/.f64 1 y))))))))","(+.f64 (*.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))) (+.f64 x (*.f64 -1 (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))))","(-.f64 (fma.f64 -1/2 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) x) (*.f64 y (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1))))","(+.f64 x (*.f64 (*.f64 (neg.f64 (log.f64 y)) (cbrt.f64 -1)) (+.f64 -1/2 (neg.f64 y))))","(+.f64 x (*.f64 (cbrt.f64 -1) (*.f64 (log.f64 y) (+.f64 y 1/2))))","(fma.f64 (*.f64 (log.f64 y) (neg.f64 (cbrt.f64 -1))) (-.f64 -1/2 y) x)","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y)))","(*.f64 -1 (*.f64 y (fma.f64 -1 (log.f64 (/.f64 -1 y)) (log.f64 -1))))","(*.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y))) (neg.f64 y))","(*.f64 y (neg.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 y)))))","(*.f64 (log.f64 y) (neg.f64 y))","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1/2 (*.f64 (pow.f64 1 1/3) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)))) (+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) y))) x))","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y))))","(*.f64 -1 (*.f64 (log.f64 y) (+.f64 y 1/2)))","(*.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2))","(*.f64 (log.f64 y) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","x","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(+.f64 (*.f64 -1 (*.f64 (pow.f64 1 1/3) (*.f64 (+.f64 1/2 y) (log.f64 y)))) x)","(+.f64 (+.f64 (*.f64 -1/2 (log.f64 y)) x) (*.f64 -1 (*.f64 y (log.f64 y))))","(-.f64 (fma.f64 -1/2 (log.f64 y) x) (*.f64 y (log.f64 y)))","(fma.f64 (neg.f64 (log.f64 y)) (+.f64 y 1/2) x)","(fma.f64 (log.f64 y) (-.f64 -1/2 y) x)","(*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))","(*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y))","(neg.f64 (*.f64 y (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2))))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y))","(*.f64 y (neg.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3)) (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 (/.f64 1 y)) 2)) 1/3) y)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y))","(neg.f64 (*.f64 y (cbrt.f64 (pow.f64 (neg.f64 (log.f64 y)) 2))))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y))","(*.f64 y (neg.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))","(+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 y))) (log.f64 -1)) 2)) 1/3)))","(fma.f64 -1 (*.f64 y (cbrt.f64 (pow.f64 (log.f64 y) 2))) (*.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2))))","(fma.f64 -1/2 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (neg.f64 y)))","(*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y))"]],"stop":[["node limit",1]],"time":53.161865234375,"type":"simplify"},{"compiler":[[3542,2014]],"time":37.523193359375,"type":"eval"},{"alts":[["(-.f64 (+.f64 (fma.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))) (cbrt.f64 (log.f64 y)) x) y) z)","fresh",0.43669526374793466],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 5) (cbrt.f64 (cbrt.f64 (log.f64 y))))) (cbrt.f64 (log.f64 y)) x) y) z)","fresh",0.5034805184308357],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)","done",0.11556625976844202],["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","done",0.07421875],["(-.f64 (+.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x) y) z)","done",0.24322133791597814],["(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x) y) z)","done",0.3545876465266303]],"compiler":[[35,26],[28,16],[15,10],[15,10],[21,14],[22,14]],"count":[[172,6]],"kept":[{"done":[3,3],"fresh":[2,1],"new":[166,1],"picked":[1,1]}],"min-error":[0],"time":37.31494140625,"type":"prune"},{"accuracy":[0.07421875],"baseline":[0.07421875],"branch":[["x",0.07421875,1],["y",0.07421875,1],["z",0.07421875,1],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)",0.07421875,1],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)",0.07421875,1]],"compiler":[[4,3],[4,3],[4,3],[15,10],[13,9],[170,93]],"count":[[8,1]],"inputs":[["(-.f64 (+.f64 (fma.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))) (cbrt.f64 (log.f64 y)) x) y) z)","(-.f64 (+.f64 (fma.f64 (+.f64 (*.f64 -1 (*.f64 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3) y)) (*.f64 -1/2 (pow.f64 (*.f64 1 (pow.f64 (log.f64 y) 2)) 1/3))) (cbrt.f64 (log.f64 y)) x) y) z)","(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (*.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (log.f64 y))) 5) (cbrt.f64 (cbrt.f64 (log.f64 y))))) (cbrt.f64 (log.f64 y)) x) y) z)","(-.f64 (+.f64 (fma.f64 (*.f64 (cbrt.f64 (pow.f64 (log.f64 y) 2)) (-.f64 -1/2 y)) (cbrt.f64 (log.f64 y)) x) y) z)","(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (sqrt.f64 (log.f64 y))) (sqrt.f64 (log.f64 y)) x) y) z)","(-.f64 (+.f64 (fma.f64 (*.f64 (+.f64 (neg.f64 y) -1/2) (pow.f64 (cbrt.f64 (log.f64 y)) 2)) (cbrt.f64 (log.f64 y)) x) y) z)","(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)"]],"link":["."],"name":["Numeric.SpecFunctions:stirlingError from math-functions-0.1.5.2"],"oracle":[32.48059058740759],"outputs":[["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))"]],"time":24.60693359375,"times":[["x",4.302001953125],["y",4.52099609375],["z",4.177978515625],["(-.f64 (+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y) z)",4.4599609375],["(+.f64 (-.f64 x (*.f64 (+.f64 y 1/2) (log.f64 y))) y)",4.302978515625]],"type":"regimes"},{"compiler":[[14,9]],"egraph":[[4,29,16,0.00016691600000000003],[3,28,16,0.000134083],[2,25,16,9.3041e-5],[1,19,16,6.0166e-5],[0,11,18,3.1583e-5]],"inputs":[["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (fma.f64 (log.f64 y) (+.f64 (neg.f64 y) -1/2) (-.f64 y z)))","(+.f64 x (fma.f64 (log.f64 y) (-.f64 -1/2 y) (-.f64 y z)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.787109375,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[14,9]],"remove-preprocessing":[[]],"time":8.9150390625,"type":"end"}]
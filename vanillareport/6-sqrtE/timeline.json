[{"compiler":[[10,8]],"method":["search"],"sampling":[[12,0.9985356330871582,0.0009760856628417969,0.00048828125],[11,0.9975595474243164,0.0019521713256835938,0.00048828125],[10,0.9956073760986328,0.0039043426513671875,0.00048828125],[9,0.9917030334472656,0.007808685302734375,0.00048828125],[8,0.9838943481445313,0.01561737060546875,0.00048828125],[7,0.9682769775390625,0.0312347412109375,0.00048828125],[6,0.937042236328125,0.062469482421875,0.00048828125],[5,0.87457275390625,0.12493896484375,0.00048828125],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":3.484130859375,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.1689453125,3],["body",256,"valid",382.876953125,8256]],"time":390.362060546875,"type":"sample"},{"compiler":[[9,7]],"egraph":[[0,1,1,1.542e-6],[12,7657,4,0.064729335],[11,6773,4,0.05361695999999999],[10,5748,4,0.040979209999999995],[9,4971,4,0.029812834999999996],[8,4007,4,0.019958709999999998],[7,2640,4,0.012654585],[6,1380,4,0.0068265010000000004],[5,384,4,0.003134417],[4,118,4,0.0010907920000000002],[3,53,4,0.000479417],[2,30,4,0.00024520900000000003],[1,12,4,0.000128126],[0,6,9,4.6792e-5]],"inputs":[["0"],["(sqrt.f64 (+.f64 (pow.f64 x 2) (pow.f64 x 2)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(sqrt.f64 (+.f64 (pow.f64 x 2) (pow.f64 x 2)))","(sqrt.f64 (*.f64 2 (*.f64 x x)))","(hypot.f64 x x)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":88.406982421875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[12,7657,4,0.06468987600000001],[11,6773,4,0.054036542],[10,5748,4,0.041521376],[9,4971,4,0.030064584],[8,4007,4,0.019851834],[7,2640,4,0.012580459],[6,1380,4,0.006785501],[5,384,4,0.003092126],[4,118,4,0.001069459],[3,53,4,0.00046175100000000005],[2,30,4,0.000235667],[1,12,4,0.000121917],[0,6,9,4.2792e-5]],"inputs":[["(sqrt.f64 (+.f64 (pow.f64 x 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(sqrt.f64 (+.f64 (pow.f64 x 2) (pow.f64 x 2)))","(sqrt.f64 (*.f64 2 (*.f64 x x)))","(hypot.f64 x x)"]],"stop":[["node limit",1]],"time":75.805908203125,"type":"simplify"},{"compiler":[[12,8]],"time":0.39208984375,"type":"eval"},{"alts":[["(hypot.f64 x x)","next",0.11328125]],"compiler":[[4,2],[4,2]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.11328125],"time":0.7158203125,"type":"prune"},{"compiler":[[5,2]],"locations":[["(hypot.f64 x x)",0.11328125,true]],"time":1.482177734375,"type":"localize"},{"count":[[1,12]],"series":[["(hypot.f64 x x)","x","-inf",0.700927734375],["(hypot.f64 x x)","x","inf",0.6240234375],["(hypot.f64 x x)","x","0",0.5830078125]],"time":1.951904296875,"type":"series"},{"count":[[1,103]],"egraph":[[3,7879,4,0.050447918],[2,696,4,0.012248751],[1,60,4,0.0009605010000000001],[0,3,4,9.6709e-5]],"inputs":[["(hypot.f64 x x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 1 (/.f64 0 0)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 0 0)) 2))) (log.f64 (cbrt.f64 (exp.f64 (/.f64 0 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 0 0)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 0 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) (/.f64 0 0)) (*.f64 (*.f64 x x) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 0 0) (*.f64 x x)) (*.f64 (/.f64 0 0) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 0 0)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 x 4) 0) (/.f64 (pow.f64 x 4) 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (+.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (+.f64 x x) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x x) (*.f64 (+.f64 x x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (cbrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (+.f64 (pow.f64 (cbrt.f64 x) 5) (pow.f64 (cbrt.f64 x) 5)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 x) (*.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (+.f64 (*.f64 x (cbrt.f64 x)) (*.f64 x (cbrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (pow.f64 (+.f64 x x) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (+.f64 (pow.f64 x 3/2) (pow.f64 x 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (pow.f64 1 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 0 0) (pow.f64 1 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 0 (/.f64 1 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (cbrt.f64 x)) (+.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x 3/2) (+.f64 (sqrt.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (*.f64 x x) (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 x 6)) (/.f64 1 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x x) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 5) (+.f64 (cbrt.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 4 (pow.f64 x 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 2) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 2 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 x)) (pow.f64 x 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 0 0) x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 0 0) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 2)) (*.f64 x (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (*.f64 x (cbrt.f64 x))) (pow.f64 (cbrt.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 x 3/2)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 x) 5)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 0 (pow.f64 x 4)) (*.f64 2 (pow.f64 x 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 0 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (pow.f64 x 6)) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) (*.f64 2 (pow.f64 x 6))) (*.f64 (+.f64 0 (pow.f64 x 4)) (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 2 (pow.f64 x 6))) (cbrt.f64 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 0) (sqrt.f64 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (pow.f64 x 6))) (neg.f64 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (*.f64 2 (pow.f64 x 6))) (*.f64 0 (+.f64 0 (pow.f64 x 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) 0) (*.f64 (+.f64 0 (pow.f64 x 4)) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (+.f64 1 (/.f64 0 0)) 3) 1) (+.f64 (*.f64 (+.f64 1 (/.f64 0 0)) (+.f64 1 (/.f64 0 0))) (+.f64 1 (+.f64 1 (/.f64 0 0)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (+.f64 1 (/.f64 0 0)) (+.f64 1 (/.f64 0 0))) 1) (+.f64 (+.f64 1 (/.f64 0 0)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) 1) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 6)) (/.f64 0 0)) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (/.f64 0 0)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 0 0) (*.f64 2 (pow.f64 x 6))) (+.f64 0 (pow.f64 x 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 5/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 5)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 0 0) 4/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (cbrt.f64 (pow.f64 (log.f64 (/.f64 0 0)) 2))) (cbrt.f64 (log.f64 (/.f64 0 0))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 0 0)))) (sqrt.f64 (log.f64 (/.f64 0 0))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (neg.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 0 0))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 0 0)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 0 0)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 0 0)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 0 0)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 x (cbrt.f64 x)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (pow.f64 x 3/2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (sqrt.f64 x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 5) (cbrt.f64 x) (*.f64 x x))))))"]],"rules":[["egg-rr",103]],"stop":[["node limit",1]],"time":69.27490234375,"type":"rewrite"},{"count":[[115,105]],"egraph":[[9,121,80,0.001543084],[8,96,80,0.0013333339999999998],[7,84,80,0.001000792],[6,73,80,0.0007770419999999999],[5,51,80,0.00058725],[4,33,80,0.00038491700000000003],[3,29,80,0.00027141700000000003],[2,25,80,0.00018275000000000002],[1,12,80,0.000102917],[0,7,80,4.3625e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"stop":[["saturated",1]],"time":14.22021484375,"type":"simplify"},{"compiler":[[899,665]],"time":12.65087890625,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 2) (neg.f64 x))","next",30.724105796640497],["(hypot.f64 x x)","done",0.11328125],["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","fresh",32.95150375976844],["(*.f64 (sqrt.f64 2) x)","fresh",32.258410787368945]],"compiler":[[6,5],[4,2],[14,12],[8,5],[5,4],[6,5],[14,12],[8,5],[5,4]],"count":[[106,5]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[105,4],"picked":[1,1]}],"min-error":[0.0234375],"time":10.20703125,"type":"prune"},{"compiler":[[12,8]],"locations":[["(*.f64 (sqrt.f64 2) (neg.f64 x))",0.42578125,true]],"time":3.264892578125,"type":"localize"},{"count":[[1,12]],"series":[["(*.f64 (sqrt.f64 2) (neg.f64 x))","x","-inf",0.153076171875],["(*.f64 (sqrt.f64 2) (neg.f64 x))","x","inf",0.447998046875],["(*.f64 (sqrt.f64 2) (neg.f64 x))","x","0",0.533935546875]],"time":1.18017578125,"type":"series"},{"count":[[1,13]],"egraph":[[2,1473,6,0.013440249999999999],[1,125,6,0.002157375],[0,6,8,0.00017725]],"inputs":[["(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) x)))))))"]],"rules":[["egg-rr",13]],"stop":[["node limit",1]],"time":29.615966796875,"type":"rewrite"},{"count":[[25,15]],"egraph":[[9,121,96,0.001518585],[8,96,96,0.001309168],[7,84,96,0.000989751],[6,73,96,0.00077296],[5,51,96,0.0005845010000000001],[4,33,96,0.00038450100000000004],[3,29,96,0.00027166800000000003],[2,25,96,0.000184209],[1,12,96,0.000103584],[0,7,96,4.3625e-5]],"inputs":[["(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))","(*.f64 -1 (*.f64 (sqrt.f64 2) x))","(neg.f64 (*.f64 (sqrt.f64 2) x))","(*.f64 (sqrt.f64 2) (neg.f64 x))"]],"stop":[["saturated",1]],"time":13.891845703125,"type":"simplify"},{"compiler":[[96,80]],"time":1.942138671875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 2) (neg.f64 x))","done",30.724105796640497],["(hypot.f64 x x)","done",0.11328125],["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","fresh",32.95150375976844],["(*.f64 (sqrt.f64 2) x)","next",32.258410787368945]],"compiler":[[6,5],[4,2],[14,12],[8,5],[5,4],[14,12],[8,5],[5,4]],"count":[[20,5]],"kept":[{"done":[1,1],"fresh":[3,3],"new":[15,0],"picked":[1,1]}],"min-error":[0.0234375],"time":3.416015625,"type":"prune"},{"compiler":[[9,7]],"locations":[["(*.f64 (sqrt.f64 2) x)",0.42578125,true]],"time":2.4619140625,"type":"localize"},{"count":[[1,0]],"series":[["(*.f64 (sqrt.f64 2) x)","x","-inf",0.15478515625],["(*.f64 (sqrt.f64 2) x)","x","inf",0.172119140625],["(*.f64 (sqrt.f64 2) x)","x","0",0.156005859375]],"time":0.510986328125,"type":"series"},{"count":[[1,15]],"egraph":[[2,1075,6,0.013688291],[1,100,6,0.0015981659999999998],[0,5,6,0.000153625]],"inputs":[["(*.f64 (sqrt.f64 2) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (sqrt.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (sqrt.f64 2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 2) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (*.f64 x x)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (sqrt.f64 2) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (sqrt.f64 2) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 2 (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (sqrt.f64 2)) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 2) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (sqrt.f64 2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (sqrt.f64 2) x)))))))"]],"rules":[["egg-rr",15]],"stop":[["node limit",1]],"time":29.93896484375,"type":"rewrite"},{"count":[[15,15]],"egraph":[[0,0,0,2.0042e-5]],"inputs":[[]],"method":["egg-herbie"],"outputs":[[]],"stop":[["saturated",1]],"time":10.445068359375,"type":"simplify"},{"compiler":[[119,99]],"time":2.239013671875,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 2) (neg.f64 x))","done",30.724105796640497],["(hypot.f64 x x)","done",0.11328125],["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","next",32.95150375976844],["(*.f64 (sqrt.f64 2) x)","done",32.258410787368945]],"compiler":[[6,5],[4,2],[14,12],[8,5],[5,4],[14,12],[8,5]],"count":[[20,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[15,0],"picked":[1,1]}],"min-error":[0.0234375],"time":3.083984375,"type":"prune"},{"compiler":[[18,5]],"locations":[["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))",0.20150375976844204,true]],"time":3.89599609375,"type":"localize"},{"count":[[1,8]],"series":[["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","x","-inf",1.05712890625],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","x","inf",0.19287109375],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","x","0",0.197021484375]],"time":1.493896484375,"type":"series"},{"count":[[1,38]],"egraph":[[2,1820,4,0.013724332999999998],[1,129,4,0.002576625],[0,6,9,0.000148583]],"inputs":[["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 x x) (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (+.f64 x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) 0) (/.f64 (*.f64 x x) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x 0) (*.f64 2 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 2 (pow.f64 x 3)) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 0 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 3)) (*.f64 2 (pow.f64 x 3))) (*.f64 (fma.f64 x x 0) (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (*.f64 2 (pow.f64 x 3))) (cbrt.f64 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 0) (sqrt.f64 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 3))) (sqrt.f64 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 2 (pow.f64 x 3))) (neg.f64 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (*.f64 2 (pow.f64 x 3))) (*.f64 0 (fma.f64 x x 0)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 3)) 0) (*.f64 (fma.f64 x x 0) 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 2 (pow.f64 x 3)) (+.f64 x x)) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 0 (+.f64 x x)) 0)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (*.f64 2 (pow.f64 x 3))) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x x) (*.f64 2 (pow.f64 x 3))) (fma.f64 x x 0))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 x x) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (+.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 x) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) x)))))"]],"rules":[["egg-rr",38]],"stop":[["node limit",1]],"time":31.572021484375,"type":"rewrite"},{"count":[[46,39]],"egraph":[[1,6,48,5.8707999999999994e-5],[0,5,48,3.2417e-5]],"inputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)","(*.f64 (sqrt.f64 2) x)"]],"stop":[["saturated",1]],"time":10.585205078125,"type":"simplify"},{"compiler":[[297,171]],"time":4.305908203125,"type":"eval"},{"alts":[["(*.f64 (sqrt.f64 2) (neg.f64 x))","done",30.724105796640497],["(hypot.f64 x x)","done",0.11328125],["(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","fresh",52.00843219706133],["(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","done",32.95150375976844],["(*.f64 (sqrt.f64 2) x)","done",32.258410787368945]],"compiler":[[6,5],[4,2],[14,12],[8,5],[5,4]],"count":[[44,5]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[39,0],"picked":[1,1]}],"min-error":[0.0234375],"time":4.301025390625,"type":"prune"},{"accuracy":[0.11328125],"baseline":[0.11328125],"branch":[["x",0.11328125,1],["(sqrt.f64 (+.f64 (pow.f64 x 2) (pow.f64 x 2)))",0.11328125,1],["(+.f64 (pow.f64 x 2) (pow.f64 x 2))",0.11328125,1],["(pow.f64 x 2)",0.11328125,1]],"compiler":[[2,1],[9,7],[8,6],[4,3],[41,30]],"count":[[6,1]],"inputs":[["(*.f64 (sqrt.f64 2) (neg.f64 x))","(/.f64 (sqrt.f64 (*.f64 2 (pow.f64 x 6))) (sqrt.f64 (+.f64 0 (pow.f64 x 4))))","(*.f64 (sqrt.f64 x) (sqrt.f64 (+.f64 x x)))","(*.f64 (sqrt.f64 2) x)","(hypot.f64 x x)","(sqrt.f64 (+.f64 (pow.f64 x 2) (pow.f64 x 2)))"]],"link":["."],"name":["sqrt E"],"oracle":[63.872342154984885],"outputs":[["(hypot.f64 x x)"]],"time":14.6728515625,"times":[["x",3.97607421875],["(sqrt.f64 (+.f64 (pow.f64 x 2) (pow.f64 x 2)))",3.306884765625],["(+.f64 (pow.f64 x 2) (pow.f64 x 2))",3.0830078125],["(pow.f64 x 2)",3.089111328125]],"type":"regimes"},{"compiler":[[4,2]],"egraph":[[0,3,4,1.2833e-5]],"inputs":[["(hypot.f64 x x)"]],"method":["egg-herbie"],"outputs":[["(hypot.f64 x x)"]],"stop":[["fuel",1],["saturated",1]],"time":8.237060546875,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[4,2]],"remove-preprocessing":[[]],"time":7.050048828125,"type":"end"}]
[{"compiler":[[17,13]],"method":["search"],"sampling":[[12,0.0621950626373291,0.4373166561126709,0.50048828125],[11,0.0619511604309082,0.4375605583190918,0.50048828125],[10,0.061463356018066406,0.4380483627319336,0.50048828125],[9,0.06048774719238281,0.4390239715576172,0.50048828125],[8,0.058536529541015625,0.4409751892089844,0.50048828125],[7,0.05463409423828125,0.44487762451171875,0.50048828125],[6,0.0468292236328125,0.4526824951171875,0.50048828125],[5,0.031219482421875,0.468292236328125,0.50048828125],[4,0.0,0.49951171875,0.50048828125],[3,0.0,0.49951171875,0.50048828125],[2,0.0,0.49951171875,0.50048828125],[1,0.0,0.49951171875,0.50048828125],[0,0.0,0.49951171875,0.50048828125]],"time":200.155029296875,"type":"analyze"},{"outcomes":[["body",512,"valid",402.524169921875,2039],["body",1024,"valid",1822.528564453125,4204],["body",2048,"valid",246.528564453125,412],["body",256,"valid",119.70068359375,1601]],"time":2599.630126953125,"type":"sample"},{"compiler":[[10,8]],"egraph":[[0,1,1,1e-6],[8,77,10,0.001098],[7,73,10,0.00091175],[6,57,10,0.000703833],[5,43,10,0.000525833],[4,33,10,0.000371708],[3,25,10,0.000256708],[2,19,10,0.000165958],[1,14,10,9.8541e-5],[0,8,11,4.8833e-5]],"inputs":[["0"],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","(/.f64 (log.f64 (-.f64 1 x)) (log1p.f64 x))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.69091796875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[8,77,10,0.001076749],[7,73,10,0.0008825399999999999],[6,57,10,0.0006779989999999999],[5,43,10,0.0005018739999999999],[4,33,10,0.00035095799999999996],[3,25,10,0.000246208],[2,19,10,0.00015675],[1,14,10,9.175000000000001e-5],[0,8,11,4.3125e-5]],"inputs":[["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","(/.f64 (log.f64 (-.f64 1 x)) (log1p.f64 x))","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"stop":[["saturated",1]],"time":11.3359375,"type":"simplify"},{"compiler":[[16,12]],"time":0.344970703125,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","next",0.037441259768442016],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","fresh",59.71430173934616]],"compiler":[[7,5],[10,8],[7,5],[10,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.025722509768442016],"time":1.1669921875,"type":"prune"},{"compiler":[[15,5]],"locations":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))",0.037441259768442016,true]],"time":4.083984375,"type":"localize"},{"count":[[1,12]],"series":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","x","-inf",1.8369140625],["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","x","inf",1.34716796875],["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","x","0",0.509033203125]],"time":3.799072265625,"type":"series"},{"count":[[1,30]],"egraph":[[2,1717,8,0.013780084000000001],[1,124,8,0.002212042],[0,6,10,0.000153917]],"inputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (log1p.f64 x) (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 x) (/.f64 1 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log1p.f64 x) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) 2) (cbrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) (*.f64 (cbrt.f64 (log1p.f64 x)) (/.f64 1 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) (sqrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 x)) (*.f64 (sqrt.f64 (log1p.f64 x)) (/.f64 1 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 x)) (/.f64 1 (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log1p.f64 x)) (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) 1) (/.f64 (cbrt.f64 (log1p.f64 x)) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) 1) (/.f64 (sqrt.f64 (log1p.f64 x)) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2)) (/.f64 (log1p.f64 x) (cbrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 x)) (pow.f64 (cbrt.f64 (log1p.f64 x)) 2)) (/.f64 (sqrt.f64 (log1p.f64 x)) (cbrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log1p.f64 x))) (/.f64 (log1p.f64 x) (sqrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) (pow.f64 (cbrt.f64 (log1p.f64 x)) 2)) (cbrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) (sqrt.f64 (log1p.f64 x))) (/.f64 (cbrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log1p.f64 x) (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log1p.f64 x) (log1p.f64 x))))))))"]],"rules":[["egg-rr",30]],"stop":[["node limit",1]],"time":30.971923828125,"type":"rewrite"},{"count":[[42,53]],"egraph":[[3,7806,1006,0.030422499999999998],[2,1481,1006,0.013981208],[1,411,1099,0.002957791],[0,122,1206,0.000615875]],"inputs":[["-1","(-.f64 (*.f64 -1 x) 1)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))) (/.f64 2 (*.f64 (log.f64 (/.f64 1 x)) x))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 1/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (log.f64 (/.f64 1 x)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (log.f64 (/.f64 1 x)))))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (*.f64 -1 (/.f64 (-.f64 (*.f64 1/3 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 -1/2 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))))))) (pow.f64 x 3))))))"]],"method":["egg-herbie"],"outputs":[["-1","(-.f64 (*.f64 -1 x) 1)","(fma.f64 -1 x -1)","(-.f64 -1 x)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(+.f64 (fma.f64 -1/2 (*.f64 x x) (neg.f64 x)) -1)","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -1 x -1))","(-.f64 (fma.f64 x (*.f64 x -1/2) -1) x)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","(+.f64 (fma.f64 -1/2 (*.f64 x x) (fma.f64 -1 x (*.f64 -5/12 (pow.f64 x 3)))) -1)","(fma.f64 -1/2 (*.f64 x x) (+.f64 (fma.f64 -5/12 (pow.f64 x 3) (neg.f64 x)) -1))","(fma.f64 x (*.f64 x -1/2) (fma.f64 -5/12 (pow.f64 x 3) (-.f64 -1 x)))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))","(neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 (+.f64 (log.f64 -1) (log.f64 x))) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (log.f64 x)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))) (/.f64 2 (*.f64 (log.f64 (/.f64 1 x)) x))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)))","(-.f64 (fma.f64 -1 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x))) (/.f64 2 (*.f64 x (neg.f64 (log.f64 x))))) (/.f64 (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2)) x))","(-.f64 (-.f64 (/.f64 (/.f64 2 x) (neg.f64 (log.f64 x))) (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (neg.f64 (log.f64 x)))) (/.f64 (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x))) x))","(-.f64 (-.f64 (/.f64 (/.f64 -2 (log.f64 x)) x) (/.f64 (log.f64 -1) (*.f64 x (*.f64 (log.f64 x) (log.f64 x))))) (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (neg.f64 (log.f64 x))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))))))","(-.f64 (+.f64 (/.f64 2 (*.f64 x (neg.f64 (log.f64 x)))) (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x)))) (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))))) (+.f64 (fma.f64 -1 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2)) x)) (*.f64 -1/2 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (*.f64 (*.f64 x x) (pow.f64 (neg.f64 (log.f64 x)) 2))))))","(+.f64 (-.f64 (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (neg.f64 (log.f64 x)))) (-.f64 (/.f64 (/.f64 2 x) (neg.f64 (log.f64 x))) (-.f64 (fma.f64 -1/2 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (*.f64 (*.f64 x x) (*.f64 (log.f64 x) (log.f64 x)))) (/.f64 (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x))) x)) (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))))))","(+.f64 (/.f64 (/.f64 -1/2 (log.f64 x)) (*.f64 x x)) (+.f64 (-.f64 (/.f64 (/.f64 -2 (log.f64 x)) x) (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (neg.f64 (log.f64 x)))) (-.f64 (/.f64 (-.f64 (/.f64 2 (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 3))) (*.f64 x x)) (fma.f64 -1/2 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (*.f64 x (*.f64 x (*.f64 (log.f64 x) (log.f64 x))))) (/.f64 (log.f64 -1) (*.f64 x (*.f64 (log.f64 x) (log.f64 x))))))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 1/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (log.f64 (/.f64 1 x)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (log.f64 (/.f64 1 x)))))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))))","(+.f64 (/.f64 2 (*.f64 x (neg.f64 (log.f64 x)))) (-.f64 (+.f64 (+.f64 (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 1/3 (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x))))) (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x))))) (fma.f64 1/2 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x)))) (fma.f64 1/3 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (*.f64 (pow.f64 x 3) (pow.f64 (neg.f64 (log.f64 x)) 2))) (fma.f64 -1/2 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (*.f64 (*.f64 x x) (pow.f64 (neg.f64 (log.f64 x)) 2))) (fma.f64 -1 (/.f64 (-.f64 (/.f64 1/2 (neg.f64 (log.f64 x))) (fma.f64 -1/2 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (pow.f64 (neg.f64 (log.f64 x)) 2)) (neg.f64 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (neg.f64 (log.f64 x)))))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x)))) (fma.f64 -1 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2)) x))))))))","(+.f64 (/.f64 (/.f64 2 x) (neg.f64 (log.f64 x))) (-.f64 (+.f64 (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (-.f64 (/.f64 (/.f64 1/3 (pow.f64 x 3)) (neg.f64 (log.f64 x))) (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (neg.f64 (log.f64 x))))) (fma.f64 1/2 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x)))) (fma.f64 1/3 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (*.f64 (pow.f64 x 3) (*.f64 (log.f64 x) (log.f64 x)))) (fma.f64 -1/2 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (*.f64 (*.f64 x x) (*.f64 (log.f64 x) (log.f64 x)))) (-.f64 (-.f64 (/.f64 (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x))) x) (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x))))) (/.f64 (-.f64 (/.f64 1/2 (neg.f64 (log.f64 x))) (-.f64 (/.f64 (*.f64 -1/2 (+.f64 (log.f64 -1) (log.f64 x))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (neg.f64 (log.f64 x))))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x))))))))))","(-.f64 (-.f64 (-.f64 (-.f64 (+.f64 (/.f64 (/.f64 -2 (log.f64 x)) x) (/.f64 (/.f64 -1/2 (log.f64 x)) (*.f64 x x))) (-.f64 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (neg.f64 (log.f64 x))) (/.f64 (/.f64 -1/3 (log.f64 x)) (pow.f64 x 3)))) (fma.f64 1/2 (/.f64 (-.f64 (/.f64 2 (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 3))) (pow.f64 x 3)) (*.f64 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (*.f64 (log.f64 x) (log.f64 x))) (+.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 1/3 (pow.f64 x 3)))))) (/.f64 (log.f64 -1) (*.f64 x (*.f64 (log.f64 x) (log.f64 x))))) (*.f64 (/.f64 1 (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 -2 (log.f64 x)) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x)) (/.f64 (+.f64 (/.f64 -1/2 (log.f64 x)) (+.f64 (-.f64 (/.f64 2 (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 3))) (*.f64 1/2 (/.f64 (+.f64 (log.f64 -1) (log.f64 x)) (*.f64 (log.f64 x) (log.f64 x)))))) (pow.f64 x 3)))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))","(/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)))","(*.f64 -1 (+.f64 (/.f64 (log.f64 (/.f64 -1 x)) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x))))","(fma.f64 -1 (/.f64 (fma.f64 -1 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (/.f64 1/2 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))))) (*.f64 x x)) (*.f64 -1 (+.f64 (/.f64 (log.f64 (/.f64 -1 x)) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) x))))","(-.f64 (-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x)) (/.f64 (-.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)))) (*.f64 x x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (+.f64 (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x) (/.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (-.f64 (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))))) (*.f64 x x))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (*.f64 -1 (/.f64 (-.f64 (*.f64 1/3 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 -1/2 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))))))) (pow.f64 x 3))))))","(fma.f64 -1 (/.f64 (fma.f64 -1 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (/.f64 1/2 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))))) (*.f64 x x)) (fma.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (*.f64 -1 (+.f64 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) x) (/.f64 (-.f64 (/.f64 1/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 3)) (fma.f64 -1 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (fma.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (+.f64 (/.f64 1/2 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (*.f64 -1/2 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))))))))) (pow.f64 x 3))))))","(-.f64 (-.f64 (-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x)) (/.f64 (-.f64 (/.f64 1/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (-.f64 (fma.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (fma.f64 -1/2 (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))) (/.f64 1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (/.f64 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))))))) (pow.f64 x 3))) (/.f64 (-.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)))) (*.f64 x x)))","(-.f64 (-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x)) (+.f64 (/.f64 (-.f64 (/.f64 1/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (+.f64 (fma.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) (*.f64 (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))) (+.f64 -1/2 (/.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))))))) (pow.f64 x 3)) (/.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (-.f64 (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))))) (*.f64 x x))))"]],"stop":[["node limit",1]],"time":51.47412109375,"type":"simplify"},{"compiler":[[1852,1351]],"time":20.39599609375,"type":"eval"},{"alts":[["(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","next",0.5557829161919554],["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","done",0.037441259768442016],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","fresh",59.71430173934616]],"compiler":[[18,15],[7,5],[10,8],[18,15],[10,8]],"count":[[55,3]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[53,1],"picked":[1,1]}],"min-error":[0.017910009768442016],"time":5.242919921875,"type":"prune"},{"compiler":[[68,54]],"locations":[["(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3))))",0.0078125,true],["(*.f64 -1/2 (pow.f64 x 2))",0.0078125,true],["(*.f64 -5/12 (pow.f64 x 3))",0.0625,true]],"time":15.528076171875,"type":"localize"},{"count":[[3,8]],"series":[["(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3))))","x","-inf",0.22216796875],["(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3))))","x","inf",0.298828125],["(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3))))","x","0",0.235107421875],["(*.f64 -1/2 (pow.f64 x 2))","x","-inf",0.1630859375],["(*.f64 -1/2 (pow.f64 x 2))","x","inf",0.3369140625],["(*.f64 -1/2 (pow.f64 x 2))","x","0",0.327880859375],["(*.f64 -5/12 (pow.f64 x 3))","x","-inf",0.31103515625],["(*.f64 -5/12 (pow.f64 x 3))","x","inf",0.67578125],["(*.f64 -5/12 (pow.f64 x 3))","x","0",0.48486328125]],"time":3.1689453125,"type":"series"},{"count":[[3,136]],"egraph":[[2,3985,29,0.027634499],[1,313,29,0.005711624],[0,14,32,0.000531333]],"inputs":[["(*.f64 -5/12 (pow.f64 x 3))","(*.f64 -1/2 (pow.f64 x 2))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 -5/12 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 -5/12) (pow.f64 x 3))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 -5/12 (pow.f64 x 3)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -5/12 (pow.f64 x 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 25/144 (pow.f64 x 6)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (cbrt.f64 -5/12)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 -5/12) (pow.f64 x 3/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (pow.f64 x 3) 3) -125/1728) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 25/144 (pow.f64 x 6)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 -5/12 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (pow.f64 x 3) 3) -125/1728))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -5/12 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -5/12 (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (fma.f64 3 (log.f64 x) (log1p.f64 -17/12)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (fma.f64 3 (log.f64 x) (log1p.f64 -17/12)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2))) (log.f64 (sqrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (*.f64 x -1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 x -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 4) 1/4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 x -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (sqrt.f64 -1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 6) -1/8) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 x 4) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (*.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 6) -1/8))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (*.f64 x -1/2))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (pow.f64 x 4) 1/4) (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x))) (/.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2) (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))) (pow.f64 (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))) 2) (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))) (sqrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 x 6) -1/8 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 3)) (/.f64 1 (fma.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (-.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (*.f64 x (*.f64 x -1/2))) (*.f64 (pow.f64 x 4) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (pow.f64 x 4) 1/4) (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2)) (/.f64 1 (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (-.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (*.f64 x (*.f64 x -1/2))) (*.f64 (pow.f64 x 4) 1/4)) (fma.f64 (pow.f64 x 6) -1/8 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x)) (-.f64 (*.f64 (pow.f64 x 4) 1/4) (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) -1/8 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 3)) (fma.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (-.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (*.f64 x (*.f64 x -1/2))) (*.f64 (pow.f64 x 4) 1/4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 x 6) -1/8 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 3)) (+.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2) (-.f64 (*.f64 (pow.f64 x 4) 1/4) (*.f64 -1/2 (*.f64 (*.f64 x x) (fma.f64 -5/12 (pow.f64 x 3) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 x 4) 1/4) (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2)) (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 x 6) -1/8 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 3))) (neg.f64 (fma.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (-.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (*.f64 x (*.f64 x -1/2))) (*.f64 (pow.f64 x 4) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 x 4) 1/4) (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2))) (neg.f64 (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x (*.f64 x -1/2) x) 3) (*.f64 (pow.f64 (pow.f64 x 3) 3) -125/1728)) (+.f64 (pow.f64 (fma.f64 x (*.f64 x -1/2) x) 2) (-.f64 (*.f64 25/144 (pow.f64 x 6)) (*.f64 (fma.f64 x (*.f64 x -1/2) x) (*.f64 -5/12 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2) (*.f64 (pow.f64 x 4) 1/4)) (-.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x (*.f64 x -1/2) x) 2) (*.f64 25/144 (pow.f64 x 6))) (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (-.f64 (fma.f64 -5/12 (pow.f64 x 3) x) (*.f64 x (*.f64 x -1/2))) (*.f64 (pow.f64 x 4) 1/4)) (fma.f64 (pow.f64 x 6) -1/8 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x)) (-.f64 (*.f64 (pow.f64 x 4) 1/4) (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)) (exp.f64 (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -5/12 (pow.f64 x 3)))) (exp.f64 (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -5/12 (pow.f64 x 3)))) (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (*.f64 x -1/2)))) (exp.f64 (fma.f64 -5/12 (pow.f64 x 3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2) (+.f64 1 (expm1.f64 (fma.f64 -5/12 (pow.f64 x 3) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (*.f64 x -1/2)))) (+.f64 1 (expm1.f64 (fma.f64 -5/12 (pow.f64 x 3) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2) (/.f64 (exp.f64 x) (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (*.f64 x -1/2)))) (/.f64 (exp.f64 x) (pow.f64 (exp.f64 -5/12) (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 -5/12 (pow.f64 x 3) x))) (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 (exp.f64 -5/12) (pow.f64 x 3))) (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 -5/12 (pow.f64 x 3) x)) (+.f64 1 (expm1.f64 (*.f64 x (*.f64 x -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 -5/12 (pow.f64 x 3) x))) (+.f64 1 (expm1.f64 (*.f64 x (*.f64 x -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (pow.f64 (exp.f64 -5/12) (pow.f64 x 3))) (+.f64 1 (expm1.f64 (*.f64 x (*.f64 x -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2) (exp.f64 x)) (pow.f64 (exp.f64 -5/12) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 x (*.f64 x -1/2) x)) (+.f64 1 (expm1.f64 (*.f64 -5/12 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2) (exp.f64 x)) (+.f64 1 (expm1.f64 (*.f64 -5/12 (pow.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -5/12 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x -1 (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (*.f64 x x) -5/12) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 x -1/2) (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3) -5/12 (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -5/12 (pow.f64 x 3)) 1 (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (*.f64 x x) (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) -1/2 (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x x) (*.f64 x -5/12) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (*.f64 x -1/2)) 1 (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 x (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 1 (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -5/12 (pow.f64 x 3)) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (*.f64 x -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 -5/12 (pow.f64 x 3) x) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (*.f64 x -1/2) x) (*.f64 -5/12 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 -5/12 (pow.f64 x 3) x) 2) (/.f64 1 (fma.f64 -5/12 (pow.f64 x 3) x)) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (*.f64 (pow.f64 (cbrt.f64 x) 2) -1/2) (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (cbrt.f64 -5/12)) (cbrt.f64 (*.f64 25/144 (pow.f64 x 6))) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 25/144 (pow.f64 x 6))) (*.f64 x (cbrt.f64 -5/12)) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (neg.f64 (cbrt.f64 x)) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) x)) (pow.f64 (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) x)) 2) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) x)) 2) (cbrt.f64 (fma.f64 -5/12 (pow.f64 x 3) x)) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (*.f64 x -1/2))) (cbrt.f64 (*.f64 (pow.f64 x 4) 1/4)) (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (pow.f64 x 4) 1/4)) (cbrt.f64 (*.f64 x (*.f64 x -1/2))) (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (neg.f64 (sqrt.f64 x)) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) -1) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 -5/12) (pow.f64 x 3/2)) (*.f64 (sqrt.f64 -5/12) (pow.f64 x 3/2)) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 -5/12 (pow.f64 x 3) x)) (sqrt.f64 (fma.f64 -5/12 (pow.f64 x 3) x)) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 -1/2)) (*.f64 x (sqrt.f64 -1/2)) (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 (pow.f64 x 3) 3) -125/1728 (pow.f64 x 3)) (/.f64 1 (fma.f64 x x (fma.f64 25/144 (pow.f64 x 6) (*.f64 (pow.f64 x 4) -5/12)))) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 x 3/2) (*.f64 (pow.f64 x 3/2) -5/12) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (*.f64 x -1/2) x) 1 (*.f64 -5/12 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x -1/2) x)) 2) (cbrt.f64 (fma.f64 x (*.f64 x -1/2) x)) (*.f64 -5/12 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (*.f64 x -1/2) x)) (sqrt.f64 (fma.f64 x (*.f64 x -1/2) x)) (*.f64 -5/12 (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 x 4))) (sqrt.f64 (pow.f64 (cbrt.f64 x) 2)) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 -5/12) (pow.f64 x 3/2))) (-.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 -5/12) (pow.f64 x 3/2))) (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 -5/12 (pow.f64 x 3) (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -5/12 x) (*.f64 x x) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -5/12 (*.f64 x x)) x (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -5/12 (pow.f64 x 3/2)) (pow.f64 x 3/2) (fma.f64 x (*.f64 x -1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 x) x (fma.f64 -5/12 (pow.f64 x 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1/2 (cbrt.f64 (pow.f64 x 4))) (pow.f64 (cbrt.f64 x) 2) (fma.f64 -5/12 (pow.f64 x 3) x))))))"]],"rules":[["egg-rr",102],["egg-rr",17],["egg-rr",17]],"stop":[["node limit",1]],"time":54.492919921875,"type":"rewrite"},{"count":[[144,145]],"egraph":[[6,7094,71,0.034341124],[5,3143,71,0.016516874],[4,779,71,0.006001916],[3,249,75,0.001845791],[2,87,85,0.000732166],[1,41,89,0.000314833],[0,16,89,0.000101083]],"inputs":[["(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -5/12 (pow.f64 x 3)) (*.f64 -1 x)))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -5/12 (pow.f64 x 3)) (*.f64 -1 x)))","(*.f64 -5/12 (pow.f64 x 3))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -5/12 (pow.f64 x 3)))","(*.f64 -5/12 (pow.f64 x 3))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -5/12 (pow.f64 x 3)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x))","(fma.f64 -1/2 (*.f64 x x) (neg.f64 x))","(-.f64 (*.f64 -1/2 (*.f64 x x)) x)","(*.f64 x (fma.f64 x -1/2 -1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -5/12 (pow.f64 x 3)) (*.f64 -1 x)))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -5/12 (pow.f64 x 3) (neg.f64 x)))","(-.f64 (fma.f64 -5/12 (pow.f64 x 3) (*.f64 -1/2 (*.f64 x x))) x)","(-.f64 (*.f64 (*.f64 x x) (+.f64 -1/2 (*.f64 x -5/12))) x)","(-.f64 (*.f64 (*.f64 x x) (fma.f64 x -5/12 -1/2)) x)","(*.f64 x (fma.f64 x (fma.f64 x -5/12 -1/2) -1))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -5/12 (pow.f64 x 3)) (*.f64 -1 x)))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -5/12 (pow.f64 x 3) (neg.f64 x)))","(-.f64 (fma.f64 -5/12 (pow.f64 x 3) (*.f64 -1/2 (*.f64 x x))) x)","(-.f64 (*.f64 (*.f64 x x) (+.f64 -1/2 (*.f64 x -5/12))) x)","(-.f64 (*.f64 (*.f64 x x) (fma.f64 x -5/12 -1/2)) x)","(*.f64 x (fma.f64 x (fma.f64 x -5/12 -1/2) -1))","(*.f64 -5/12 (pow.f64 x 3))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -5/12 (pow.f64 x 3)))","(fma.f64 -1/2 (*.f64 x x) (*.f64 -5/12 (pow.f64 x 3)))","(fma.f64 -5/12 (pow.f64 x 3) (*.f64 -1/2 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 -1/2 (*.f64 x -5/12)))","(*.f64 (*.f64 x x) (fma.f64 x -5/12 -1/2))","(*.f64 x (*.f64 x (fma.f64 x -5/12 -1/2)))","(*.f64 -5/12 (pow.f64 x 3))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -5/12 (pow.f64 x 3)))","(fma.f64 -1/2 (*.f64 x x) (*.f64 -5/12 (pow.f64 x 3)))","(fma.f64 -5/12 (pow.f64 x 3) (*.f64 -1/2 (*.f64 x x)))","(*.f64 (*.f64 x x) (+.f64 -1/2 (*.f64 x -5/12)))","(*.f64 (*.f64 x x) (fma.f64 x -5/12 -1/2))","(*.f64 x (*.f64 x (fma.f64 x -5/12 -1/2)))"]],"stop":[["node limit",1]],"time":47.822998046875,"type":"simplify"},{"compiler":[[2931,2191]],"time":42.13818359375,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","done",0.037441259768442016],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","fresh",59.71430173934616],["(-.f64 (+.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","next",0.5534977515191104]],"compiler":[[7,5],[10,8],[32,24],[10,8],[32,24]],"count":[[148,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[145,1],"picked":[1,0]}],"min-error":[0.01171875],"time":39.808837890625,"type":"prune"},{"compiler":[[153,95]],"locations":[["(pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)",0.01953125,true],["(*.f64 -5/12 (pow.f64 x 3))",0.0625,false],["(log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2))",3.376590478143966,true],["(log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))",3.399644502898088,true]],"time":35.2509765625,"type":"localize"},{"count":[[3,36]],"series":[["(pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)","x","-inf",0.1708984375],["(pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)","x","inf",0.1611328125],["(pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)","x","0",0.243896484375],["(log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2))","x","-inf",4.0869140625],["(log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2))","x","inf",9.385986328125],["(log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2))","x","0",21.56787109375],["(log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))","x","-inf",8.83203125],["(log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))","x","inf",37.47802734375],["(log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))","x","0",64.905029296875]],"time":147.023193359375,"type":"series"},{"count":[[3,61]],"egraph":[[2,2406,34,0.021562791],[1,223,34,0.0037918739999999998],[0,11,43,0.000352416]],"inputs":[["(log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))","(log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2))","(pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1)))) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x -1/4)))) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x -1/4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) (pow.f64 (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 2) (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) (sqrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (*.f64 x (*.f64 x -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (*.f64 x -1/2)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) (*.f64 1/3 (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6) 4))) (log.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)) (cbrt.f64 (*.f64 4 (pow.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4 (pow.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2))) (cbrt.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 2) (*.f64 (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)) (sqrt.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) (*.f64 (sqrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))) 2)) (cbrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))))) (sqrt.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4 (pow.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6) (pow.f64 (pow.f64 (exp.f64 x) x) -1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))) (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))) (*.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6)) (pow.f64 (pow.f64 (exp.f64 x) x) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x -1/4))) (*.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x -1/4))) (pow.f64 (pow.f64 (exp.f64 x) x) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (exp.f64 x) (*.f64 x -1/4)) (cbrt.f64 (pow.f64 (exp.f64 x) (*.f64 x -1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6) (cbrt.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1)))) (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/6) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 x (*.f64 x -1/2))) 2))))))"]],"rules":[["egg-rr",17],["egg-rr",24],["egg-rr",20]],"stop":[["node limit",1]],"time":47.366943359375,"type":"rewrite"},{"count":[[97,76]],"egraph":[[5,5865,294,0.024953375],[4,2028,294,0.012219625],[3,459,294,0.004093042],[2,154,294,0.0012799999999999999],[1,67,294,0.000527625],[0,29,298,0.000176334]],"inputs":[["(*.f64 -1/6 (pow.f64 x 2))","(*.f64 -1/6 (pow.f64 x 2))","(*.f64 -1/6 (pow.f64 x 2))","(*.f64 -1/6 (pow.f64 x 2))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/3 (pow.f64 x 2))","(*.f64 -1/3 (pow.f64 x 2))","(*.f64 -1/3 (pow.f64 x 2))","(*.f64 -1/3 (pow.f64 x 2))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 1/18 (pow.f64 x 4))))","(+.f64 (*.f64 -1/162 (pow.f64 x 6)) (+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 1/18 (pow.f64 x 4)))))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/6 (pow.f64 x 2))","(*.f64 -1/6 (*.f64 x x))","(*.f64 -1/6 (pow.f64 x 2))","(*.f64 -1/6 (*.f64 x x))","(*.f64 -1/6 (pow.f64 x 2))","(*.f64 -1/6 (*.f64 x x))","(*.f64 -1/6 (pow.f64 x 2))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/6))","(*.f64 -1/6 (*.f64 x x))","(*.f64 -1/3 (pow.f64 x 2))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(*.f64 -1/3 (pow.f64 x 2))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(*.f64 -1/3 (pow.f64 x 2))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(*.f64 -1/3 (pow.f64 x 2))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","(log.f64 (pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3))","(*.f64 (*.f64 x x) -1/3)","(*.f64 x (*.f64 x -1/3))","1","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) 1)","(fma.f64 -1/3 (*.f64 x x) 1)","(fma.f64 (*.f64 x x) -1/3 1)","(fma.f64 x (*.f64 x -1/3) 1)","(+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 1/18 (pow.f64 x 4))))","(fma.f64 -1/3 (*.f64 x x) (+.f64 1 (*.f64 1/18 (pow.f64 x 4))))","(fma.f64 (*.f64 x x) -1/3 (fma.f64 1/18 (pow.f64 x 4) 1))","(fma.f64 x (*.f64 x -1/3) (fma.f64 1/18 (pow.f64 x 4) 1))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/18 -1/3) 1)","(+.f64 (*.f64 -1/162 (pow.f64 x 6)) (+.f64 (*.f64 -1/3 (pow.f64 x 2)) (+.f64 1 (*.f64 1/18 (pow.f64 x 4)))))","(fma.f64 -1/162 (pow.f64 x 6) (fma.f64 -1/3 (*.f64 x x) (+.f64 1 (*.f64 1/18 (pow.f64 x 4)))))","(fma.f64 -1/162 (pow.f64 x 6) (fma.f64 (*.f64 x x) -1/3 (fma.f64 1/18 (pow.f64 x 4) 1)))","(fma.f64 x (*.f64 x -1/3) (fma.f64 -1/162 (pow.f64 x 6) (fma.f64 1/18 (pow.f64 x 4) 1)))","(fma.f64 x (*.f64 x -1/3) (fma.f64 1/18 (pow.f64 x 4) (fma.f64 -1/162 (pow.f64 x 6) 1)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))","(pow.f64 (/.f64 1 (exp.f64 (pow.f64 x 2))) 1/3)","(cbrt.f64 (exp.f64 (neg.f64 (*.f64 x x))))","(cbrt.f64 (exp.f64 (*.f64 x (neg.f64 x))))","(cbrt.f64 (pow.f64 (exp.f64 x) (neg.f64 x)))"]],"stop":[["node limit",1]],"time":40.973876953125,"type":"simplify"},{"compiler":[[3188,2299]],"time":39.76513671875,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","done",0.037441259768442016],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","next",59.71430173934616],["(-.f64 (+.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","done",0.5534977515191104]],"compiler":[[7,5],[10,8],[32,24],[10,8]],"count":[[96,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[93,0],"picked":[1,1]}],"min-error":[0.01171875],"time":22.19091796875,"type":"prune"},{"compiler":[[26,19]],"locations":[["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))",0.037441259768442016,true],["(log.f64 (+.f64 1 x))",5.6356445120777625,true],["(log.f64 (-.f64 1 x))",5.919935523525293,true]],"time":7.403076171875,"type":"localize"},{"count":[[3,36]],"series":[["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","x","-inf",0.47900390625],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","x","inf",0.4189453125],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","x","0",0.166015625],["(log.f64 (+.f64 1 x))","x","-inf",0.19921875],["(log.f64 (+.f64 1 x))","x","inf",0.22607421875],["(log.f64 (+.f64 1 x))","x","0",0.19091796875],["(log.f64 (-.f64 1 x))","x","-inf",0.22412109375],["(log.f64 (-.f64 1 x))","x","inf",0.259033203125],["(log.f64 (-.f64 1 x))","x","0",0.294921875]],"time":2.64892578125,"type":"series"},{"count":[[3,71]],"egraph":[[2,2184,18,0.020559792],[1,167,18,0.00292275],[0,8,20,0.000215542]],"inputs":[["(log.f64 (-.f64 1 x))","(log.f64 (+.f64 1 x))","(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log1p.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (-.f64 1 x)) 2)) (log.f64 (cbrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (-.f64 1 x))) (log.f64 (sqrt.f64 (-.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 (neg.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (pow.f64 x 3))) (log.f64 (+.f64 1 (fma.f64 x x x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (*.f64 x x))) (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) 2) (cbrt.f64 (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) (sqrt.f64 (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 (neg.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 (neg.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 (neg.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 (neg.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 (neg.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (+.f64 1 x)) 2)) (log.f64 (cbrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (+.f64 1 x))) (log.f64 (sqrt.f64 (+.f64 1 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 1 (pow.f64 x 3))) (log.f64 (+.f64 1 (-.f64 (*.f64 x x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (*.f64 x x))) (log1p.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log1p.f64 x)) (pow.f64 (cbrt.f64 (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) (cbrt.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log1p.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log1p.f64 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log1p.f64 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log1p.f64 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log1p.f64 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log1p.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 x)))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log1p.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log1p.f64 (neg.f64 x)) (/.f64 1 (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))) (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))) 2) (cbrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) 2) (*.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) (/.f64 1 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))) (sqrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) (*.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) (/.f64 1 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log1p.f64 (neg.f64 x))) (/.f64 1 (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log1p.f64 x)) (log1p.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) 2) 1) (/.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) 1) (/.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2)) (/.f64 (log1p.f64 (neg.f64 x)) (cbrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) 2) (pow.f64 (cbrt.f64 (log1p.f64 x)) 2)) (cbrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) (pow.f64 (cbrt.f64 (log1p.f64 x)) 2)) (/.f64 (sqrt.f64 (log1p.f64 (neg.f64 x))) (cbrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log1p.f64 x))) (/.f64 (log1p.f64 (neg.f64 x)) (sqrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) 2) (sqrt.f64 (log1p.f64 x))) (/.f64 (cbrt.f64 (log1p.f64 (neg.f64 x))) (sqrt.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log1p.f64 x) (log1p.f64 (neg.f64 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log1p.f64 (neg.f64 x)) (neg.f64 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (-.f64 1 x) (/.f64 1 (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (log1p.f64 (neg.f64 x)) 3) (pow.f64 (log1p.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))))))))"]],"rules":[["egg-rr",31],["egg-rr",20],["egg-rr",20]],"stop":[["node limit",1]],"time":43.9521484375,"type":"rewrite"},{"count":[[107,141]],"egraph":[[2,1946,1399,0.015745376],[1,559,1496,0.003937292],[0,163,1636,0.000815375]],"inputs":[["(*.f64 -1 x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -1 x)))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1 x) (*.f64 -1/4 (pow.f64 x 4)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (/.f64 1 x))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))))","(*.f64 -1 (log.f64 (/.f64 -1 x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (/.f64 1 x))","(-.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))))","x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1/4 (pow.f64 x 4)) x)))","(*.f64 -1 (log.f64 (/.f64 1 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (/.f64 1 x))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (/.f64 1 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (/.f64 1 x))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","-1","(-.f64 (*.f64 -1 x) 1)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))) (/.f64 2 (*.f64 (log.f64 (/.f64 1 x)) x))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 1/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (log.f64 (/.f64 1 x)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (log.f64 (/.f64 1 x)))))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (*.f64 -1 (/.f64 (-.f64 (*.f64 1/3 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 -1/2 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))))))) (pow.f64 x 3))))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x))","(fma.f64 -1/2 (*.f64 x x) (neg.f64 x))","(fma.f64 x (*.f64 x -1/2) (neg.f64 x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (*.f64 -1 x)))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -1/3 (pow.f64 x 3) (neg.f64 x)))","(-.f64 (fma.f64 -1/2 (*.f64 x x) (*.f64 -1/3 (pow.f64 x 3))) x)","(-.f64 (*.f64 (*.f64 x x) (+.f64 -1/2 (*.f64 -1/3 x))) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1 x) (*.f64 -1/4 (pow.f64 x 4)))))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 -1 x (*.f64 -1/4 (pow.f64 x 4)))))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 -1/4 (pow.f64 x 4) (neg.f64 x))))","(fma.f64 x (*.f64 x -1/2) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 -1/4 (pow.f64 x 4) (neg.f64 x))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1))","(fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1))","(+.f64 (log.f64 x) (log.f64 -1))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (/.f64 1 x))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (/.f64 1 x))","(+.f64 (log.f64 x) (+.f64 (log.f64 -1) (/.f64 -1 x)))","(+.f64 (log.f64 -1) (+.f64 (log.f64 x) (/.f64 -1 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (+.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (log.f64 x) (-.f64 (-.f64 (log.f64 -1) (/.f64 1/2 (*.f64 x x))) (/.f64 1 x)))","(+.f64 (log.f64 x) (+.f64 (+.f64 (log.f64 -1) (/.f64 -1/2 (*.f64 x x))) (/.f64 -1 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (+.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1/3 (pow.f64 x 3)))))","(+.f64 (log.f64 x) (-.f64 (-.f64 (log.f64 -1) (/.f64 1/2 (*.f64 x x))) (+.f64 (/.f64 1 x) (/.f64 1/3 (pow.f64 x 3)))))","(+.f64 (log.f64 x) (-.f64 (+.f64 (+.f64 (log.f64 -1) (/.f64 -1/2 (*.f64 x x))) (/.f64 -1 x)) (/.f64 1/3 (pow.f64 x 3))))","(*.f64 -1 (log.f64 (/.f64 -1 x)))","(neg.f64 (log.f64 (/.f64 -1 x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (/.f64 1 x))","(-.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (/.f64 1 x))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (/.f64 -1 x))","(-.f64 (/.f64 -1 x) (log.f64 (/.f64 -1 x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (/.f64 1 x)))","(-.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (+.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(-.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (/.f64 -1 x)) (/.f64 1/2 (*.f64 x x)))","(+.f64 (-.f64 (/.f64 -1 x) (log.f64 (/.f64 -1 x))) (/.f64 -1/2 (*.f64 x x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 x 2))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))))","(-.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (+.f64 (/.f64 1/2 (*.f64 x x)) (+.f64 (/.f64 1 x) (/.f64 1/3 (pow.f64 x 3)))))","(-.f64 (-.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (/.f64 -1 x)) (/.f64 1/2 (*.f64 x x))) (/.f64 1/3 (pow.f64 x 3)))","(+.f64 (-.f64 (-.f64 (/.f64 -1 x) (log.f64 (/.f64 -1 x))) (/.f64 1/3 (pow.f64 x 3))) (/.f64 -1/2 (*.f64 x x)))","x","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) x)","(fma.f64 -1/2 (*.f64 x x) x)","(fma.f64 x (*.f64 x -1/2) x)","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) x))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 1/3 (pow.f64 x 3) x))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 (pow.f64 x 3) 1/3 x))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 3) 1/3 x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1/4 (pow.f64 x 4)) x)))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 -1/4 (pow.f64 x 4) x)))","(fma.f64 -1/2 (*.f64 x x) (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 -1/4 (pow.f64 x 4) x)))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 3) 1/3 (fma.f64 -1/4 (pow.f64 x 4) x)))","(*.f64 -1 (log.f64 (/.f64 1 x)))","(neg.f64 (neg.f64 (log.f64 x)))","(log.f64 x)","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (/.f64 1 x))","(fma.f64 -1 (neg.f64 (log.f64 x)) (/.f64 1 x))","(+.f64 (/.f64 1 x) (log.f64 x))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (/.f64 1 x)) (/.f64 1/2 (*.f64 x x)))","(+.f64 (log.f64 x) (-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (log.f64 x) (/.f64 -1/2 (*.f64 x x))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (+.f64 (/.f64 1 x) (/.f64 1/3 (pow.f64 x 3)))) (/.f64 1/2 (*.f64 x x)))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 1/3 (pow.f64 x 3))) (-.f64 (log.f64 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (+.f64 (/.f64 1 x) (+.f64 (log.f64 x) (/.f64 -1/2 (*.f64 x x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))","(-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (/.f64 1 x)))","(fma.f64 -1 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 1 x) (log.f64 -1)))","(+.f64 (/.f64 1 x) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (/.f64 1 x))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 1 x) (log.f64 -1))) (/.f64 1/2 (*.f64 x x)))","(+.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(-.f64 (log.f64 -1) (-.f64 (log.f64 (/.f64 -1 x)) (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x)))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (+.f64 (/.f64 1 x) (/.f64 1/3 (pow.f64 x 3)))) (/.f64 1/2 (*.f64 x x)))","(+.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (+.f64 (/.f64 1 x) (-.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 1/2 (*.f64 x x)))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 1/3 (pow.f64 x 3))) (-.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (/.f64 1/2 (*.f64 x x))))","-1","(-.f64 (*.f64 -1 x) 1)","(fma.f64 -1 x -1)","(-.f64 -1 x)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (*.f64 -1 x)) 1)","(+.f64 (fma.f64 -1/2 (*.f64 x x) (neg.f64 x)) -1)","(fma.f64 -1/2 (*.f64 x x) (fma.f64 -1 x -1))","(fma.f64 x (*.f64 x -1/2) (-.f64 -1 x))","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","(+.f64 (fma.f64 -1/2 (*.f64 x x) (fma.f64 -1 x (*.f64 (pow.f64 x 3) -5/12))) -1)","(fma.f64 -1/2 (*.f64 x x) (+.f64 (-.f64 (*.f64 (pow.f64 x 3) -5/12) x) -1))","(fma.f64 x (*.f64 x -1/2) (fma.f64 (pow.f64 x 3) -5/12 (-.f64 -1 x)))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))","(neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 (+.f64 (log.f64 x) (log.f64 -1))) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (log.f64 x)))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))) (/.f64 2 (*.f64 (log.f64 (/.f64 1 x)) x))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)))","(-.f64 (fma.f64 -1 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x))) (/.f64 2 (*.f64 x (neg.f64 (log.f64 x))))) (/.f64 (log.f64 -1) (*.f64 x (pow.f64 (neg.f64 (log.f64 x)) 2))))","(-.f64 (-.f64 (/.f64 2 (*.f64 x (neg.f64 (log.f64 x)))) (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (neg.f64 (log.f64 x)))) (/.f64 (/.f64 (log.f64 -1) x) (*.f64 (log.f64 x) (log.f64 x))))","(-.f64 (/.f64 (/.f64 -2 (log.f64 x)) x) (+.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (neg.f64 (log.f64 x))) (/.f64 (/.f64 (log.f64 -1) x) (*.f64 (log.f64 x) (log.f64 x)))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x)))))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))))))","(+.f64 (/.f64 2 (*.f64 x (neg.f64 (log.f64 x)))) (-.f64 (+.f64 (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x)))) (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x))))) (+.f64 (fma.f64 -1 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 (log.f64 -1) (*.f64 x (pow.f64 (neg.f64 (log.f64 x)) 2)))) (*.f64 -1/2 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (*.f64 (*.f64 x x) (pow.f64 (neg.f64 (log.f64 x)) 2)))))))","(+.f64 (/.f64 2 (*.f64 x (neg.f64 (log.f64 x)))) (-.f64 (-.f64 (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (neg.f64 (log.f64 x)))) (-.f64 (fma.f64 -1/2 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (*.f64 (log.f64 x) (log.f64 x))) (*.f64 x x)) (/.f64 (/.f64 (log.f64 -1) x) (*.f64 (log.f64 x) (log.f64 x)))) (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))))))","(+.f64 (/.f64 (/.f64 -2 (log.f64 x)) x) (+.f64 (-.f64 (-.f64 (/.f64 (/.f64 -1/2 (log.f64 x)) (*.f64 x x)) (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (neg.f64 (log.f64 x)))) (fma.f64 -1/2 (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (*.f64 (*.f64 x x) (*.f64 (log.f64 x) (log.f64 x)))) (/.f64 (/.f64 (log.f64 -1) x) (*.f64 (log.f64 x) (log.f64 x))))) (/.f64 (-.f64 (/.f64 2 (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 3))) (*.f64 x x))))","(-.f64 (+.f64 (*.f64 2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) x))) (+.f64 (*.f64 1/2 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (+.f64 (*.f64 1/3 (/.f64 1 (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (log.f64 (/.f64 1 x))))))) (+.f64 (*.f64 1/2 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 1/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 1/2 (/.f64 1 (log.f64 (/.f64 1 x)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 -1)) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (log.f64 (/.f64 1 x)))))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 2 (/.f64 1 (log.f64 (/.f64 1 x)))) (/.f64 (log.f64 -1) (pow.f64 (log.f64 (/.f64 1 x)) 2))) (*.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2)))) (/.f64 (log.f64 -1) (*.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))))","(+.f64 (/.f64 2 (*.f64 x (neg.f64 (log.f64 x)))) (-.f64 (+.f64 (+.f64 (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 1/3 (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x))))) (neg.f64 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (neg.f64 (log.f64 x))))) (fma.f64 1/2 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x)))) (fma.f64 1/3 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (*.f64 (pow.f64 x 3) (pow.f64 (neg.f64 (log.f64 x)) 2))) (fma.f64 -1/2 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (*.f64 (*.f64 x x) (pow.f64 (neg.f64 (log.f64 x)) 2))) (fma.f64 -1 (/.f64 (-.f64 (/.f64 1/2 (neg.f64 (log.f64 x))) (fma.f64 -1/2 (/.f64 (fma.f64 -1 (neg.f64 (log.f64 x)) (log.f64 -1)) (pow.f64 (neg.f64 (log.f64 x)) 2)) (neg.f64 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (neg.f64 (log.f64 x)))))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x)))) (fma.f64 -1 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 2))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 (log.f64 -1) (*.f64 x (pow.f64 (neg.f64 (log.f64 x)) 2))))))))))","(+.f64 (/.f64 2 (*.f64 x (neg.f64 (log.f64 x)))) (-.f64 (-.f64 (+.f64 (/.f64 1/2 (*.f64 (*.f64 x x) (neg.f64 (log.f64 x)))) (/.f64 1/3 (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x))))) (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (neg.f64 (log.f64 x)))) (fma.f64 1/2 (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x)))) (fma.f64 1/3 (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (*.f64 (pow.f64 x 3) (*.f64 (log.f64 x) (log.f64 x)))) (fma.f64 -1/2 (/.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (*.f64 (log.f64 x) (log.f64 x))) (*.f64 x x)) (-.f64 (-.f64 (/.f64 (/.f64 (log.f64 -1) x) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 (*.f64 x x) (neg.f64 (log.f64 x))))) (/.f64 (-.f64 (/.f64 1/2 (neg.f64 (log.f64 x))) (-.f64 (/.f64 (*.f64 -1/2 (+.f64 (log.f64 x) (log.f64 -1))) (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (-.f64 (/.f64 2 (neg.f64 (log.f64 x))) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (neg.f64 (log.f64 x))))) (*.f64 (pow.f64 x 3) (neg.f64 (log.f64 x))))))))))","(+.f64 (/.f64 (/.f64 -2 (log.f64 x)) x) (+.f64 (/.f64 (/.f64 -1/2 (log.f64 x)) (*.f64 x x)) (-.f64 (-.f64 (-.f64 (/.f64 (/.f64 -1/3 (log.f64 x)) (pow.f64 x 3)) (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (neg.f64 (log.f64 x)))) (fma.f64 1/2 (/.f64 (-.f64 (/.f64 2 (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 3))) (pow.f64 x 3)) (*.f64 (/.f64 (+.f64 (log.f64 x) (log.f64 -1)) (*.f64 (log.f64 x) (log.f64 x))) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 -1/2 (*.f64 x x)))))) (+.f64 (/.f64 (/.f64 (log.f64 -1) x) (*.f64 (log.f64 x) (log.f64 x))) (*.f64 (/.f64 1 (log.f64 x)) (+.f64 (/.f64 (-.f64 (/.f64 -2 (log.f64 x)) (/.f64 (log.f64 -1) (*.f64 (log.f64 x) (log.f64 x)))) (*.f64 x x)) (/.f64 (+.f64 (/.f64 -1/2 (log.f64 x)) (-.f64 (-.f64 (/.f64 2 (*.f64 (log.f64 x) (log.f64 x))) (/.f64 (log.f64 -1) (pow.f64 (neg.f64 (log.f64 x)) 3))) (*.f64 (/.f64 (/.f64 -1/2 (log.f64 x)) (log.f64 x)) (+.f64 (log.f64 x) (log.f64 -1))))) (pow.f64 x 3))))))))","(*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))","(/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))","(+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)))","(fma.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (neg.f64 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) x)))","(-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x))))","(fma.f64 -1 (/.f64 (fma.f64 -1 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (/.f64 1/2 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))))) (*.f64 x x)) (fma.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (neg.f64 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) x))))","(-.f64 (-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x)) (/.f64 (-.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)))) (*.f64 x x)))","(-.f64 (-.f64 (/.f64 (neg.f64 (/.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (-.f64 (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))))) x)) x) (/.f64 (log.f64 (/.f64 -1 x)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 1/2 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (*.f64 -1 (/.f64 (-.f64 (*.f64 1/3 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 3))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 1/2 (/.f64 1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 -1/2 (/.f64 (-.f64 (/.f64 1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))))))) (pow.f64 x 3))))))","(fma.f64 -1 (/.f64 (fma.f64 -1 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (/.f64 1/2 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))))) (*.f64 x x)) (fma.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (*.f64 -1 (+.f64 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) x) (/.f64 (-.f64 (/.f64 1/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 3)) (fma.f64 -1 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (fma.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (+.f64 (/.f64 1/2 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2)) (*.f64 -1/2 (/.f64 (-.f64 (/.f64 1 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))))))))) (pow.f64 x 3))))))","(-.f64 (-.f64 (-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x)) (/.f64 (-.f64 (/.f64 1/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (-.f64 (fma.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (fma.f64 -1/2 (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))) (/.f64 1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (/.f64 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))))))) (pow.f64 x 3))) (/.f64 (-.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)))) (*.f64 x x)))","(-.f64 (-.f64 (/.f64 (neg.f64 (log.f64 (/.f64 -1 x))) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (-.f64 (/.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) x)) (+.f64 (/.f64 (-.f64 (/.f64 1/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3)) (+.f64 (fma.f64 1/3 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2))) (*.f64 (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))) (+.f64 -1/2 (/.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))))))) (pow.f64 x 3)) (/.f64 (fma.f64 1/2 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (-.f64 (/.f64 1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (-.f64 (/.f64 1 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 3))))) (*.f64 x x))))"]],"stop":[["node limit",1]],"time":39.796875,"type":"simplify"},{"compiler":[[3235,2323]],"time":35.8271484375,"type":"eval"},{"alts":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","done",0.037441259768442016],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))","done",59.71430173934616],["(*.f64 (log1p.f64 (neg.f64 x)) (/.f64 1 (log1p.f64 x)))","fresh",0.166347509768442],["(-.f64 (+.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","done",0.5534977515191104]],"compiler":[[7,5],[10,8],[9,7],[32,24]],"count":[[144,4]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[141,1],"picked":[1,1]}],"min-error":[0],"time":22.44091796875,"type":"prune"},{"accuracy":[0.037441259768442016],"baseline":[0.037441259768442016],"branch":[["x",0.037441259768442016,1],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))",0.037441259768442016,1]],"compiler":[[2,1],[10,8],[72,52]],"count":[[5,1]],"inputs":[["(*.f64 (log1p.f64 (neg.f64 x)) (/.f64 1 (log1p.f64 x)))","(-.f64 (+.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)) 2)) (log.f64 (cbrt.f64 (pow.f64 (pow.f64 (exp.f64 x) x) -1/2)))) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","(-.f64 (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 (*.f64 -1 x) (*.f64 -5/12 (pow.f64 x 3)))) 1)","(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))","(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))"]],"link":["."],"name":["qlog (example 3.10)"],"oracle":[60.176561759206244],"outputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"time":6.955078125,"times":[["x",3.474853515625],["(/.f64 (log.f64 (-.f64 1 x)) (log.f64 (+.f64 1 x)))",2.01416015625]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[3,13,10,8.2209e-5],[2,12,10,6.3001e-5],[1,10,10,4.3834e-5],[0,6,10,2.5292e-5]],"inputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (log1p.f64 (neg.f64 x)) (log1p.f64 x))"]],"stop":[["fuel",1],["saturated",1]],"time":8.4208984375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.64013671875,"type":"end"}]
[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.4936581836082041,0.08390237903222442,0.42243943735957146],[11,0.4721947843208909,0.12097552325576544,0.40682969242334366],[10,0.42926798574626446,0.16390232183039188,0.40682969242334366],[9,0.39024362340569496,0.23414617404341698,0.37561020255088806],[8,0.31219489872455597,0.31219489872455597,0.37561020255088806],[7,0.24975591897964478,0.43707285821437836,0.31317122280597687],[6,0.24975591897964478,0.6243897974491119,0.1258542835712433],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":25.73388671875,"type":"analyze"},{"outcomes":[["body",256,"invalid",9.501220703125,253],["body",256,"valid",308.65380859375,8256]],"time":325.634033203125,"type":"sample"},{"compiler":[[13,8]],"egraph":[[0,2,2,1.417e-6],[3,76,22,0.0005101670000000001],[2,62,22,0.00034737600000000004],[1,28,22,0.000186209],[0,12,26,6.3709e-5]],"inputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","(+.f64 (+.f64 (*.f64 y 2) (*.f64 y y)) (*.f64 x x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 x 2) (*.f64 y y))","(+.f64 (+.f64 (*.f64 y 2) (*.f64 y y)) (*.f64 x x))","(+.f64 (*.f64 x x) (*.f64 y (+.f64 2 y)))","(fma.f64 x x (*.f64 y (+.f64 2 y)))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":22.950927734375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[3,42,11,0.000318792],[2,34,11,0.000221125],[1,17,11,0.000121167],[0,9,13,4.5583e-5]],"inputs":[["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 x 2) (*.f64 y y))"]],"stop":[["saturated",1]],"time":10.4560546875,"type":"simplify"},{"compiler":[[21,11]],"time":0.3369140625,"type":"eval"},{"alts":[["(fma.f64 x (+.f64 x 2) (*.f64 y y))","next",0.01171875],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))","fresh",0.029628759768442016]],"compiler":[[10,6],[13,8],[10,6],[13,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0078125],"time":1.197998046875,"type":"prune"},{"compiler":[[19,9]],"locations":[["(fma.f64 x (+.f64 x 2) (*.f64 y y))",0.01171875,true]],"time":4.6591796875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x (+.f64 x 2) (*.f64 y y))","y","-inf",0.19384765625],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","y","inf",0.301025390625],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","y","0",0.322021484375],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","x","-inf",0.322021484375],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","x","inf",0.297119140625],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","x","0",0.368896484375]],"time":1.886962890625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1860,11,0.018491584],[1,150,11,0.002658542],[0,7,11,0.000213292]],"inputs":[["(fma.f64 x (+.f64 x 2) (*.f64 y y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 x 2)) 1) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (+.f64 x 2) (*.f64 y y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 x 2) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))) 2) (cbrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))) (sqrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 3) (pow.f64 (*.f64 y y) 3)) (+.f64 (*.f64 (*.f64 x (+.f64 x 2)) (*.f64 x (+.f64 x 2))) (-.f64 (pow.f64 y 4) (*.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (+.f64 x 2)) (*.f64 x (+.f64 x 2))) (pow.f64 y 4)) (-.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (+.f64 x 2) (*.f64 y y))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":35.64794921875,"type":"rewrite"},{"count":[[45,33]],"egraph":[[19,7722,214,0.111530374],[18,7676,214,0.099250082],[17,7555,214,0.089503624],[16,7170,214,0.079403416],[15,6755,214,0.069562625],[14,6232,214,0.060518583],[13,5299,214,0.051457208],[12,4501,214,0.041998583],[11,3840,214,0.033784833],[10,3334,214,0.026548125],[9,2995,214,0.020418666],[8,2735,214,0.015525332999999999],[7,2404,214,0.011379582999999999],[6,1737,214,0.007762666],[5,511,214,0.0040001659999999994],[4,192,214,0.001605291],[3,87,214,0.000810708],[2,59,214,0.000460875],[1,34,214,0.00025262500000000003],[0,14,262,8.9875e-5]],"inputs":[["(pow.f64 y 2)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(*.f64 (+.f64 2 x) x)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))"]],"method":["egg-herbie"],"outputs":[["(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(fma.f64 2 x (*.f64 y y))","(fma.f64 y y (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(*.f64 (+.f64 2 x) x)","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 2 x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 y y (*.f64 x (+.f64 2 x)))"]],"stop":[["node limit",1]],"time":130.544921875,"type":"simplify"},{"compiler":[[364,202]],"time":4.776123046875,"type":"eval"},{"alts":[["(fma.f64 y y (*.f64 x (+.f64 2 x)))","next",0.01171875],["(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","fresh",0.029628759768442016],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","done",0.01171875]],"compiler":[[10,6],[13,10],[10,6],[10,6],[13,10]],"count":[[35,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[33,2],"picked":[1,1]}],"min-error":[0],"time":5.891845703125,"type":"prune"},{"compiler":[[21,12]],"locations":[["(*.f64 x (+.f64 2 x))",0.0078125,true],["(fma.f64 y y (*.f64 x (+.f64 2 x)))",0.0078125,true]],"time":5.13720703125,"type":"localize"},{"count":[[2,36]],"series":[["(*.f64 x (+.f64 2 x))","x","-inf",0.218994140625],["(*.f64 x (+.f64 2 x))","x","inf",0.239013671875],["(*.f64 x (+.f64 2 x))","x","0",0.177978515625],["(fma.f64 y y (*.f64 x (+.f64 2 x)))","x","-inf",0.243896484375],["(fma.f64 y y (*.f64 x (+.f64 2 x)))","x","inf",0.205078125],["(fma.f64 y y (*.f64 x (+.f64 2 x)))","x","0",0.21484375],["(fma.f64 y y (*.f64 x (+.f64 2 x)))","y","-inf",0.304931640625],["(fma.f64 y y (*.f64 x (+.f64 2 x)))","y","inf",0.2880859375],["(fma.f64 y y (*.f64 x (+.f64 2 x)))","y","0",0.48681640625]],"time":2.489013671875,"type":"series"},{"count":[[2,46]],"egraph":[[2,1964,18,0.019363251],[1,153,18,0.002742667],[0,7,18,0.000211542]],"inputs":[["(fma.f64 y y (*.f64 x (+.f64 2 x)))","(*.f64 x (+.f64 2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 x 2)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) 1) (*.f64 x (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (*.f64 x 2)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y y (*.f64 x (+.f64 x 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y y (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) (pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) 2) (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y (sqrt.f64 (*.f64 x (+.f64 x 2)))) (hypot.f64 y (sqrt.f64 (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y y) 3) (pow.f64 (*.f64 x (+.f64 x 2)) 3)) (+.f64 (*.f64 (*.f64 y y) (*.f64 y y)) (-.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 2) (*.f64 (*.f64 y y) (*.f64 x (+.f64 x 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y y) (*.f64 y y)) (pow.f64 (*.f64 x (+.f64 x 2)) 2)) (-.f64 (*.f64 y y) (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 y (sqrt.f64 (*.f64 x (+.f64 x 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 x 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y y (*.f64 x (+.f64 x 2)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 2) 1) (*.f64 (*.f64 x x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (+.f64 x 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 2) 3) (pow.f64 (*.f64 x x) 3)) (+.f64 (*.f64 (*.f64 x 2) (*.f64 x 2)) (-.f64 (*.f64 (*.f64 x x) (*.f64 x x)) (*.f64 (*.f64 x 2) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 2) (*.f64 x 2)) (*.f64 (*.f64 x x) (*.f64 x x))) (-.f64 (*.f64 x 2) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 8 (pow.f64 x 3)) x) (+.f64 4 (*.f64 x (-.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 4 (*.f64 x x)) x) (-.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 8 (pow.f64 x 3))) (+.f64 4 (*.f64 x (-.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 4 (*.f64 x x))) (-.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 x 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 x 2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 x 2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 x 2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (+.f64 x 2) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 x 2) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 x 2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 2 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 2 x (*.f64 x x))))))"]],"rules":[["egg-rr",24],["egg-rr",22]],"stop":[["node limit",1]],"time":40.10986328125,"type":"rewrite"},{"count":[[82,59]],"egraph":[[19,7706,289,0.11166595900000001],[18,7660,289,0.099503293],[17,7537,289,0.089654543],[16,7144,289,0.079559251],[15,6731,289,0.069578418],[14,6208,289,0.060610668000000006],[13,5277,289,0.051461543000000005],[12,4481,289,0.041867126000000005],[11,3816,289,0.033747043000000004],[10,3310,289,0.02649796],[9,2969,289,0.020294001000000002],[8,2709,289,0.015318001000000001],[7,2378,289,0.011193542],[6,1721,289,0.0076200420000000005],[5,521,289,0.003957167],[4,194,289,0.001611042],[3,87,289,0.000822667],[2,59,289,0.000468709],[1,34,289,0.000264584],[0,14,319,9.6125e-5]],"inputs":[["(*.f64 (+.f64 2 x) x)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 2 x) x)","(*.f64 x (+.f64 2 x))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (pow.f64 y 2) (*.f64 (+.f64 2 x) x))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(fma.f64 2 x (*.f64 y y))","(fma.f64 y y (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(*.f64 x (+.f64 2 x))"]],"stop":[["node limit",1]],"time":133.778076171875,"type":"simplify"},{"compiler":[[702,404]],"time":9.048828125,"type":"eval"},{"alts":[["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","next",0.021816259768442016],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","done",0.01171875]],"compiler":[[11,6],[10,6],[11,6]],"count":[[62,2]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[59,1],"picked":[1,0]}],"min-error":[0],"time":10.485107421875,"type":"prune"},{"compiler":[[23,9]],"locations":[["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))",0.0078125,true],["(fma.f64 x 2 (*.f64 x x))",0.014003759768442016,true]],"time":5.22412109375,"type":"localize"},{"count":[[2,36]],"series":[["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","x","-inf",0.1591796875],["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","x","inf",0.156982421875],["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","x","0",0.179931640625],["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","y","-inf",0.1669921875],["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","y","inf",0.19287109375],["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","y","0",0.566162109375],["(fma.f64 x 2 (*.f64 x x))","x","-inf",0.23291015625],["(fma.f64 x 2 (*.f64 x x))","x","inf",0.278076171875],["(fma.f64 x 2 (*.f64 x x))","x","0",0.364990234375]],"time":2.407958984375,"type":"series"},{"count":[[2,44]],"egraph":[[2,1564,18,0.015849459],[1,139,18,0.0022082919999999997],[0,7,20,0.000199292]],"inputs":[["(fma.f64 x 2 (*.f64 x x))","(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) (*.f64 x 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 2) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 2) 1) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (+.f64 2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 2 x))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 2 x))) 2) (cbrt.f64 (*.f64 x (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (+.f64 2 x))) (sqrt.f64 (*.f64 x (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 2) 3) (pow.f64 (*.f64 x x) 3)) (+.f64 (*.f64 (*.f64 x 2) (*.f64 x 2)) (-.f64 (pow.f64 x 4) (*.f64 (*.f64 x 2) (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 2) (*.f64 x 2)) (pow.f64 x 4)) (-.f64 (*.f64 x 2) (*.f64 x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 2 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 2 x)) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y y) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y y) 1) (*.f64 x (+.f64 2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (*.f64 y y) (*.f64 x 2)) (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y y (*.f64 x (+.f64 2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y y (*.f64 x (+.f64 2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y y (*.f64 x (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))) (pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))) 2) (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 y (sqrt.f64 (*.f64 x (+.f64 2 x)))) (hypot.f64 y (sqrt.f64 (*.f64 x (+.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y y) 3) (pow.f64 (*.f64 x (+.f64 2 x)) 3)) (+.f64 (*.f64 (*.f64 y y) (*.f64 y y)) (-.f64 (pow.f64 (*.f64 x (+.f64 2 x)) 2) (*.f64 (*.f64 y y) (*.f64 x (+.f64 2 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y y) (*.f64 y y)) (pow.f64 (*.f64 x (+.f64 2 x)) 2)) (-.f64 (*.f64 y y) (*.f64 x (+.f64 2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y y (*.f64 x (+.f64 2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 y (sqrt.f64 (*.f64 x (+.f64 2 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y y (*.f64 x (+.f64 2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y y (*.f64 x (+.f64 2 x)))))))))"]],"rules":[["egg-rr",22],["egg-rr",22]],"stop":[["node limit",1]],"time":36.011962890625,"type":"rewrite"},{"count":[[80,54]],"egraph":[[19,7684,289,0.11084749900000002],[18,7638,289,0.09871795700000001],[17,7513,289,0.08893208200000001],[16,7116,289,0.07892591600000001],[15,6703,289,0.06901837400000001],[14,6178,289,0.060103958000000006],[13,5245,289,0.051031291000000006],[12,4455,289,0.041658833000000006],[11,3794,289,0.033538916],[10,3288,289,0.026274291],[9,2949,289,0.020093499],[8,2689,289,0.015143582999999999],[7,2357,289,0.011055542],[6,1665,289,0.007490416999999999],[5,500,289,0.003848375],[4,188,289,0.0015805419999999999],[3,88,289,0.000796458],[2,55,289,0.000450958],[1,28,304,0.000239375],[0,11,346,8.4542e-5]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 y 2)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(pow.f64 x 2)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(pow.f64 y 2)","(*.f64 y y)","(+.f64 (*.f64 2 x) (pow.f64 y 2))","(fma.f64 2 x (*.f64 y y))","(fma.f64 y y (*.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(pow.f64 x 2)","(*.f64 x x)","(+.f64 (*.f64 2 x) (pow.f64 x 2))","(fma.f64 2 x (*.f64 x x))","(*.f64 x (+.f64 x 2))","(*.f64 x (+.f64 2 x))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(+.f64 (fma.f64 2 x (*.f64 y y)) (*.f64 x x))","(fma.f64 2 x (fma.f64 y y (*.f64 x x)))","(fma.f64 x (+.f64 2 x) (*.f64 y y))"]],"stop":[["node limit",1]],"time":132.95703125,"type":"simplify"},{"compiler":[[654,383]],"time":8.5078125,"type":"eval"},{"alts":[["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","done",0.021816259768442016],["(fma.f64 x (+.f64 x 2) (*.f64 y y))","done",0.01171875]],"compiler":[[11,6],[10,6]],"count":[[56,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[54,0],"picked":[1,1]}],"min-error":[0],"time":8.840087890625,"type":"prune"},{"accuracy":[0.01171875],"baseline":[0.01171875],"branch":[["x",0.01171875,1],["y",0.01171875,1],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))",0.01171875,1],["(+.f64 (*.f64 x 2) (*.f64 x x))",0.01171875,1],["(*.f64 y y)",0.01171875,1],["(*.f64 y y)",0.01171875,1]],"compiler":[[3,2],[3,2],[13,8],[9,6],[5,3],[5,3],[49,26]],"count":[[5,1]],"inputs":[["(fma.f64 y y (fma.f64 x 2 (*.f64 x x)))","(fma.f64 y y (*.f64 x (+.f64 2 x)))","(+.f64 (*.f64 2 x) (+.f64 (pow.f64 y 2) (pow.f64 x 2)))","(fma.f64 x (+.f64 x 2) (*.f64 y y))","(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))"]],"link":["."],"name":["Numeric.Log:$clog1p from log-domain-0.10.2.1, A"],"oracle":[0.033535009768442016],"outputs":[["(fma.f64 y y (*.f64 x (+.f64 2 x)))"]],"time":21.93408203125,"times":[["x",3.671142578125],["y",4.3330078125],["(+.f64 (+.f64 (*.f64 x 2) (*.f64 x x)) (*.f64 y y))",3.737060546875],["(+.f64 (*.f64 x 2) (*.f64 x x))",3.72607421875],["(*.f64 y y)",2.73095703125],["(*.f64 y y)",2.593994140625]],"type":"regimes"},{"compiler":[[10,6]],"egraph":[[1,9,11,2.9375000000000003e-5],[0,7,11,1.7625e-5]],"inputs":[["(fma.f64 y y (*.f64 x (+.f64 2 x)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 y y (*.f64 x (+.f64 2 x)))","(fma.f64 y y (*.f64 x (+.f64 x 2)))"]],"stop":[["done",1],["saturated",1]],"time":8.261962890625,"type":"simplify"},{"time":0.013916015625,"type":"soundness"},{"compiler":[[10,6]],"remove-preprocessing":[[]],"time":8.06103515625,"type":"end"}]
[{"compiler":[[15,8]],"method":["search"],"sampling":[[12,0.5036602020263672,0.010736942291259766,0.48560285568237305],[11,0.5036602020263672,0.011713027954101563,0.48462677001953125],[10,0.5036602020263672,0.011713027954101563,0.48462677001953125],[9,0.499755859375,0.01561737060546875,0.48462677001953125],[8,0.499755859375,0.01561737060546875,0.48462677001953125],[7,0.499755859375,0.0312347412109375,0.4690093994140625],[6,0.499755859375,0.062469482421875,0.437774658203125],[5,0.499755859375,0.12493896484375,0.37530517578125],[4,0.499755859375,0.2498779296875,0.2503662109375],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":3.317138671875,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.2998046875,8],["body",1024,"valid",807.818115234375,4051],["body",512,"valid",201.832275390625,1987],["body",2048,"valid",99.58935546875,435],["body",256,"valid",89.824462890625,1783]],"time":1207.367919921875,"type":"sample"},{"compiler":[[14,7]],"egraph":[[0,1,1,1.75e-6],[8,6646,22,0.029119125000000003],[7,2604,22,0.018055417],[6,891,22,0.0072770000000000005],[5,336,22,0.0028085000000000002],[4,133,22,0.001215833],[3,59,22,0.000557749],[2,35,22,0.000291791],[1,20,22,0.000154458],[0,8,22,6.6083e-5]],"inputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":52.7451171875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[8,6646,22,0.028951790999999998],[7,2604,22,0.01781275],[6,891,22,0.007218625],[5,336,22,0.002783875],[4,133,22,0.0011940829999999999],[3,59,22,0.000557042],[2,35,22,0.00028487499999999997],[1,20,22,0.000147167],[0,8,22,6.1208e-5]],"inputs":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"stop":[["node limit",1]],"time":40.23095703125,"type":"simplify"},{"compiler":[[14,7]],"time":0.260009765625,"type":"eval"},{"alts":[["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","next",57.97945939329804]],"compiler":[[14,7],[14,7]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[57.97945939329804],"time":0.778076171875,"type":"prune"},{"compiler":[[34,7]],"locations":[["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",0.00390625,true],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",1.236668261577303,true],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))",4.592095568117676,true]],"time":5.970947265625,"type":"localize"},{"count":[[3,32]],"series":[["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","-inf",0.155029296875],["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","inf",0.175048828125],["(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","0",0.219970703125],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","-inf",0.505859375],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","inf",0.587890625],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","x","0",0.258056640625],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","-inf",0.240966796875],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","inf",0.213134765625],["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","0",0.462890625]],"time":2.9580078125,"type":"series"},{"count":[[3,37]],"egraph":[[0,6,6,0.000157625],[2,2150,6,0.004004833],[1,129,6,0.003991041],[0,6,6,0.00015725],[0,8,3,0.000207167],[2,3652,3,0.00649825],[1,186,3,0.006482458],[0,8,3,0.000210375],[0,6,6,0.000169958],[2,2188,6,0.0038770429999999997],[1,130,6,0.003852376],[0,6,6,0.000161709],[2,3652,18,0.006536123999999999],[1,186,18,0.006519998999999999],[0,8,18,0.000218583]],"inputs":[["(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))"]],"method":["egg-rewrite-iter-limit","egg-rewrite","egg-rewrite-iter-limit","egg-rewrite","egg-rewrite-iter-limit","egg-rewrite","batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 x) (neg.f64 (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2 (sinh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (sinh.f64 x))) (cbrt.f64 (*.f64 2 (sinh.f64 x)))) (cbrt.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2 (sinh.f64 x))) (sqrt.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (sinh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 x) 3) (pow.f64 (exp.f64 (neg.f64 x)) 3)) (+.f64 (*.f64 (exp.f64 x) (exp.f64 x)) (+.f64 (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x))) (*.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) (exp.f64 x)) (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x)))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (sinh.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (*.f64 2 (sinh.f64 x)) (*.f64 2 (sinh.f64 x))) (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (sinh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (sinh.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (exp.f64 x) (*.f64 2 (cosh.f64 x))) (/.f64 (exp.f64 (neg.f64 x)) (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sinh.f64 x)) (/.f64 1 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tanh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (tanh.f64 x)) (cbrt.f64 (tanh.f64 x))) (cbrt.f64 (tanh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tanh.f64 x)) (sqrt.f64 (tanh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tanh.f64 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tanh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (tanh.f64 x) (tanh.f64 x)) (tanh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tanh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tanh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tanh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x tanh.f64 x)))))","((#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 2 (cosh.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 2 (cosh.f64 x))) (cbrt.f64 (*.f64 2 (cosh.f64 x)))) (cbrt.f64 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 2 (cosh.f64 x))) (sqrt.f64 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (cosh.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (exp.f64 x) 3) (pow.f64 (exp.f64 (neg.f64 x)) 3)) (+.f64 (*.f64 (exp.f64 x) (exp.f64 x)) (-.f64 (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x))) (*.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 x) (exp.f64 x)) (*.f64 (exp.f64 (neg.f64 x)) (exp.f64 (neg.f64 x)))) (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (cosh.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (*.f64 (*.f64 2 (cosh.f64 x)) (*.f64 2 (cosh.f64 x))) (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 2 (cosh.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 2 (cosh.f64 x))))))))"]],"rules":[["egg-rr",12],["egg-rr",12],["egg-rr",13]],"stop":[["iter limit",1],["unsound",1],["iter limit",1],["unsound",1],["iter limit",1],["unsound",1],["unsound",1]],"time":115.927978515625,"type":"rewrite"},{"count":[[69,67]],"egraph":[[6,7511,437,0.038960000999999994],[5,5394,437,0.026643083999999997],[4,3261,437,0.01388625],[3,995,437,0.006860666999999999],[2,350,437,0.002547584],[1,150,441,0.0009401259999999999],[0,58,447,0.000280417]],"inputs":[["(*.f64 2 x)","(+.f64 (*.f64 2 x) (*.f64 1/3 (pow.f64 x 3)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 1/60 (pow.f64 x 5))))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 1/2520 (pow.f64 x 7)) (*.f64 1/60 (pow.f64 x 5)))))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","2","(+.f64 2 (pow.f64 x 2))","(+.f64 2 (+.f64 (pow.f64 x 2) (*.f64 1/12 (pow.f64 x 4))))","(+.f64 2 (+.f64 (*.f64 1/360 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/12 (pow.f64 x 4)))))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2 x)","(+.f64 x x)","(+.f64 (*.f64 2 x) (*.f64 1/3 (pow.f64 x 3)))","(fma.f64 2 x (*.f64 1/3 (pow.f64 x 3)))","(fma.f64 1/3 (pow.f64 x 3) (*.f64 2 x))","(fma.f64 1/3 (pow.f64 x 3) (+.f64 x x))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (*.f64 1/60 (pow.f64 x 5))))","(fma.f64 2 x (fma.f64 1/3 (pow.f64 x 3) (*.f64 1/60 (pow.f64 x 5))))","(fma.f64 x (fma.f64 x (*.f64 x 1/3) 2) (*.f64 1/60 (pow.f64 x 5)))","(fma.f64 x (fma.f64 1/3 (*.f64 x x) 2) (*.f64 1/60 (pow.f64 x 5)))","(+.f64 (*.f64 2 x) (+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 1/2520 (pow.f64 x 7)) (*.f64 1/60 (pow.f64 x 5)))))","(fma.f64 2 x (fma.f64 1/3 (pow.f64 x 3) (fma.f64 1/2520 (pow.f64 x 7) (*.f64 1/60 (pow.f64 x 5)))))","(fma.f64 2 x (fma.f64 1/3 (pow.f64 x 3) (fma.f64 1/60 (pow.f64 x 5) (*.f64 1/2520 (pow.f64 x 7)))))","(fma.f64 1/60 (pow.f64 x 5) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 1/2520 (pow.f64 x 7) (*.f64 2 x))))","(fma.f64 1/60 (pow.f64 x 5) (fma.f64 1/3 (pow.f64 x 3) (fma.f64 1/2520 (pow.f64 x 7) (+.f64 x x))))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(-.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","x","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) x)","(fma.f64 -1/3 (pow.f64 x 3) x)","(fma.f64 (pow.f64 x 3) -1/3 x)","(+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x))","(fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x))","(fma.f64 (pow.f64 x 3) -1/3 (fma.f64 (pow.f64 x 5) 2/15 x))","(fma.f64 (pow.f64 x 5) 2/15 (fma.f64 (pow.f64 x 3) -1/3 x))","(+.f64 (*.f64 -17/315 (pow.f64 x 7)) (+.f64 (*.f64 -1/3 (pow.f64 x 3)) (+.f64 (*.f64 2/15 (pow.f64 x 5)) x)))","(fma.f64 -17/315 (pow.f64 x 7) (fma.f64 -1/3 (pow.f64 x 3) (fma.f64 2/15 (pow.f64 x 5) x)))","(fma.f64 (pow.f64 x 7) -17/315 (fma.f64 (pow.f64 x 3) -1/3 (fma.f64 (pow.f64 x 5) 2/15 x)))","(fma.f64 (pow.f64 x 3) -1/3 (fma.f64 (pow.f64 x 7) -17/315 (fma.f64 (pow.f64 x 5) 2/15 x)))","(fma.f64 (pow.f64 x 3) -1/3 (fma.f64 (pow.f64 x 5) 2/15 (fma.f64 (pow.f64 x 7) -17/315 x)))","(fma.f64 (pow.f64 x 5) 2/15 (fma.f64 (pow.f64 x 7) -17/315 (fma.f64 (pow.f64 x 3) -1/3 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x)))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))) (+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x))))","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))","2","(+.f64 2 (pow.f64 x 2))","(+.f64 2 (*.f64 x x))","(fma.f64 x x 2)","(+.f64 2 (+.f64 (pow.f64 x 2) (*.f64 1/12 (pow.f64 x 4))))","(+.f64 2 (+.f64 (*.f64 x x) (*.f64 1/12 (pow.f64 x 4))))","(+.f64 2 (fma.f64 1/12 (pow.f64 x 4) (*.f64 x x)))","(fma.f64 x x (fma.f64 1/12 (pow.f64 x 4) 2))","(+.f64 2 (+.f64 (*.f64 1/360 (pow.f64 x 6)) (+.f64 (pow.f64 x 2) (*.f64 1/12 (pow.f64 x 4)))))","(+.f64 2 (fma.f64 1/360 (pow.f64 x 6) (+.f64 (*.f64 x x) (*.f64 1/12 (pow.f64 x 4)))))","(+.f64 2 (fma.f64 1/360 (pow.f64 x 6) (fma.f64 1/12 (pow.f64 x 4) (*.f64 x x))))","(fma.f64 1/360 (pow.f64 x 6) (fma.f64 x x (fma.f64 1/12 (pow.f64 x 4) 2)))","(fma.f64 1/12 (pow.f64 x 4) (fma.f64 1/360 (pow.f64 x 6) (fma.f64 x x 2)))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 (neg.f64 x)) (exp.f64 x))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))","(+.f64 (exp.f64 x) (exp.f64 (*.f64 -1 x)))","(+.f64 (exp.f64 x) (exp.f64 (neg.f64 x)))"]],"stop":[["node limit",1]],"time":58.514892578125,"type":"simplify"},{"compiler":[[968,399]],"time":9.984130859375,"type":"eval"},{"alts":[["(tanh.f64 x)","next",0]],"compiler":[[3,2],[3,2]],"count":[[68,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[67,1],"picked":[1,0]}],"min-error":[0],"time":8.65087890625,"type":"prune"},{"compiler":[[4,2]],"time":1.23193359375,"type":"localize"},{"compiler":[[1,1]],"time":0.105224609375,"type":"eval"},{"alts":[["(tanh.f64 x)","done",0]],"compiler":[[3,2]],"count":[[1,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[0,0],"picked":[1,1]}],"min-error":[0],"time":0.432861328125,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",0,1]],"compiler":[[2,1],[14,7],[16,8]],"count":[[2,1]],"inputs":[["(tanh.f64 x)","(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))"]],"link":["."],"name":["Hyperbolic tangent"],"oracle":[57.97945939329804],"outputs":[["(tanh.f64 x)"]],"time":5.238037109375,"times":[["x",2.741943359375],["(/.f64 (-.f64 (exp.f64 x) (exp.f64 (neg.f64 x))) (+.f64 (exp.f64 x) (exp.f64 (neg.f64 x))))",1.982177734375]],"type":"regimes"},{"compiler":[[3,2]],"egraph":[[0,3,3,9.459e-6]],"inputs":[["(tanh.f64 x)"]],"method":["egg-herbie"],"outputs":[["(tanh.f64 x)"]],"stop":[["done",1],["saturated",1]],"time":7.907958984375,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[3,2]],"remove-preprocessing":[[]],"time":6.75,"type":"end"}]
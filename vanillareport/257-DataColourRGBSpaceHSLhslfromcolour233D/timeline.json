[{"compiler":[[17,13]],"method":["search"],"sampling":[[12,0.4797652819565883,0.4319837802983102,0.08825093774510151],[11,0.40565519775191206,0.5129197933113119,0.08142500893677607],[10,0.34324670579007943,0.5928806736374099,0.06387262057251064],[9,0.2808382138282468,0.7176976575610752,0.0014641286106780171],[8,0.18722547588549787,0.8113103955038241,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":99.532958984375,"type":"analyze"},{"outcomes":[["body",256,"invalid",61.221923828125,1348],["body",512,"valid",23.127197265625,283],["body",1024,"valid",30.364990234375,252],["body",256,"valid",354.39599609375,7721]],"time":477.739990234375,"type":"sample"},{"compiler":[[16,12]],"egraph":[[0,3,3,1.958e-6],[5,5489,48,0.024026667],[4,2193,48,0.012803209],[3,676,48,0.003859668],[2,164,56,0.001121126],[1,57,56,0.000332001],[0,28,64,9.9209e-5]],"inputs":[["0","1","2"],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","(+.f64 y (*.f64 (*.f64 (-.f64 x y) 6) (-.f64 (/.f64 2 3) z)))","(+.f64 z (*.f64 (*.f64 (-.f64 y z) 6) (-.f64 (/.f64 2 3) x)))","(+.f64 x (*.f64 (*.f64 (-.f64 z x) 6) (-.f64 (/.f64 2 3) y)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 2/3 z)))","(fma.f64 (*.f64 (-.f64 y x) 6) (-.f64 2/3 z) x)","(fma.f64 (-.f64 y x) (+.f64 4 (*.f64 -6 z)) x)","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(+.f64 y (*.f64 (*.f64 (-.f64 x y) 6) (-.f64 (/.f64 2 3) z)))","(+.f64 y (*.f64 (-.f64 2/3 z) (*.f64 6 (-.f64 x y))))","(fma.f64 (-.f64 2/3 z) (*.f64 6 (-.f64 x y)) y)","(fma.f64 6 (*.f64 (-.f64 2/3 z) (-.f64 x y)) y)","(fma.f64 (-.f64 x y) (fma.f64 -6 z 4) y)","(+.f64 z (*.f64 (*.f64 (-.f64 y z) 6) (-.f64 (/.f64 2 3) x)))","(+.f64 z (*.f64 (-.f64 y z) (*.f64 6 (-.f64 2/3 x))))","(fma.f64 (*.f64 6 (-.f64 y z)) (-.f64 2/3 x) z)","(fma.f64 (-.f64 y z) (*.f64 6 (-.f64 2/3 x)) z)","(fma.f64 (-.f64 y z) (fma.f64 -6 x 4) z)","(+.f64 x (*.f64 (*.f64 (-.f64 z x) 6) (-.f64 (/.f64 2 3) y)))","(+.f64 x (*.f64 (*.f64 6 (-.f64 z x)) (-.f64 2/3 y)))","(fma.f64 (*.f64 6 (-.f64 z x)) (-.f64 2/3 y) x)","(fma.f64 6 (*.f64 (-.f64 z x) (-.f64 2/3 y)) x)","(fma.f64 (-.f64 z x) (fma.f64 -6 y 4) x)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":47.9638671875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[17,7208,12,0.205664623],[16,7208,12,0.187437457],[15,7161,12,0.158270124],[14,6879,12,0.123151707],[13,6879,12,0.090006082],[12,6879,12,0.076041124],[11,6875,12,0.068069374],[10,6856,12,0.059157124],[9,6792,12,0.051235915],[8,6524,12,0.042181707],[7,5839,12,0.031522249],[6,4018,12,0.021528707],[5,1996,12,0.011332041000000001],[4,634,12,0.004096749],[3,202,12,0.001257874],[2,60,14,0.000430582],[1,23,14,0.000154374],[0,14,16,4.8541e-5]],"inputs":[["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","(+.f64 x (*.f64 (-.f64 y x) (*.f64 6 (-.f64 2/3 z))))","(fma.f64 (-.f64 y x) (*.f64 6 (-.f64 2/3 z)) x)","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)"]],"stop":[["node limit",1]],"time":219.26611328125,"type":"simplify"},{"compiler":[[25,16]],"time":0.4609375,"type":"eval"},{"alts":[["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","next",0.19140625],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","fresh",0.3551750488422101]],"compiler":[[12,8],[16,12],[12,8],[16,12]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.109375],"time":1.43603515625,"type":"prune"},{"compiler":[[24,13]],"locations":[["(fma.f64 z -6 4)",0.0546875,true],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)",0.16015625,true]],"time":5.989013671875,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 z -6 4)","z","-inf",0.138916015625],["(fma.f64 z -6 4)","z","inf",0.136962890625],["(fma.f64 z -6 4)","z","0",0.154052734375],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","z","-inf",0.380126953125],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","z","inf",0.3369140625],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","z","0",0.373046875],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","x","-inf",0.472900390625],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","x","inf",0.342041015625],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","x","0",0.3291015625],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","y","-inf",0.282958984375],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","y","inf",0.426025390625],["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","y","0",0.490966796875]],"time":4.02490234375,"type":"series"},{"count":[[2,82]],"egraph":[[2,2421,17,0.023093542],[1,194,17,0.0033589580000000004],[0,9,17,0.000285125]],"inputs":[["(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","(fma.f64 z -6 4)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 y x) (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 2) (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) (sqrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 2) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 2) 3) (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 2) (*.f64 x x)) (fma.f64 (-.f64 y x) (fma.f64 z -6 4) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 2)) (cbrt.f64 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))) (sqrt.f64 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (pow.f64 (exp.f64 (fma.f64 z -6 4)) (-.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 (fma.f64 z -6 4)) (-.f64 y x)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 4 (*.f64 z -6))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 z -6) 4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 z -6 4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 z -6) 1) 4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 z -6 4))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 z -6 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 z -6 4)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 z -6 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 z -6 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z -6 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 z -6 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 z -6 4)) (pow.f64 (cbrt.f64 (fma.f64 z -6 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 z -6 4)) 2) (cbrt.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 z -6 4)) (sqrt.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (fma.f64 z -6 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 z -6 4) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (fma.f64 z -6 4) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (*.f64 (fma.f64 z -6 4) (cbrt.f64 (fma.f64 z -6 4))) 2) 1/3) (cbrt.f64 (cbrt.f64 (fma.f64 z -6 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 z -6 4) 5/2) 1/3) (cbrt.f64 (sqrt.f64 (fma.f64 z -6 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z -6 4))) 2) 3) (cbrt.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 z -6 4))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (fma.f64 z -6 4))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 z 3) -216) 64) (+.f64 (pow.f64 (*.f64 z -6) 2) (-.f64 16 (*.f64 (*.f64 z -6) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 z -6) 2) 16) (fma.f64 z -6 -4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 z -6 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z -6 4) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 z -6 4) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 z -6 4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 z -6 4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 z -6 4))) 2)) (cbrt.f64 (log.f64 (fma.f64 z -6 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 z -6 4)))) (sqrt.f64 (log.f64 (fma.f64 z -6 4))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 z -6 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 z -6 4))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 z -6 4) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 z -6 4)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 z -6 4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 z -6 4))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 z -6 4))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 z -6 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 z -6 4)) 1) 1))))))"]],"rules":[["egg-rr",40],["egg-rr",42]],"stop":[["node limit",1]],"time":45.05908203125,"type":"rewrite"},{"count":[[130,100]],"egraph":[[14,6102,454,0.11958016599999999],[13,6102,454,0.10879979099999999],[12,6094,454,0.096607874],[11,6074,454,0.08392583299999999],[10,6074,454,0.07013512499999999],[9,6074,454,0.05959566599999999],[8,6047,454,0.050034749999999996],[7,5836,454,0.040286749999999996],[6,4844,454,0.02997225],[5,2931,454,0.019390958],[4,1590,454,0.010180999999999999],[3,690,454,0.004119959],[2,215,454,0.001653334],[1,84,622,0.000634],[0,32,820,0.000193417]],"inputs":[["(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x))","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 4 (-.f64 y x)) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(*.f64 -6 (*.f64 z (-.f64 y x)))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(*.f64 -6 (*.f64 z (-.f64 y x)))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","4","(+.f64 4 (*.f64 -6 z))","(+.f64 4 (*.f64 -6 z))","(+.f64 4 (*.f64 -6 z))","(*.f64 -6 z)","(+.f64 4 (*.f64 -6 z))","(+.f64 4 (*.f64 -6 z))","(+.f64 4 (*.f64 -6 z))","(*.f64 -6 z)","(+.f64 4 (*.f64 -6 z))","(+.f64 4 (*.f64 -6 z))","(+.f64 4 (*.f64 -6 z))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) x)","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) x)","(*.f64 x (+.f64 (*.f64 z 6) -3))","(*.f64 x (fma.f64 z 6 -3))","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x)) (+.f64 (*.f64 (+.f64 4 (*.f64 -6 z)) y) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x)","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) x)","(*.f64 x (+.f64 (*.f64 z 6) -3))","(*.f64 x (fma.f64 z 6 -3))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (+.f64 4 (*.f64 -6 z)))) x) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) x)","(*.f64 x (+.f64 (*.f64 z 6) -3))","(*.f64 x (fma.f64 z 6 -3))","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) x)","(fma.f64 4 (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(*.f64 -6 (*.f64 z (-.f64 y x)))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(*.f64 -6 (*.f64 z (-.f64 y x)))","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(fma.f64 -1 (*.f64 (+.f64 4 (*.f64 -6 z)) x) (fma.f64 (+.f64 4 (*.f64 -6 z)) y x))","(-.f64 (*.f64 (fma.f64 -6 z 4) y) (*.f64 x (fma.f64 -6 z 3)))","(fma.f64 (-.f64 y x) (fma.f64 -6 z 4) x)","(fma.f64 (fma.f64 -6 z 4) (-.f64 y x) x)","4","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(*.f64 -6 z)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(*.f64 -6 z)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)","(+.f64 4 (*.f64 -6 z))","(fma.f64 -6 z 4)"]],"stop":[["node limit",1]],"time":145.22607421875,"type":"simplify"},{"compiler":[[1516,936]],"time":19.89892578125,"type":"eval"},{"alts":[["(fma.f64 (-.f64 y x) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z -6 4))) 2) 3) (cbrt.f64 (fma.f64 z -6 4))) x)","fresh",1.1302494216046202],["(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","fresh",0.17578125],["(pow.f64 (exp.f64 1) (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))","fresh",33.462732920003475],["(*.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 2))","fresh",0.8192904298114494],["(pow.f64 (sqrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 2)","fresh",30.543338818379098],["(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","next",0.16796875],["(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 2) (*.f64 x x)) (fma.f64 (-.f64 y x) (fma.f64 z -6 4) (neg.f64 x)))","fresh",32.98209699823459],["(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) x))))","fresh",43.103656007994786],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","fresh",0.3551750488422101]],"compiler":[[24,19],[18,11],[16,12],[26,17],[15,11],[20,16],[28,18],[43,28],[16,12],[24,19],[18,11],[16,12],[26,17],[15,11],[20,16],[28,18],[43,28],[16,12]],"count":[[102,9]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[100,8],"picked":[1,0]}],"min-error":[0.0078125],"time":23.177978515625,"type":"prune"},{"compiler":[[63,47]],"locations":[["(+.f64 4 (*.f64 -6 z))",0.0078125,true],["(+.f64 3 (*.f64 -6 z))",0.01171875,true],["(*.f64 (+.f64 3 (*.f64 -6 z)) x)",0.125,true],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)",0.15234375,true]],"time":13.76806640625,"type":"localize"},{"count":[[4,30]],"series":[["(+.f64 4 (*.f64 -6 z))","z","-inf",0.141845703125],["(+.f64 4 (*.f64 -6 z))","z","inf",0.134033203125],["(+.f64 4 (*.f64 -6 z))","z","0",0.132080078125],["(+.f64 3 (*.f64 -6 z))","z","-inf",0.1650390625],["(+.f64 3 (*.f64 -6 z))","z","inf",0.14208984375],["(+.f64 3 (*.f64 -6 z))","z","0",0.135986328125],["(*.f64 (+.f64 3 (*.f64 -6 z)) x)","x","-inf",0.31201171875],["(*.f64 (+.f64 3 (*.f64 -6 z)) x)","x","inf",0.32080078125],["(*.f64 (+.f64 3 (*.f64 -6 z)) x)","x","0",0.320068359375],["(*.f64 (+.f64 3 (*.f64 -6 z)) x)","z","-inf",0.23583984375],["(*.f64 (+.f64 3 (*.f64 -6 z)) x)","z","inf",0.259033203125],["(*.f64 (+.f64 3 (*.f64 -6 z)) x)","z","0",0.27197265625],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","y","-inf",0.27294921875],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","y","inf",0.305908203125],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","y","0",0.416015625],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","z","-inf",0.2548828125],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","z","inf",0.341064453125],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","z","0",0.616943359375]],"time":4.97705078125,"type":"series"},{"count":[[4,144]],"egraph":[[2,3225,26,0.026597833],[1,260,26,0.004509041],[0,12,34,0.000377416]],"inputs":[["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(+.f64 3 (*.f64 -6 z))","(+.f64 4 (*.f64 -6 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 -6 z 4) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 4 y) (*.f64 (*.f64 -6 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -6 z) y) (*.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y 4) (*.f64 y (*.f64 -6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (*.f64 -6 z)) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (fma.f64 -6 z 4)) y)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (fma.f64 -6 z 4)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 -6 z 4)) y))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 -6 z 4)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 -6 z 4) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -216 (pow.f64 z 3) 64) y) (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -4) 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 16 (*.f64 36 (*.f64 z z))) y) (+.f64 4 (*.f64 6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (fma.f64 -216 (pow.f64 z 3) 64)) (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -4) 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 y (-.f64 16 (*.f64 36 (*.f64 z z)))) (+.f64 4 (*.f64 6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 -6 z 4) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 -6 z 4) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 -6 z 4) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -6 z 4) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 -6 z 4) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 -6 z 4) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (fma.f64 -6 z 4)) y))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 -6 z 4) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 -6 z 4) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 -6 z 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 -6 z 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 -6 z 4) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 -6 z 4) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 y (*.f64 (*.f64 -6 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 z) y (*.f64 4 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 4 (*.f64 y (*.f64 -6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 -6 z) (*.f64 y 4))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 -6 z 3) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 -6 z) x) (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3 x) (*.f64 (*.f64 -6 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 -6 z)) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3) (*.f64 x (*.f64 -6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (fma.f64 -6 z 3))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (fma.f64 -6 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (fma.f64 -6 z 3)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (fma.f64 -6 z 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 -6 z 3) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 -216 (pow.f64 z 3) 27) x) (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 9 (*.f64 36 (*.f64 z z))) x) (+.f64 3 (*.f64 6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 -216 (pow.f64 z 3) 27)) (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (-.f64 9 (*.f64 36 (*.f64 z z)))) (+.f64 3 (*.f64 6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 -6 z 3) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 -6 z 3) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 -6 z 3) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 -6 z 3) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 -6 z 3) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 -6 z 3) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 -6 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 -6 z 3) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 -6 z 3) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 -6 z 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 -6 z 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 -6 z 3) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 -6 z 3) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 z) x (*.f64 3 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 3 x (*.f64 (*.f64 -6 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 -6 z) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 3 (*.f64 x (*.f64 -6 z)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -6 z 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 9 (+.f64 3 (*.f64 6 z))) (/.f64 (*.f64 36 (*.f64 z z)) (+.f64 3 (*.f64 6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -6 z 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -6 z 3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -6 z 3)) (pow.f64 (cbrt.f64 (fma.f64 -6 z 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -6 z 3)) 2) (cbrt.f64 (fma.f64 -6 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -6 z 3)) (sqrt.f64 (fma.f64 -6 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -216 (pow.f64 z 3) 27) (/.f64 1 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 9 (*.f64 36 (*.f64 z z))) (/.f64 1 (+.f64 3 (*.f64 6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -3) 9) (fma.f64 -216 (pow.f64 z 3) 27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 3 (*.f64 6 z)) (-.f64 9 (*.f64 36 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -216 (pow.f64 z 3) 27) (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -3) 9))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -216 (pow.f64 z 3) 27) (fma.f64 36 (*.f64 z z) (-.f64 9 (*.f64 -18 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 9 (*.f64 36 (*.f64 z z))) (+.f64 3 (*.f64 6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -216 (pow.f64 z 3) 27)) (neg.f64 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -3) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 9 (*.f64 36 (*.f64 z z)))) (neg.f64 (+.f64 3 (*.f64 6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 36 (*.f64 z z) -9) (fma.f64 -6 z -3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -6 z 3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -6 z 3) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -6 z 3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -6 z 3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -6 z 3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -3) 9) (fma.f64 -216 (pow.f64 z 3) 27)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 3 (*.f64 6 z)) (-.f64 9 (*.f64 36 (*.f64 z z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -6 z 3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -6 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -6 z 3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -6 z 3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -6 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -6 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -6 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -6 z 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -6 z 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -6 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 z) 1 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -6 z) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -6 z)) (pow.f64 (cbrt.f64 (*.f64 -6 z)) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 -6 z)) 2) (cbrt.f64 (*.f64 -6 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) -6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 -6 z)) (sqrt.f64 (*.f64 -6 z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) -6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) 3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 (sqrt.f64 z)) (sqrt.f64 z) 3)))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -6 z 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 16 (+.f64 4 (*.f64 6 z))) (/.f64 (*.f64 36 (*.f64 z z)) (+.f64 4 (*.f64 6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -6 z 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -6 z 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -6 z 4)) (pow.f64 (cbrt.f64 (fma.f64 -6 z 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -6 z 4)) 2) (cbrt.f64 (fma.f64 -6 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -6 z 4)) (sqrt.f64 (fma.f64 -6 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -216 (pow.f64 z 3) 64) (/.f64 1 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -4) 16)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 16 (*.f64 36 (*.f64 z z))) (/.f64 1 (+.f64 4 (*.f64 6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -4) 16) (fma.f64 -216 (pow.f64 z 3) 64)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 4 (*.f64 6 z)) (-.f64 16 (*.f64 36 (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -216 (pow.f64 z 3) 64) (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -4) 16))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -216 (pow.f64 z 3) 64) (fma.f64 36 (*.f64 z z) (-.f64 16 (*.f64 -24 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 16 (*.f64 36 (*.f64 z z))) (+.f64 4 (*.f64 6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 -216 (pow.f64 z 3) 64)) (neg.f64 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -4) 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 16 (*.f64 36 (*.f64 z z)))) (neg.f64 (+.f64 4 (*.f64 6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 36 (*.f64 z z) -16) (fma.f64 -6 z -4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -6 z 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -6 z 4) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -6 z 4) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -6 z 4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -6 z 4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 -6 z) (fma.f64 -6 z -4) 16) (fma.f64 -216 (pow.f64 z 3) 64)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 4 (*.f64 6 z)) (-.f64 16 (*.f64 36 (*.f64 z z)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -6 z 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -6 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -6 z 4))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -6 z 4) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -6 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -6 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -6 z 4)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -6 z 4)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -6 z 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z -6 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 z) 1 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -6 z) 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -6 z)) (pow.f64 (cbrt.f64 (*.f64 -6 z)) 2) 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 -6 z)) 2) (cbrt.f64 (*.f64 -6 z)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) -6) 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 -6 z)) (sqrt.f64 (*.f64 -6 z)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) -6) 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z) 4)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 (sqrt.f64 z)) (sqrt.f64 z) 4)))))"]],"rules":[["egg-rr",43],["egg-rr",43],["egg-rr",29],["egg-rr",29]],"stop":[["node limit",1]],"time":52.68603515625,"type":"rewrite"},{"count":[[174,156]],"egraph":[[4,73,198,0.000719083],[3,69,198,0.000553375],[2,53,216,0.000377125],[1,30,243,0.00020800000000000001],[0,16,252,8.5208e-5]],"inputs":[["(*.f64 4 y)","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(*.f64 -6 (*.f64 y z))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(*.f64 -6 (*.f64 y z))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","3","(*.f64 -6 z)","(*.f64 -6 z)","4","(*.f64 -6 z)","(*.f64 -6 z)"]],"method":["egg-herbie"],"outputs":[["(*.f64 4 y)","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(*.f64 -6 (*.f64 y z))","(*.f64 y (*.f64 -6 z))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(*.f64 -6 (*.f64 y z))","(*.f64 y (*.f64 -6 z))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","(fma.f64 4 y (*.f64 -6 (*.f64 y z)))","(fma.f64 -6 (*.f64 y z) (*.f64 4 y))","(*.f64 y (+.f64 (*.f64 -6 z) 4))","(*.f64 y (fma.f64 -6 z 4))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(fma.f64 3 x (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 (*.f64 -6 z) 3))","(*.f64 x (fma.f64 -6 z 3))","3","(*.f64 -6 z)","(*.f64 -6 z)","4","(*.f64 -6 z)","(*.f64 -6 z)"]],"stop":[["saturated",1]],"time":14.864990234375,"type":"simplify"},{"compiler":[[3303,2526]],"time":40.52490234375,"type":"eval"},{"alts":[["(+.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 -6 z 3) x)) 3)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",0.44081884768442026],["(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (/.f64 (*.f64 y (-.f64 16 (*.f64 36 (*.f64 z z)))) (+.f64 4 (*.f64 6 z))))","fresh",10.13671875],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","fresh",0.3551750488422101],["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","next",0.125],["(+.f64 (*.f64 -1 (/.f64 (*.f64 x (-.f64 9 (*.f64 36 (*.f64 z z)))) (+.f64 3 (*.f64 6 z)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",10.702167529305326],["(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","fresh",0.17578125]],"compiler":[[22,18],[28,22],[16,12],[21,16],[28,22],[18,11],[22,18],[28,22],[16,12],[21,16],[28,22],[18,11]],"count":[[165,6]],"kept":[{"done":[0,0],"fresh":[8,2],"new":[156,4],"picked":[1,0]}],"min-error":[0],"time":45.243896484375,"type":"prune"},{"compiler":[[66,46]],"locations":[["(+.f64 4 (*.f64 -6 z))",0.0078125,false],["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))",0.078125,true],["(*.f64 (+.f64 4 (*.f64 -6 z)) y)",0.15234375,false],["(*.f64 x (*.f64 -6 z))",0.2578125,true]],"time":14.673095703125,"type":"localize"},{"count":[[2,48]],"series":[["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))","z","-inf",0.158935546875],["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))","z","inf",0.176025390625],["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))","z","0",0.2021484375],["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))","x","-inf",0.3359375],["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))","x","inf",0.287841796875],["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))","x","0",0.302001953125],["(*.f64 x (*.f64 -6 z))","z","-inf",0.2451171875],["(*.f64 x (*.f64 -6 z))","z","inf",0.370849609375],["(*.f64 x (*.f64 -6 z))","z","0",0.425048828125],["(*.f64 x (*.f64 -6 z))","x","-inf",1.096923828125],["(*.f64 x (*.f64 -6 z))","x","inf",0.37109375],["(*.f64 x (*.f64 -6 z))","x","0",0.48583984375]],"time":4.597900390625,"type":"series"},{"count":[[2,35]],"egraph":[[2,1840,17,0.018369251],[1,163,17,0.002630542],[0,8,18,0.000249667]],"inputs":[["(*.f64 x (*.f64 -6 z))","(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (*.f64 -6 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (*.f64 -6 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (*.f64 -6 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (*.f64 -6 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (*.f64 -6 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (*.f64 -6 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (pow.f64 (exp.f64 -6) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (*.f64 -6 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (*.f64 -6 z) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 -6 z) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (*.f64 -6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (*.f64 -6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (*.f64 -6 z))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 -6 z)) (*.f64 x 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x 3) (*.f64 x (*.f64 -6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x 3) 1) (*.f64 x (*.f64 -6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x (+.f64 3 (*.f64 -6 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (+.f64 3 (*.f64 -6 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (+.f64 3 (*.f64 -6 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (+.f64 3 (*.f64 -6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))) 2) (cbrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))) (sqrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x 3) 3) (pow.f64 (*.f64 x (*.f64 -6 z)) 3)) (+.f64 (*.f64 (*.f64 x 3) (*.f64 x 3)) (-.f64 (pow.f64 (*.f64 x (*.f64 -6 z)) 2) (*.f64 (*.f64 x 3) (*.f64 x (*.f64 -6 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x 3) (*.f64 x 3)) (pow.f64 (*.f64 x (*.f64 -6 z)) 2)) (-.f64 (*.f64 x 3) (*.f64 x (*.f64 -6 z))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 3 (*.f64 -6 z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 3 (*.f64 -6 z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 3 (*.f64 -6 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 3 (*.f64 -6 z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 3 (*.f64 -6 z)))))))))"]],"rules":[["egg-rr",22],["egg-rr",13]],"stop":[["node limit",1]],"time":38.170166015625,"type":"rewrite"},{"count":[[83,42]],"egraph":[[10,1052,354,0.013617293],[9,1046,354,0.011372543],[8,971,354,0.009075543],[7,687,354,0.006579501],[6,464,354,0.0038580839999999995],[5,309,354,0.0025434589999999997],[4,239,354,0.0016724589999999998],[3,151,354,0.001039751],[2,78,354,0.000606376],[1,37,354,0.000296667],[0,18,396,0.000113542]],"inputs":[["(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 3 x)","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 -6 (*.f64 z x))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 (+.f64 3 (*.f64 -6 z)) x)","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -1 (*.f64 (-.f64 (*.f64 6 z) 3) x))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 3 x)","(*.f64 x 3)","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(*.f64 -6 (*.f64 z x))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))","(+.f64 (*.f64 3 x) (*.f64 -6 (*.f64 z x)))","(*.f64 x (+.f64 3 (*.f64 -6 z)))","(*.f64 x (fma.f64 -6 z 3))"]],"stop":[["saturated",1]],"time":32.199951171875,"type":"simplify"},{"compiler":[[2620,1953]],"time":31.180908203125,"type":"eval"},{"alts":[["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z))))","next",0.125],["(+.f64 (*.f64 -1 (fma.f64 x 3 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 -6 z))) 3))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",0.20835878907376804],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","fresh",0.3551750488422101],["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 -6 (*.f64 z x)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",0.13671875],["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (/.f64 (*.f64 y (-.f64 16 (*.f64 36 (*.f64 z z)))) (+.f64 4 (*.f64 6 z))))","fresh",10.09375],["(+.f64 (*.f64 -1 (/.f64 (*.f64 x (-.f64 9 (*.f64 36 (*.f64 z z)))) (+.f64 3 (*.f64 6 z)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",10.702167529305326]],"compiler":[[23,17],[24,19],[16,12],[21,16],[29,22],[28,22],[23,17],[24,19],[16,12],[21,16],[29,22],[28,22]],"count":[[126,6]],"kept":[{"done":[0,0],"fresh":[5,2],"new":[120,4],"picked":[1,0]}],"min-error":[0],"time":32.753173828125,"type":"prune"},{"compiler":[[76,47]],"locations":[["(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))",0.0078125,true],["(fma.f64 x 3 (*.f64 x (*.f64 -6 z)))",0.078125,false],["(*.f64 x (*.f64 -6 z))",0.2578125,false],["(*.f64 -6 (*.f64 y z))",0.270195019536884,true]],"time":16.17578125,"type":"localize"},{"count":[[2,15]],"series":[["(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","z","-inf",0.157958984375],["(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","z","inf",0.156005859375],["(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","z","0",0.201904296875],["(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","y","-inf",0.18701171875],["(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","y","inf",0.32177734375],["(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))","y","0",0.26513671875],["(*.f64 -6 (*.f64 y z))","z","-inf",0.2451171875],["(*.f64 -6 (*.f64 y z))","z","inf",0.402099609375],["(*.f64 -6 (*.f64 y z))","z","0",0.391845703125],["(*.f64 -6 (*.f64 y z))","y","-inf",0.223876953125],["(*.f64 -6 (*.f64 y z))","y","inf",0.333984375],["(*.f64 -6 (*.f64 y z))","y","0",0.444091796875]],"time":3.44921875,"type":"series"},{"count":[[2,101]],"egraph":[[2,2517,18,0.023043708],[1,195,18,0.003514292],[0,9,18,0.000278167]],"inputs":[["(*.f64 -6 (*.f64 y z))","(+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 -6) (*.f64 y z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 -6) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -6) (*.f64 y z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -6) (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 y (*.f64 z -6)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 y (*.f64 z -6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 y (*.f64 z -6)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 y (*.f64 z -6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 y (*.f64 z -6))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (*.f64 y z) 3) -216) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 y (*.f64 z -6))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 y (*.f64 z -6)))) 2)) (cbrt.f64 (log.f64 (*.f64 y (*.f64 z -6)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 y (*.f64 z -6))))) (sqrt.f64 (log.f64 (*.f64 y (*.f64 z -6)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 y (*.f64 z -6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -6) (*.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z -6)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (*.f64 y z) 3) -216))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 y (*.f64 z -6))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 y (*.f64 z -6))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 y (*.f64 z -6))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y (*.f64 z -6))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 y (*.f64 z -6)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 y (*.f64 z -6)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 y (*.f64 z -6)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 y (*.f64 z -6))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 y (*.f64 z -6))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 z) 1) (log.f64 (*.f64 -6 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (*.f64 -6 y)) (*.f64 (log.f64 z) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (*.f64 y y) 16) (fma.f64 y 4 (*.f64 6 (*.f64 y z)))) (/.f64 (pow.f64 (*.f64 y (*.f64 z -6)) 2) (fma.f64 y 4 (*.f64 6 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) (pow.f64 (cbrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) 2) (cbrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) (sqrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 (*.f64 y z) 3) -216 (*.f64 (pow.f64 y 3) 64)) (/.f64 1 (fma.f64 (*.f64 y (*.f64 z -6)) (-.f64 (*.f64 y (*.f64 z -6)) (*.f64 y 4)) (*.f64 (*.f64 y y) 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (*.f64 y y) 16) (pow.f64 (*.f64 y (*.f64 z -6)) 2)) (/.f64 1 (fma.f64 y 4 (*.f64 6 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 y (*.f64 z -6)) (-.f64 (*.f64 y (*.f64 z -6)) (*.f64 y 4)) (*.f64 (*.f64 y y) 16)) (fma.f64 (pow.f64 (*.f64 y z) 3) -216 (*.f64 (pow.f64 y 3) 64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 y 4 (*.f64 6 (*.f64 y z))) (-.f64 (*.f64 (*.f64 y y) 16) (pow.f64 (*.f64 y (*.f64 z -6)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (*.f64 y z) 3) -216 (*.f64 (pow.f64 y 3) 64)) (fma.f64 (*.f64 y (*.f64 z -6)) (-.f64 (*.f64 y (*.f64 z -6)) (*.f64 y 4)) (*.f64 (*.f64 y y) 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (*.f64 y z) 3) -216 (*.f64 (pow.f64 y 3) 64)) (fma.f64 (pow.f64 (*.f64 y z) 2) 36 (-.f64 (*.f64 (*.f64 y y) 16) (*.f64 y (*.f64 4 (*.f64 y (*.f64 z -6)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y y) 16) (pow.f64 (*.f64 y (*.f64 z -6)) 2)) (fma.f64 y 4 (*.f64 6 (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 (*.f64 y z) 3) -216 (*.f64 (pow.f64 y 3) 64))) (neg.f64 (fma.f64 (*.f64 y (*.f64 z -6)) (-.f64 (*.f64 y (*.f64 z -6)) (*.f64 y 4)) (*.f64 (*.f64 y y) 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (*.f64 y y) 16) (pow.f64 (*.f64 y (*.f64 z -6)) 2))) (neg.f64 (fma.f64 y 4 (*.f64 6 (*.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (*.f64 z -6)) 2) (*.f64 (*.f64 y y) 16)) (-.f64 (*.f64 y (*.f64 z -6)) (*.f64 y 4)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 y (*.f64 z -6)) (-.f64 (*.f64 y (*.f64 z -6)) (*.f64 y 4)) (*.f64 (*.f64 y y) 16)) (fma.f64 (pow.f64 (*.f64 y z) 3) -216 (*.f64 (pow.f64 y 3) 64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 y 4 (*.f64 6 (*.f64 y z))) (-.f64 (*.f64 (*.f64 y y) 16) (pow.f64 (*.f64 y (*.f64 z -6)) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))) 2)) (cbrt.f64 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))) (sqrt.f64 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z -6)))) (pow.f64 (exp.f64 y) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -6) (*.f64 y z)) (+.f64 1 (expm1.f64 (*.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z -6)))) (+.f64 1 (expm1.f64 (*.f64 y 4)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y 4))) (pow.f64 (exp.f64 -6) (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) 4) (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 y 4))) (+.f64 1 (expm1.f64 (*.f64 y (*.f64 z -6))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 -6 (*.f64 y z) (*.f64 y 4))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -6 (*.f64 y z) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y 4 (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z -6) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 -6 y) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) -6 (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (*.f64 z -6)) 1 (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 y (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y 4) 1 (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y (*.f64 z -6)) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y 4) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y 4)) (cbrt.f64 (*.f64 (*.f64 y y) 16)) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) 16)) (cbrt.f64 (*.f64 y 4)) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y z)) 2) (*.f64 (cbrt.f64 (*.f64 y z)) -6) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y (*.f64 z -6))) (pow.f64 (cbrt.f64 (*.f64 y (*.f64 z -6))) 2) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y (*.f64 z -6))) 2) (cbrt.f64 (*.f64 y (*.f64 z -6))) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) 4) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (sqrt.f64 y) 2) (*.f64 (sqrt.f64 y) 2) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (sqrt.f64 (*.f64 y z)) -6) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y (*.f64 z -6))) (sqrt.f64 (*.f64 y (*.f64 z -6))) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) 4) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 y) z (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (sqrt.f64 y)) (sqrt.f64 y) (*.f64 y (*.f64 z -6)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 z) y (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 (pow.f64 (cbrt.f64 (*.f64 y z)) 2)) (cbrt.f64 (*.f64 y z)) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -6 (sqrt.f64 (*.f64 y z))) (sqrt.f64 (*.f64 y z)) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 -6 y) 1) z (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 -6 y) (cbrt.f64 (*.f64 z z))) (cbrt.f64 z) (*.f64 y 4))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (*.f64 -6 y) (sqrt.f64 z)) (sqrt.f64 z) (*.f64 y 4))))))"]],"rules":[["egg-rr",74],["egg-rr",27]],"stop":[["node limit",1]],"time":45.474853515625,"type":"rewrite"},{"count":[[116,107]],"egraph":[[10,1048,114,0.013382792],[9,1042,114,0.011174834],[8,967,114,0.008925167],[7,682,114,0.006390916999999999],[6,461,114,0.0037029579999999997],[5,306,114,0.0024151249999999997],[4,239,114,0.0015518329999999999],[3,153,114,0.000979041],[2,73,114,0.000512125],[1,35,114,0.00021837499999999998],[0,17,138,8.4625e-5]],"inputs":[["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 4 y)","(*.f64 -6 (*.f64 y z))","(*.f64 -6 (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 -1 (*.f64 y (-.f64 (*.f64 6 z) 4)))","(*.f64 (+.f64 4 (*.f64 -6 z)) y)","(*.f64 (fma.f64 -6 z 4) y)","(*.f64 y (fma.f64 -6 z 4))","(*.f64 4 y)","(*.f64 -6 (*.f64 y z))","(*.f64 (*.f64 -6 y) z)","(*.f64 z (*.f64 -6 y))","(*.f64 -6 (*.f64 z y))","(*.f64 y (*.f64 -6 z))","(*.f64 -6 (*.f64 y z))","(*.f64 (*.f64 -6 y) z)","(*.f64 z (*.f64 -6 y))","(*.f64 -6 (*.f64 z y))","(*.f64 y (*.f64 -6 z))"]],"stop":[["saturated",1]],"time":26.908935546875,"type":"simplify"},{"compiler":[[3732,2592]],"time":42.67822265625,"type":"eval"},{"alts":[["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z))))","done",0.125],["(+.f64 (*.f64 -1 (fma.f64 x 3 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 -6 z))) 3))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",0.20835878907376804],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))","fresh",0.3551750488422101],["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 -6 (*.f64 z x)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",0.13671875],["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (/.f64 (*.f64 y (-.f64 16 (*.f64 36 (*.f64 z z)))) (+.f64 4 (*.f64 6 z))))","fresh",10.09375],["(+.f64 (*.f64 -1 (/.f64 (*.f64 x (-.f64 9 (*.f64 36 (*.f64 z z)))) (+.f64 3 (*.f64 6 z)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","fresh",10.702167529305326]],"compiler":[[23,17],[24,19],[16,12],[21,16],[29,22],[28,22]],"count":[[155,6]],"kept":[{"done":[0,0],"fresh":[5,5],"new":[149,0],"picked":[1,1]}],"min-error":[0],"time":40.923828125,"type":"prune"},{"accuracy":[0.125],"baseline":[0.125],"branch":[["x",0.125,1],["y",0.125,1],["z",0.125,1],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))",0.125,1],["(-.f64 (/.f64 2 3) z)",0.125,1]],"compiler":[[4,3],[4,3],[4,3],[16,12],[8,7],[363,242]],"count":[[18,1]],"inputs":[["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z))))","(+.f64 (*.f64 -1 (fma.f64 x 3 (pow.f64 (cbrt.f64 (*.f64 x (*.f64 -6 z))) 3))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 -6 (*.f64 z x)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (/.f64 (*.f64 y (-.f64 16 (*.f64 36 (*.f64 z z)))) (+.f64 4 (*.f64 6 z))))","(+.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 -6 z 3) x)) 3)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (/.f64 (*.f64 y (-.f64 16 (*.f64 36 (*.f64 z z)))) (+.f64 4 (*.f64 6 z))))","(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 x (-.f64 9 (*.f64 36 (*.f64 z z)))) (+.f64 3 (*.f64 6 z)))) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(fma.f64 (-.f64 y x) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (fma.f64 z -6 4))) 2) 3) (cbrt.f64 (fma.f64 z -6 4))) x)","(+.f64 (*.f64 4 (-.f64 y x)) (+.f64 (*.f64 -6 (*.f64 z (-.f64 y x))) x))","(pow.f64 (exp.f64 1) (log.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)))","(*.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 2))","(pow.f64 (sqrt.f64 (fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)) 2)","(+.f64 (*.f64 -1 (*.f64 (+.f64 3 (*.f64 -6 z)) x)) (*.f64 (+.f64 4 (*.f64 -6 z)) y))","(/.f64 (-.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 2) (*.f64 x x)) (fma.f64 (-.f64 y x) (fma.f64 z -6 4) (neg.f64 x)))","(/.f64 (+.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 (-.f64 y x) (fma.f64 z -6 4)) x))))","(fma.f64 (-.f64 y x) (fma.f64 z -6 4) x)","(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))"]],"link":["."],"name":["Data.Colour.RGBSpace.HSL:hsl from colour-2.3.3, D"],"oracle":[54.93496460818385],"outputs":[["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z))))"]],"time":36.0361328125,"times":[["x",6.3798828125],["y",6.31298828125],["z",6.2470703125],["(+.f64 x (*.f64 (*.f64 (-.f64 y x) 6) (-.f64 (/.f64 2 3) z)))",6.678955078125],["(-.f64 (/.f64 2 3) z)",4.025146484375]],"type":"regimes"},{"compiler":[[21,15]],"egraph":[[4,31,26,0.000157417],[3,30,26,0.000126209],[2,29,26,9.5584e-5],[1,26,26,6.5751e-5],[0,17,28,3.2292e-5]],"inputs":[["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (*.f64 -1 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 y z))))","(+.f64 (neg.f64 (fma.f64 x 3 (*.f64 x (*.f64 -6 z)))) (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 z y))))","(-.f64 (+.f64 (*.f64 4 y) (*.f64 -6 (*.f64 z y))) (fma.f64 x 3 (*.f64 x (*.f64 -6 z))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.61181640625,"type":"simplify"},{"time":0.01611328125,"type":"soundness"},{"compiler":[[21,15]],"remove-preprocessing":[[]],"time":10.534912109375,"type":"end"}]
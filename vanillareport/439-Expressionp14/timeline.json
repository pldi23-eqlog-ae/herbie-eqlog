[{"compiler":[[42,30]],"method":["search"],"sampling":[[1,2.890645125621066e-6,0.0,0.9999971093548744],[0,0.0,2.890645125621066e-6,0.9999971093548744]],"time":0.2529296875,"type":"analyze"},{"outcomes":[["body",256,"valid",505.421142578125,8256]],"time":514.1171875,"type":"sample"},{"compiler":[[11,7]],"egraph":[[1,4,4,1.3417e-5],[0,4,4,1.225e-5],[4,343,70,0.001928459],[3,289,70,0.0014042500000000001],[2,184,70,0.0008609170000000001],[1,88,70,0.000435542],[0,25,70,0.000151167]],"inputs":[["0","1","2","3"],["(*.f64 a (+.f64 (+.f64 b c) d))","(*.f64 b (+.f64 (+.f64 a c) d))","(*.f64 c (+.f64 (+.f64 b a) d))","(*.f64 d (+.f64 (+.f64 b c) a))","(*.f64 a (+.f64 (+.f64 c b) d))","(*.f64 a (+.f64 (+.f64 d c) b))","(*.f64 a (+.f64 (+.f64 b d) c))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","1","3","1"],["(*.f64 a (+.f64 (+.f64 b c) d))","(*.f64 a (+.f64 b (+.f64 c d)))","(*.f64 b (+.f64 (+.f64 a c) d))","(*.f64 b (+.f64 a (+.f64 c d)))","(*.f64 c (+.f64 (+.f64 b a) d))","(*.f64 c (+.f64 d (+.f64 a b)))","(*.f64 d (+.f64 (+.f64 b c) a))","(*.f64 d (+.f64 a (+.f64 b c)))","(*.f64 a (+.f64 (+.f64 c b) d))","(*.f64 a (+.f64 b (+.f64 c d)))","(*.f64 a (+.f64 (+.f64 d c) b))","(*.f64 a (+.f64 b (+.f64 c d)))","(*.f64 a (+.f64 (+.f64 b d) c))","(*.f64 a (+.f64 b (+.f64 c d)))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort b c d)"]],"time":27.64599609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[4,104,10,0.000589125],[3,85,10,0.00042908400000000004],[2,45,10,0.00025675000000000003],[1,19,10,0.00011945800000000001],[0,8,10,4.4625e-5]],"inputs":[["(*.f64 a (+.f64 (+.f64 b c) d))"]],"method":["egg-herbie"],"outputs":[["(*.f64 a (+.f64 (+.f64 b c) d))","(*.f64 a (+.f64 b (+.f64 c d)))","(*.f64 a (+.f64 c (+.f64 b d)))"]],"stop":[["saturated",1]],"time":11.23583984375,"type":"simplify"},{"compiler":[[18,10]],"time":0.35009765625,"type":"eval"},{"alts":[["(*.f64 a (+.f64 (+.f64 b c) d))","next",0.0234375]],"compiler":[[11,7],[11,7]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.0234375],"time":0.925048828125,"type":"prune"},{"compiler":[[23,7]],"locations":[["(*.f64 a (+.f64 (+.f64 b c) d))",0.0234375,true]],"time":4.614013671875,"type":"localize"},{"count":[[1,48]],"series":[["(*.f64 a (+.f64 (+.f64 b c) d))","d","-inf",0.30908203125],["(*.f64 a (+.f64 (+.f64 b c) d))","d","inf",0.36181640625],["(*.f64 a (+.f64 (+.f64 b c) d))","d","0",0.260986328125],["(*.f64 a (+.f64 (+.f64 b c) d))","c","-inf",0.2958984375],["(*.f64 a (+.f64 (+.f64 b c) d))","c","inf",0.358154296875],["(*.f64 a (+.f64 (+.f64 b c) d))","c","0",0.2490234375],["(*.f64 a (+.f64 (+.f64 b c) d))","b","-inf",0.470947265625],["(*.f64 a (+.f64 (+.f64 b c) d))","b","inf",0.384033203125],["(*.f64 a (+.f64 (+.f64 b c) d))","b","0",0.301025390625],["(*.f64 a (+.f64 (+.f64 b c) d))","a","-inf",0.99609375],["(*.f64 a (+.f64 (+.f64 b c) d))","a","inf",0.426025390625],["(*.f64 a (+.f64 (+.f64 b c) d))","a","0",0.507080078125]],"time":5.137939453125,"type":"series"},{"count":[[1,64]],"egraph":[[2,2897,10,0.028242875],[1,185,10,0.0049048749999999995],[0,8,10,0.000219708]],"inputs":[["(*.f64 a (+.f64 (+.f64 b c) d))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a (+.f64 b c)) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a d) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 a (+.f64 b (+.f64 c d))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b a) (*.f64 (+.f64 c d) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a (+.f64 b c)) 1) (*.f64 (*.f64 a d) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 a) (+.f64 b (+.f64 c d)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 a) (+.f64 b (+.f64 c d))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 a) (+.f64 b (+.f64 c d))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 a) (+.f64 b (+.f64 c d))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 a (+.f64 b (+.f64 c d))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 a (+.f64 b c)) 3) (pow.f64 (*.f64 a d) 3)) (+.f64 (pow.f64 (*.f64 a (+.f64 b c)) 2) (-.f64 (pow.f64 (*.f64 a d) 2) (*.f64 (*.f64 a (+.f64 b c)) (*.f64 a d)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 a (+.f64 b c)) 2) (pow.f64 (*.f64 a d) 2)) (-.f64 (*.f64 a (+.f64 b c)) (*.f64 a d)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (+.f64 b c) 3) (pow.f64 d 3)) a) (fma.f64 d (-.f64 d (+.f64 b c)) (pow.f64 (+.f64 b c) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 (+.f64 b c) 2) (*.f64 d d)) a) (+.f64 b (-.f64 c d)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a (+.f64 (pow.f64 (+.f64 b c) 3) (pow.f64 d 3))) (fma.f64 d (-.f64 d (+.f64 b c)) (pow.f64 (+.f64 b c) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a (-.f64 (pow.f64 (+.f64 b c) 2) (*.f64 d d))) (+.f64 b (-.f64 c d)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a (+.f64 b (+.f64 c d))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a (+.f64 b (+.f64 c d))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a (+.f64 b (+.f64 c d))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a (+.f64 b (+.f64 c d)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 a (+.f64 b (+.f64 c d)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 a (+.f64 b (+.f64 c d)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 a (+.f64 b (+.f64 c d))))) 2)) (cbrt.f64 (log.f64 (*.f64 a (+.f64 b (+.f64 c d))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 a (+.f64 b (+.f64 c d)))))) (sqrt.f64 (log.f64 (*.f64 a (+.f64 b (+.f64 c d))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 a (+.f64 b (+.f64 c d))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 a) (+.f64 b (+.f64 c d))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 a (+.f64 b (+.f64 c d))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a (+.f64 b (+.f64 c d))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 a (+.f64 b (+.f64 c d)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 a (+.f64 b (+.f64 c d)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 a (+.f64 b (+.f64 c d)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 a (+.f64 b (+.f64 c d)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 a (+.f64 b (+.f64 c d))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 a (+.f64 b (+.f64 c d))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 a (+.f64 b (+.f64 c d))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 a (+.f64 b (+.f64 c d)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a b (*.f64 a (+.f64 c d)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (+.f64 b c) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a d (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b a (*.f64 (+.f64 c d) a))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 b c) a (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 d a (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a (+.f64 b c)) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a d) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 b c)) 2) (*.f64 (cbrt.f64 (+.f64 b c)) a) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) (+.f64 b c)) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) d) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 d) 2) (*.f64 (cbrt.f64 d) a) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 b c)) (*.f64 (sqrt.f64 (+.f64 b c)) a) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) (+.f64 b c)) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) d) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 d) (*.f64 (sqrt.f64 d) a) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (+.f64 b c)) 1 (*.f64 (*.f64 a d) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 a (+.f64 b c))) 2) (cbrt.f64 (*.f64 a (+.f64 b c))) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 a d)) 2) (cbrt.f64 (*.f64 a d)) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 a (+.f64 b c))) (sqrt.f64 (*.f64 a (+.f64 b c))) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 a d)) (sqrt.f64 (*.f64 a d)) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (pow.f64 (cbrt.f64 (+.f64 b c)) 2)) (cbrt.f64 (+.f64 b c)) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (sqrt.f64 (+.f64 b c))) (sqrt.f64 (+.f64 b c)) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 b c) (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 b c) (sqrt.f64 a)) (sqrt.f64 a) (*.f64 a d))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (pow.f64 (cbrt.f64 d) 2)) (cbrt.f64 d) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (sqrt.f64 d)) (sqrt.f64 d) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (*.f64 a (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 d (sqrt.f64 a)) (sqrt.f64 a) (*.f64 a (+.f64 b c)))))))"]],"rules":[["egg-rr",64]],"stop":[["node limit",1]],"time":48.8798828125,"type":"rewrite"},{"count":[[112,76]],"egraph":[[3,77,435,0.00071325],[2,69,435,0.000526458],[1,50,435,0.000338917],[0,21,435,0.000149333]],"inputs":[["(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 a (+.f64 c d))","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 (+.f64 c d) a))","(+.f64 (*.f64 a b) (*.f64 (+.f64 c d) a))","(+.f64 (*.f64 a b) (*.f64 (+.f64 c d) a))","(*.f64 (+.f64 d b) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 c a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 c a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 a d)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 a d)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 a (+.f64 c d))","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 a b)","(*.f64 b a)","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a b) (*.f64 a (+.f64 c d)))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 a b)","(*.f64 b a)","(+.f64 (*.f64 a b) (*.f64 (+.f64 c d) a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a b) (*.f64 (+.f64 c d) a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a b) (*.f64 (+.f64 c d) a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 (+.f64 d b) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 c a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 c a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 (+.f64 d b) a) (*.f64 c a))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 a d)","(*.f64 d a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(*.f64 a d)","(*.f64 d a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)","(+.f64 (*.f64 a (+.f64 c b)) (*.f64 a d))","(*.f64 (+.f64 c (+.f64 d b)) a)"]],"stop":[["saturated",1]],"time":15.93017578125,"type":"simplify"},{"compiler":[[915,248]],"time":8.15185546875,"type":"eval"},{"alts":[["(fma.f64 d a (*.f64 a (+.f64 b c)))","next",0]],"compiler":[[12,7],[12,7]],"count":[[77,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[76,1],"picked":[1,0]}],"min-error":[0],"time":14.485107421875,"type":"prune"},{"compiler":[[24,7]],"locations":[["(*.f64 a (+.f64 b c))",0.02734375,true]],"time":4.755859375,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 a (+.f64 b c))","c","-inf",0.251220703125],["(*.f64 a (+.f64 b c))","c","inf",0.222900390625],["(*.f64 a (+.f64 b c))","c","0",0.238037109375],["(*.f64 a (+.f64 b c))","b","-inf",0.218017578125],["(*.f64 a (+.f64 b c))","b","inf",0.25390625],["(*.f64 a (+.f64 b c))","b","0",0.266845703125],["(*.f64 a (+.f64 b c))","a","-inf",0.251953125],["(*.f64 a (+.f64 b c))","a","inf",0.505126953125],["(*.f64 a (+.f64 b c))","a","0",0.7060546875]],"time":3.02197265625,"type":"series"},{"count":[[1,24]],"egraph":[[2,1987,7,0.019034542],[1,134,7,0.0025912920000000002],[0,6,7,0.000150125]],"inputs":[["(*.f64 a (+.f64 b c))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a c) (*.f64 a b))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a b) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 a b) 1) (*.f64 (*.f64 a c) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 a (+.f64 b c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 a b) 3) (pow.f64 (*.f64 a c) 3)) (+.f64 (*.f64 (*.f64 a b) (*.f64 a b)) (-.f64 (*.f64 (*.f64 a c) (*.f64 a c)) (*.f64 (*.f64 a b) (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 a b) (*.f64 a b)) (*.f64 (*.f64 a c) (*.f64 a c))) (-.f64 (*.f64 a b) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 b 3) (pow.f64 c 3)) a) (fma.f64 b b (*.f64 c (-.f64 c b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (*.f64 b b) (*.f64 c c)) a) (-.f64 b c))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a (+.f64 (pow.f64 b 3) (pow.f64 c 3))) (fma.f64 b b (*.f64 c (-.f64 c b))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 a (-.f64 (*.f64 b b) (*.f64 c c))) (-.f64 b c))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a (+.f64 b c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a (+.f64 b c)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a (+.f64 b c))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 a (+.f64 b c))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 a (+.f64 b c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 a) (+.f64 b c)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a (+.f64 b c)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 a 3) (pow.f64 (+.f64 b c) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (+.f64 b c) 3) (pow.f64 a 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 a (+.f64 b c))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 a (+.f64 b c))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 a (+.f64 b c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a b (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b a (*.f64 a c))))))"]],"rules":[["egg-rr",24]],"stop":[["node limit",1]],"time":37.002197265625,"type":"rewrite"},{"count":[[60,29]],"egraph":[[2,20,234,0.00020649999999999998],[1,17,234,0.000137625],[0,9,234,6.4292e-5]],"inputs":[["(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 c a)","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 c a)","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 c a)","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))","(+.f64 (*.f64 a b) (*.f64 c a))"]],"method":["egg-herbie"],"outputs":[["(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 a (+.f64 c b))","(*.f64 c a)","(*.f64 a c)","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(*.f64 a b)","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(*.f64 c a)","(*.f64 a c)","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(*.f64 c a)","(*.f64 a c)","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))","(+.f64 (*.f64 a b) (*.f64 c a))","(*.f64 a (+.f64 c b))"]],"stop":[["saturated",1]],"time":12.488037109375,"type":"simplify"},{"compiler":[[374,132]],"time":4.678955078125,"type":"eval"},{"alts":[["(fma.f64 d a (*.f64 a (+.f64 b c)))","done",0]],"compiler":[[12,7]],"count":[[30,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[29,0],"picked":[1,1]}],"min-error":[0],"time":4.657958984375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["a",0,1],["b",0,1],["c",0,1],["d",0,1],["(*.f64 a (+.f64 (+.f64 b c) d))",0,1],["(+.f64 (+.f64 b c) d)",0,1],["(+.f64 b c)",0,1]],"compiler":[[5,4],[5,4],[5,4],[5,4],[11,7],[9,6],[7,5],[19,9]],"count":[[2,1]],"inputs":[["(fma.f64 d a (*.f64 a (+.f64 b c)))","(*.f64 a (+.f64 (+.f64 b c) d))"]],"link":["."],"name":["Expression, p14"],"oracle":[0.0234375],"outputs":[["(fma.f64 d a (*.f64 a (+.f64 b c)))"]],"time":17.385986328125,"times":[["a",2.380859375],["b",2.376953125],["c",2.27099609375],["d",2.382080078125],["(*.f64 a (+.f64 (+.f64 b c) d))",2.56103515625],["(+.f64 (+.f64 b c) d)",2.433837890625],["(+.f64 b c)",2.3388671875]],"type":"regimes"},{"compiler":[[12,7]],"egraph":[[1,10,11,2.9083e-5],[0,8,11,1.7458e-5]],"inputs":[["(fma.f64 d a (*.f64 a (+.f64 b c)))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 d a (*.f64 a (+.f64 b c)))"]],"stop":[["done",1],["saturated",1]],"time":8.2509765625,"type":"simplify"},{"time":0.0048828125,"type":"soundness"},{"compiler":[[12,7],[12,7],[12,7]],"remove-preprocessing":[[]],"time":19.463134765625,"type":"end"}]
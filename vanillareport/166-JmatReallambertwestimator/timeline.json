[{"compiler":[[8,5]],"method":["search"],"sampling":[[12,0.2498779296875,0.00048804283142089844,0.7496340274810791],[11,0.2498779296875,0.0009760856628417969,0.7491459846496582],[10,0.2498779296875,0.0019521713256835938,0.7481698989868164],[9,0.2498779296875,0.0039043426513671875,0.7462177276611328],[8,0.2498779296875,0.007808685302734375,0.7423133850097656],[7,0.2498779296875,0.01561737060546875,0.7345046997070313],[6,0.2498779296875,0.0312347412109375,0.7188873291015625],[5,0.2498779296875,0.062469482421875,0.687652587890625],[4,0.2498779296875,0.12493896484375,0.62518310546875],[3,0.2498779296875,0.2498779296875,0.500244140625],[2,0.0,0.499755859375,0.500244140625],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":0.924072265625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.28173828125,8],["body",256,"valid",370.692138671875,8256]],"time":378.989990234375,"type":"sample"},{"compiler":[[7,4]],"egraph":[[0,1,1,1.459e-6],[22,7382,10,0.12030204300000001],[21,6169,10,0.10858300200000001],[20,6169,10,0.09238096000000001],[19,6117,10,0.083177626],[18,6109,10,0.07377779300000001],[17,4997,10,0.064454543],[16,4997,10,0.054469168],[15,4987,10,0.047030709],[14,4932,10,0.039888875],[13,4758,10,0.032666125],[12,4268,10,0.025076833],[11,2198,10,0.01716875],[10,830,10,0.009744],[9,395,10,0.004214582999999999],[8,201,10,0.0021913749999999997],[7,125,10,0.001370041],[6,83,10,0.0009186660000000001],[5,45,10,0.000507125],[4,28,10,0.00028875],[3,19,10,0.000186916],[2,12,10,0.000112166],[1,7,10,6.8833e-5],[0,5,10,3.3125e-5]],"inputs":[["0"],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":143.929931640625,"type":"preprocess"},{"count":[[1,1]],"egraph":[[22,7382,10,0.141683254],[21,6169,10,0.127207879],[20,6169,10,0.106810879],[19,6117,10,0.096652337],[18,6109,10,0.08434267000000001],[17,4997,10,0.07309296100000001],[16,4997,10,0.06159666900000001],[15,4987,10,0.051922627000000006],[14,4932,10,0.044399668],[13,4758,10,0.034765626],[12,4268,10,0.025934084],[11,2198,10,0.016996959],[10,830,10,0.009786],[9,395,10,0.004254625],[8,201,10,0.002185],[7,125,10,0.001366834],[6,83,10,0.0009058339999999999],[5,45,10,0.0004936249999999999],[4,28,10,0.00028391699999999996],[3,19,10,0.000180875],[2,12,10,0.00010737500000000001],[1,7,10,6.4542e-5],[0,5,10,2.9667e-5]],"inputs":[["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"stop":[["node limit",1]],"time":155.343994140625,"type":"simplify"},{"compiler":[[7,4]],"time":0.889892578125,"type":"eval"},{"alts":[["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","next",0.28125]],"compiler":[[7,4],[7,4]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[0.28125],"time":0.694091796875,"type":"prune"},{"compiler":[[13,4]],"locations":[["(log.f64 (log.f64 x))",0.078125,true],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))",0.28515625,true]],"time":4.074951171875,"type":"localize"},{"count":[[2,16]],"series":[["(log.f64 (log.f64 x))","x","-inf",0.157958984375],["(log.f64 (log.f64 x))","x","inf",0.1708984375],["(log.f64 (log.f64 x))","x","0",0.1611328125],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","x","-inf",25.760986328125],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","x","inf",13.530029296875],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","x","0",30.756103515625]],"time":70.679931640625,"type":"series"},{"count":[[2,53]],"egraph":[[2,1490,13,0.017435041],[1,107,13,0.002356749],[0,5,13,0.000136958]],"inputs":[["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(log.f64 (log.f64 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 x) (*.f64 (neg.f64 (log.f64 (log.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x (log.f64 x))) (fma.f64 (neg.f64 (log.f64 (log.f64 x))) 1 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x (log.f64 x))) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 (log.f64 x)))) (pow.f64 (cbrt.f64 (log.f64 (log.f64 x))) 2) (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (/.f64 x (log.f64 x))) (fma.f64 (neg.f64 (sqrt.f64 (log.f64 (log.f64 x)))) (sqrt.f64 (log.f64 (log.f64 x))) (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 (log.f64 x))) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 2) (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (/.f64 x (log.f64 x)))) (sqrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 (log.f64 x)) 3)) (/.f64 1 (+.f64 (pow.f64 (log.f64 x) 2) (*.f64 (log.f64 (log.f64 x)) (log.f64 (*.f64 x (log.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 (log.f64 x)) 2)) (/.f64 1 (log.f64 (*.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log.f64 x)) (sqrt.f64 (log.f64 (log.f64 x)))) (-.f64 (sqrt.f64 (log.f64 x)) (sqrt.f64 (log.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log.f64 x) 2) (*.f64 (log.f64 (log.f64 x)) (log.f64 (*.f64 x (log.f64 x))))) (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 (log.f64 x)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (log.f64 (*.f64 x (log.f64 x))) (-.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 (log.f64 x)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 (log.f64 x)) 3)) (+.f64 (pow.f64 (log.f64 x) 2) (*.f64 (log.f64 (log.f64 x)) (log.f64 (*.f64 x (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 (log.f64 x)) 2)) (log.f64 (*.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 (log.f64 x)) 3))) (neg.f64 (+.f64 (pow.f64 (log.f64 x) 2) (*.f64 (log.f64 (log.f64 x)) (log.f64 (*.f64 x (log.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 (log.f64 x)) 2))) (neg.f64 (log.f64 (*.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (neg.f64 (log.f64 (log.f64 x))) 3)) (+.f64 (pow.f64 (log.f64 x) 2) (-.f64 (*.f64 (neg.f64 (log.f64 (log.f64 x))) (neg.f64 (log.f64 (log.f64 x)))) (*.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 x) 2) (*.f64 (neg.f64 (log.f64 (log.f64 x))) (neg.f64 (log.f64 (log.f64 x))))) (-.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 x (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (cbrt.f64 (log.f64 x)) (neg.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 x)) (sqrt.f64 (log.f64 x)) (neg.f64 (log.f64 (log.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (log.f64 (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (log.f64 x))) (log.f64 (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (log.f64 (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (log.f64 x))) 2) (cbrt.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (log.f64 x))) (sqrt.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (log.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (log.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (log.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (log.f64 x))))))))"]],"rules":[["egg-rr",18],["egg-rr",35]],"stop":[["node limit",1]],"time":41.126220703125,"type":"rewrite"},{"count":[[69,59]],"egraph":[[19,7612,120,0.15959191499999997],[18,7612,120,0.14561370699999998],[17,7580,120,0.13479854],[16,7532,120,0.12403328999999999],[15,7432,120,0.113632165],[14,7054,120,0.104164915],[13,5458,120,0.091560665],[12,5274,120,0.076464831],[11,5274,120,0.065172248],[10,5270,120,0.057421123],[9,5232,120,0.049343372999999996],[8,5080,120,0.041161165],[7,4471,120,0.031545039999999996],[6,2768,120,0.022124874],[5,1532,120,0.011239915999999999],[4,618,120,0.005885916],[3,189,120,0.0019866659999999998],[2,73,120,0.000736916],[1,38,120,0.000311125],[0,16,216,0.000142708]],"inputs":[["(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(-.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(-.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))","(-.f64 (neg.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 (neg.f64 (log.f64 x)))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))","(log.f64 (*.f64 -1 (log.f64 (/.f64 1 x))))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))","(log.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(log.f64 (neg.f64 (neg.f64 (log.f64 x))))","(log.f64 (log.f64 x))"]],"stop":[["node limit",1]],"time":180.7109375,"type":"simplify"},{"compiler":[[738,276]],"time":7.79296875,"type":"eval"},{"alts":[["(-.f64 (log.f64 x) (pow.f64 (sqrt.f64 (log.f64 (log.f64 x))) 2))","fresh",0.53125],["(log.f64 (/.f64 x (log.f64 x)))","next",0.015625],["(-.f64 (log.f64 x) (log1p.f64 (-.f64 (log.f64 x) 1)))","fresh",0.27734375]],"compiler":[[10,7],[6,4],[9,6],[10,7],[6,4],[9,6]],"count":[[60,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[59,3],"picked":[1,0]}],"min-error":[0],"time":11.1259765625,"type":"prune"},{"compiler":[[13,4]],"locations":[["(log.f64 (/.f64 x (log.f64 x)))",0.01171875,true],["(/.f64 x (log.f64 x))",0.2734375,true]],"time":4.068115234375,"type":"localize"},{"count":[[2,20]],"series":[["(log.f64 (/.f64 x (log.f64 x)))","x","-inf",9.215087890625],["(log.f64 (/.f64 x (log.f64 x)))","x","inf",8.7119140625],["(log.f64 (/.f64 x (log.f64 x)))","x","0",8.626953125],["(/.f64 x (log.f64 x))","x","-inf",2.81103515625],["(/.f64 x (log.f64 x))","x","inf",10.819091796875],["(/.f64 x (log.f64 x))","x","0",0.452880859375]],"time":40.844970703125,"type":"series"},{"count":[[2,62]],"egraph":[[2,1283,14,0.017523416],[1,100,14,0.002474625],[0,5,14,0.000165542]],"inputs":[["(/.f64 x (log.f64 x))","(log.f64 (/.f64 x (log.f64 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 (/.f64 x (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) 2) (*.f64 (cbrt.f64 x) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (log.f64 x))) (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 2) (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (log.f64 x))) (sqrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (log.f64 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (/.f64 (cbrt.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (/.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (cbrt.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (log.f64 x)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (log.f64 x))) (/.f64 x (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 (log.f64 x))) (/.f64 (cbrt.f64 x) (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (log.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 x) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 x (log.f64 x))))) (sqrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 2)) (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (log.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (log.f64 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 x (log.f64 x))) 2)) (log.f64 (cbrt.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 x (log.f64 x)))) (log.f64 (sqrt.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 x) (log.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (/.f64 x (log.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 x)) (log.f64 (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 2) (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (/.f64 x (log.f64 x)))) (sqrt.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 x) 3) (pow.f64 (log.f64 (log.f64 x)) 3)) (+.f64 (pow.f64 (log.f64 x) 2) (+.f64 (*.f64 (log.f64 (log.f64 x)) (log.f64 (log.f64 x))) (*.f64 (log.f64 x) (log.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 x) 2) (*.f64 (log.f64 (log.f64 x)) (log.f64 (log.f64 x)))) (+.f64 (log.f64 x) (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 x (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (/.f64 x (log.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 x (log.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 x (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (/.f64 x (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (cbrt.f64 (log.f64 x)) (neg.f64 (log.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log.f64 x)) (sqrt.f64 (log.f64 x)) (neg.f64 (log.f64 (log.f64 x))))))))"]],"rules":[["egg-rr",28],["egg-rr",34]],"stop":[["node limit",1]],"time":43.075927734375,"type":"rewrite"},{"count":[[82,68]],"egraph":[[10,7758,168,0.078941082],[9,7329,168,0.068107707],[8,6521,168,0.056644332000000006],[7,5349,168,0.044862166],[6,3748,168,0.029272125],[5,1491,168,0.016220709],[4,632,168,0.005731125],[3,243,168,0.002000375],[2,92,192,0.0007704579999999999],[1,53,200,0.000316],[0,25,224,0.000129958]],"inputs":[["(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(*.f64 -1 (/.f64 x (log.f64 (/.f64 1 x))))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(/.f64 x (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))","(neg.f64 (/.f64 x (neg.f64 (log.f64 x))))","(/.f64 (neg.f64 x) (neg.f64 (log.f64 x)))","(*.f64 1 (/.f64 x (log.f64 x)))","(/.f64 x (log.f64 x))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 (log.f64 x))) (log.f64 x))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 1 x))) (log.f64 (/.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))","(+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 (/.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))))","(+.f64 (log.f64 x) (neg.f64 (log.f64 (log.f64 x))))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"stop":[["node limit",1]],"time":98.323974609375,"type":"simplify"},{"compiler":[[702,290]],"time":8.3369140625,"type":"eval"},{"alts":[["(neg.f64 (log.f64 (/.f64 (log.f64 x) x)))","next",0.0078125],["(-.f64 (log.f64 x) (log1p.f64 (-.f64 (log.f64 x) 1)))","fresh",0.27734375]],"compiler":[[7,5],[9,6],[7,5],[9,6]],"count":[[71,2]],"kept":[{"done":[0,0],"fresh":[2,1],"new":[68,1],"picked":[1,0]}],"min-error":[0],"time":14.133056640625,"type":"prune"},{"compiler":[[19,5]],"locations":[["(log.f64 (/.f64 (log.f64 x) x))",0.00390625,true],["(/.f64 (log.f64 x) x)",0.26171875,true]],"time":5.717041015625,"type":"localize"},{"count":[[2,20]],"series":[["(log.f64 (/.f64 (log.f64 x) x))","x","-inf",34.31005859375],["(log.f64 (/.f64 (log.f64 x) x))","x","inf",5.89794921875],["(log.f64 (/.f64 (log.f64 x) x))","x","0",7.84716796875],["(/.f64 (log.f64 x) x)","x","-inf",0.406982421875],["(/.f64 (log.f64 x) x)","x","inf",0.27197265625],["(/.f64 (log.f64 x) x)","x","0",0.534912109375]],"time":49.541015625,"type":"series"},{"count":[[2,59]],"egraph":[[2,1278,14,0.017026374],[1,100,14,0.001937207],[0,5,14,0.000142166]],"inputs":[["(/.f64 (log.f64 x) x)","(log.f64 (/.f64 (log.f64 x) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 (/.f64 (log.f64 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (log.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 x) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (log.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (log.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (*.f64 (cbrt.f64 (log.f64 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (log.f64 x) x)) (pow.f64 (cbrt.f64 (/.f64 (log.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (log.f64 x) x)) 2) (cbrt.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 x)) (*.f64 (sqrt.f64 (log.f64 x)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (log.f64 x) x)) (sqrt.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (log.f64 x)) (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) 1) (/.f64 (cbrt.f64 (log.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log.f64 x)) 1) (/.f64 (sqrt.f64 (log.f64 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 x) 2)) (/.f64 (log.f64 x) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (log.f64 x)) (pow.f64 (cbrt.f64 x) 2)) (/.f64 (sqrt.f64 (log.f64 x)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 x)) (/.f64 (log.f64 x) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (sqrt.f64 x)) (/.f64 (cbrt.f64 (log.f64 x)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (log.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (log.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x)))) (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2)) (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (log.f64 x) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 x (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log.f64 x) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (log.f64 x)) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (log.f64 x) x)) 2)) (log.f64 (cbrt.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))) (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (log.f64 x)) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (/.f64 (log.f64 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (neg.f64 (log.f64 x))) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 (log.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) (pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2) (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))) (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log.f64 (log.f64 x)) 3) (pow.f64 (log.f64 x) 3)) (+.f64 (*.f64 (log.f64 (log.f64 x)) (log.f64 (log.f64 x))) (+.f64 (pow.f64 (log.f64 x) 2) (*.f64 (log.f64 (log.f64 x)) (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (log.f64 (log.f64 x)) (log.f64 (log.f64 x))) (pow.f64 (log.f64 x) 2)) (+.f64 (log.f64 (log.f64 x)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (log.f64 (/.f64 x (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 (log.f64 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (/.f64 (log.f64 x) x))))))))"]],"rules":[["egg-rr",25],["egg-rr",34]],"stop":[["node limit",1]],"time":40.842041015625,"type":"rewrite"},{"count":[[79,65]],"egraph":[[10,7572,168,0.058812708],[9,7001,168,0.050482291],[8,6597,168,0.043044373999999996],[7,6006,168,0.035299791],[6,4430,168,0.026142541],[5,2204,168,0.016970582999999997],[4,695,168,0.007316375],[3,285,168,0.002389791],[2,119,168,0.0009088750000000001],[1,56,168,0.000354708],[0,24,224,0.00012325]],"inputs":[["(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (neg.f64 (neg.f64 (log.f64 x))) x)","(/.f64 (log.f64 x) x)","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))"]],"stop":[["node limit",1]],"time":76.5810546875,"type":"simplify"},{"compiler":[[733,345]],"time":8.17578125,"type":"eval"},{"alts":[["(neg.f64 (+.f64 (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))) (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x)))))","fresh",0.01171875],["(neg.f64 (log.f64 (*.f64 (log.f64 x) (/.f64 1 x))))","next",0.0078125],["(neg.f64 (log.f64 (/.f64 (log.f64 x) x)))","done",0.0078125]],"compiler":[[15,7],[9,7],[7,5],[15,7],[9,7]],"count":[[67,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[65,2],"picked":[1,1]}],"min-error":[0],"time":11.09716796875,"type":"prune"},{"compiler":[[29,17]],"locations":[["(log.f64 (*.f64 (log.f64 x) (/.f64 1 x)))",0.00390625,true],["(*.f64 (log.f64 x) (/.f64 1 x))",0.3991012695368841,true]],"time":8.889892578125,"type":"localize"},{"count":[[2,24]],"series":[["(log.f64 (*.f64 (log.f64 x) (/.f64 1 x)))","x","-inf",0.175048828125],["(log.f64 (*.f64 (log.f64 x) (/.f64 1 x)))","x","inf",0.18505859375],["(log.f64 (*.f64 (log.f64 x) (/.f64 1 x)))","x","0",0.156982421875],["(*.f64 (log.f64 x) (/.f64 1 x))","x","-inf",0.220947265625],["(*.f64 (log.f64 x) (/.f64 1 x))","x","inf",0.16796875],["(*.f64 (log.f64 x) (/.f64 1 x))","x","0",0.175048828125]],"time":1.1650390625,"type":"series"},{"count":[[2,46]],"egraph":[[2,1586,14,0.016223958],[1,136,14,0.002415875],[0,7,14,0.000186958]],"inputs":[["(*.f64 (log.f64 x) (/.f64 1 x))","(log.f64 (*.f64 (log.f64 x) (/.f64 1 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 1 (-.f64 (/.f64 (log.f64 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (log.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (log.f64 x) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (log.f64 x)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (log.f64 x)) 2) (/.f64 x (cbrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (log.f64 x)) (/.f64 x (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 x) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 x) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (log.f64 x) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (log.f64 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (log.f64 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (log.f64 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (log.f64 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2)) (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x)))) (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (log.f64 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 x (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (log.f64 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (log.f64 x) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (log.f64 x)) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))) (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (log.f64 x) x)) 2)) (log.f64 (cbrt.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (log.f64 x)) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (log.f64 (/.f64 (log.f64 x) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (log.f64 (/.f64 (log.f64 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (log.f64 (/.f64 (log.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) (pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2) (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))) (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log.f64 (log.f64 x)) 3) (pow.f64 (neg.f64 (log.f64 x)) 3)) (+.f64 (*.f64 (log.f64 (log.f64 x)) (log.f64 (log.f64 x))) (-.f64 (*.f64 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 x))) (*.f64 (log.f64 (log.f64 x)) (neg.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (log.f64 (log.f64 x)) (log.f64 (log.f64 x))) (*.f64 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 x)))) (-.f64 (log.f64 (log.f64 x)) (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (log.f64 (/.f64 (log.f64 x) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (log.f64 (/.f64 (log.f64 x) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (log.f64 (/.f64 (log.f64 x) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 (log.f64 x) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (log.f64 (/.f64 (log.f64 x) x))))))))"]],"rules":[["egg-rr",23],["egg-rr",23]],"stop":[["node limit",1]],"time":37.444091796875,"type":"rewrite"},{"count":[[70,51]],"egraph":[[10,7579,192,0.056067918],[9,7006,192,0.047863793],[8,6602,192,0.040557377000000006],[7,6011,192,0.032930127000000003],[6,4436,192,0.02413521],[5,2191,192,0.015281793],[4,694,192,0.007057126],[3,285,192,0.002351709],[2,119,192,0.000889584],[1,57,192,0.000345501],[0,25,216,0.000119084]],"inputs":[["(/.f64 (log.f64 x) x)","(/.f64 (log.f64 x) x)","(/.f64 (log.f64 x) x)","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (log.f64 x) x)","(/.f64 (log.f64 x) x)","(/.f64 (log.f64 x) x)","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (log.f64 x) x)","(*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) x))","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (log.f64 x) x)","(/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x)","(/.f64 (log.f64 x) x)","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (log.f64 x)) (*.f64 -1 (log.f64 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (/.f64 1 x)) (log.f64 (*.f64 -1 (log.f64 (/.f64 1 x)))))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))","(+.f64 (log.f64 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (log.f64 (/.f64 -1 x)))","(+.f64 (neg.f64 (log.f64 x)) (log.f64 (log.f64 x)))","(-.f64 (log.f64 (log.f64 x)) (log.f64 x))"]],"stop":[["node limit",1]],"time":72.556884765625,"type":"simplify"},{"compiler":[[560,257]],"time":6.123046875,"type":"eval"},{"alts":[["(neg.f64 (log.f64 (*.f64 (log.f64 x) (/.f64 1 x))))","done",0.0078125],["(neg.f64 (log.f64 (/.f64 (log.f64 x) x)))","done",0.0078125],["(neg.f64 (+.f64 (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))) (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x)))))","fresh",0.01171875]],"compiler":[[9,7],[7,5],[15,7]],"count":[[54,3]],"kept":[{"done":[1,1],"fresh":[1,0],"new":[51,1],"picked":[1,1]}],"min-error":[0],"time":7.194091796875,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))",0.0078125,1],["(log.f64 x)",0.0078125,1],["(log.f64 x)",0.0078125,1]],"compiler":[[2,1],[7,4],[3,2],[3,2],[71,26]],"count":[[8,1]],"inputs":[["(neg.f64 (+.f64 (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))) (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x)))))","(neg.f64 (+.f64 (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x))) (log.f64 (sqrt.f64 (/.f64 (log.f64 x) x)))))","(neg.f64 (log.f64 (*.f64 (log.f64 x) (/.f64 1 x))))","(neg.f64 (log.f64 (/.f64 (log.f64 x) x)))","(-.f64 (log.f64 x) (pow.f64 (sqrt.f64 (log.f64 (log.f64 x))) 2))","(log.f64 (/.f64 x (log.f64 x)))","(-.f64 (log.f64 x) (log1p.f64 (-.f64 (log.f64 x) 1)))","(-.f64 (log.f64 x) (log.f64 (log.f64 x)))"]],"link":["."],"name":["Jmat.Real.lambertw, estimator"],"oracle":[0.546875],"outputs":[["(neg.f64 (log.f64 (*.f64 (log.f64 x) (/.f64 1 x))))"]],"time":17.3837890625,"times":[["x",3.846923828125],["(-.f64 (log.f64 x) (log.f64 (log.f64 x)))",4.068115234375],["(log.f64 x)",3.98095703125],["(log.f64 x)",4.184814453125]],"type":"regimes"},{"compiler":[[9,7]],"egraph":[[3,17,13,8.2458e-5],[2,16,13,6.4458e-5],[1,14,13,4.5666e-5],[0,8,13,2.7041e-5]],"inputs":[["(neg.f64 (log.f64 (*.f64 (log.f64 x) (/.f64 1 x))))"]],"method":["egg-herbie"],"outputs":[["(neg.f64 (log.f64 (*.f64 (log.f64 x) (/.f64 1 x))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.256103515625,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[9,7]],"remove-preprocessing":[[]],"time":8.221923828125,"type":"end"}]
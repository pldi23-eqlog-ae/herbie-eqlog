[{"compiler":[[10,7]],"method":["search"],"sampling":[[12,0.9073164244182408,0.09170725150033832,0.0009763240814208984],[11,0.8780481526628137,0.12097552325576544,0.0009763240814208984],[10,0.8195116091519594,0.17951206676661968,0.0009763240814208984],[9,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[8,0.6556092873215675,0.34341438859701157,0.0009763240814208984],[7,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":23.382080078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.031005859375,1],["body",1024,"valid",18.082763671875,220],["body",512,"valid",8.388916015625,145],["body",2048,"valid",19.3935546875,174],["body",256,"valid",256.40478515625,7717]],"time":311.195068359375,"type":"sample"},{"compiler":[[9,6]],"egraph":[[0,2,2,1.625e-6],[10,1354,16,0.022273333],[9,1350,16,0.01838375],[8,1290,16,0.014457167],[7,992,16,0.01034425],[6,622,16,0.006152958],[5,326,20,0.002940958],[4,157,20,0.00121375],[3,74,20,0.0005468340000000001],[2,40,20,0.00024775000000000003],[1,20,20,0.000124041],[0,10,20,4.9375e-5]],"inputs":[["0","1"],["(+.f64 x (/.f64 (-.f64 x y) 2))","(+.f64 y (/.f64 (-.f64 y x) 2))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 x (/.f64 (-.f64 x y) 2))","(fma.f64 y -1/2 (*.f64 x 3/2))","(fma.f64 1/2 (-.f64 x y) x)","(fma.f64 (-.f64 x y) 1/2 x)","(+.f64 y (/.f64 (-.f64 y x) 2))","(+.f64 y (*.f64 -1/2 (-.f64 x y)))","(fma.f64 x -1/2 (*.f64 y 3/2))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":45.976806640625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,1046,8,0.013719583],[9,988,8,0.011014499],[8,749,8,0.008053333000000001],[7,505,8,0.0051660410000000006],[6,324,10,0.0029070830000000004],[5,170,10,0.0014611250000000002],[4,87,10,0.000682458],[3,43,10,0.00033187500000000003],[2,24,10,0.000162625],[1,13,10,8.7208e-5],[0,7,10,3.6875e-5]],"inputs":[["(+.f64 x (/.f64 (-.f64 x y) 2))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (-.f64 x y) 2))","(fma.f64 y -1/2 (*.f64 x 3/2))","(fma.f64 1/2 (-.f64 x y) x)","(fma.f64 (-.f64 x y) 1/2 x)"]],"stop":[["saturated",1]],"time":24.3701171875,"type":"simplify"},{"compiler":[[15,8]],"time":0.337890625,"type":"eval"},{"alts":[["(fma.f64 (-.f64 x y) 1/2 x)","next",0.08203125]],"compiler":[[8,5],[8,5]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[0.08203125],"time":0.7890625,"type":"prune"},{"compiler":[[14,6]],"locations":[["(fma.f64 (-.f64 x y) 1/2 x)",0.01171875,true]],"time":3.304931640625,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 (-.f64 x y) 1/2 x)","y","-inf",0.364013671875],["(fma.f64 (-.f64 x y) 1/2 x)","y","inf",0.300048828125],["(fma.f64 (-.f64 x y) 1/2 x)","y","0",0.262939453125],["(fma.f64 (-.f64 x y) 1/2 x)","x","-inf",0.40087890625],["(fma.f64 (-.f64 x y) 1/2 x)","x","inf",0.377197265625],["(fma.f64 (-.f64 x y) 1/2 x)","x","0",0.316162109375]],"time":2.10400390625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1742,8,0.017465167],[1,132,8,0.0024190830000000003],[0,6,8,0.000195625]],"inputs":[["(fma.f64 (-.f64 x y) 1/2 x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (-.f64 x y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 x y) 1/2) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (-.f64 x y) 1/2) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 (-.f64 x y) 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (-.f64 x y) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (-.f64 x y) 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) (pow.f64 (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) 2) (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) (sqrt.f64 (fma.f64 (-.f64 x y) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (-.f64 x y) 1/2) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 (-.f64 x y) 1/2)) (-.f64 (*.f64 x x) (*.f64 (*.f64 (-.f64 x y) 1/2) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (-.f64 x y) 1/2) (*.f64 (-.f64 x y) 1/2)) (*.f64 x x)) (-.f64 (*.f64 (-.f64 x y) 1/2) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (-.f64 x y) 1/2 x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (-.f64 x y) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (-.f64 x y) 1/2 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (-.f64 x y) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (-.f64 x y) 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (-.f64 x y) 1/2 x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":34.984130859375,"type":"rewrite"},{"count":[[45,28]],"egraph":[[2,46,168,0.00034691699999999997],[1,32,168,0.00022799999999999999],[0,14,168,9.9625e-5]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 1/2 x) x)","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) x)","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 -1/2 y) (+.f64 (*.f64 1/2 x) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(*.f64 -1/2 y)","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 -1/2 y) x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(fma.f64 3/2 x (*.f64 -1/2 y))"]],"stop":[["saturated",1]],"time":12.02001953125,"type":"simplify"},{"compiler":[[286,156]],"time":3.7919921875,"type":"eval"},{"alts":[["(fma.f64 3/2 x (*.f64 -1/2 y))","next",0]],"compiler":[[8,6],[8,6]],"count":[[29,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[28,1],"picked":[1,0]}],"min-error":[0],"time":3.9599609375,"type":"prune"},{"compiler":[[15,10]],"locations":[["(fma.f64 3/2 x (*.f64 -1/2 y))",0.0703125,true]],"time":3.653076171875,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 3/2 x (*.f64 -1/2 y))","y","-inf",0.258056640625],["(fma.f64 3/2 x (*.f64 -1/2 y))","y","inf",0.240966796875],["(fma.f64 3/2 x (*.f64 -1/2 y))","y","0",0.2890625],["(fma.f64 3/2 x (*.f64 -1/2 y))","x","-inf",0.24609375],["(fma.f64 3/2 x (*.f64 -1/2 y))","x","inf",0.218017578125],["(fma.f64 3/2 x (*.f64 -1/2 y))","x","0",0.3271484375]],"time":1.65185546875,"type":"series"},{"count":[[1,21]],"egraph":[[2,1531,8,0.016518957],[1,141,8,0.0022766239999999997],[0,7,8,0.000246041]],"inputs":[["(fma.f64 3/2 x (*.f64 -1/2 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 -1/2 y) (*.f64 3/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 3/2 x) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 3/2 x) 1) (*.f64 -1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 3/2 x (*.f64 -1/2 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 3/2 x (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 3/2 x (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))) (pow.f64 (cbrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))) 2) (cbrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))) (sqrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 3/2 x) 3) (pow.f64 (*.f64 -1/2 y) 3)) (+.f64 (*.f64 (*.f64 3/2 x) (*.f64 3/2 x)) (-.f64 (*.f64 (*.f64 y y) 1/4) (*.f64 (*.f64 3/2 x) (*.f64 -1/2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 3/2 x) (*.f64 3/2 x)) (*.f64 (*.f64 y y) 1/4)) (-.f64 (*.f64 3/2 x) (*.f64 -1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 3/2 x (*.f64 -1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 3/2 x (*.f64 -1/2 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 3/2 x (*.f64 -1/2 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 3/2 x (*.f64 -1/2 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 3/2 x (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 3/2 x (*.f64 -1/2 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 3/2 x (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 3/2 x (*.f64 -1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 3/2 x (*.f64 -1/2 y))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":33.76708984375,"type":"rewrite"},{"count":[[45,24]],"egraph":[[2,15,168,0.000182542],[1,12,168,0.000121875],[0,8,168,5.7125e-5]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 3/2 x)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(*.f64 -1/2 y)","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))","(+.f64 (*.f64 -1/2 y) (*.f64 3/2 x))","(fma.f64 -1/2 y (*.f64 3/2 x))"]],"stop":[["saturated",1]],"time":12.2958984375,"type":"simplify"},{"compiler":[[252,189]],"time":3.886962890625,"type":"eval"},{"alts":[["(fma.f64 3/2 x (*.f64 -1/2 y))","done",0]],"compiler":[[8,6]],"count":[[25,1]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[24,0],"picked":[1,1]}],"min-error":[0],"time":2.947021484375,"type":"prune"},{"accuracy":[0],"baseline":[0.0],"branch":[["x",0,1],["y",0,1],["(+.f64 x (/.f64 (-.f64 x y) 2))",0,1]],"compiler":[[3,2],[3,2],[9,6],[21,12]],"count":[[3,1]],"inputs":[["(fma.f64 3/2 x (*.f64 -1/2 y))","(fma.f64 (-.f64 x y) 1/2 x)","(+.f64 x (/.f64 (-.f64 x y) 2))"]],"link":["."],"name":["Graphics.Rendering.Chart.Axis.Types:hBufferRect from Chart-1.5.3"],"oracle":[0.08203125],"outputs":[["(fma.f64 3/2 x (*.f64 -1/2 y))"]],"time":9.01416015625,"times":[["x",2.6689453125],["y",2.889892578125],["(+.f64 x (/.f64 (-.f64 x y) 2))",2.784912109375]],"type":"regimes"},{"compiler":[[8,6]],"egraph":[[1,8,8,2.6667e-5],[0,7,8,1.5542e-5]],"inputs":[["(fma.f64 3/2 x (*.f64 -1/2 y))"]],"method":["egg-herbie"],"outputs":[["(fma.f64 3/2 x (*.f64 -1/2 y))"]],"stop":[["done",1],["saturated",1]],"time":7.994873046875,"type":"simplify"},{"time":0.01513671875,"type":"soundness"},{"compiler":[[8,6]],"remove-preprocessing":[[]],"time":7.887939453125,"type":"end"}]
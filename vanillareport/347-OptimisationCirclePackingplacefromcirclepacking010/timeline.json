[{"compiler":[[14,9]],"method":["search"],"sampling":[[12,0.1910326833876861,0.7914211168918424,0.017546199720471556],[11,0.1403505428970755,0.8518498228614165,0.00779963424150798],[10,0.09356702859805033,0.9044812764478198,0.0019516949541298345],[9,0.062378019065366885,0.9356702859805033,0.0019516949541298345],[8,0.0,0.9980483050458702,0.0019516949541298345],[7,0.0,0.9980483050458702,0.0019516949541298345],[6,0.0,0.9980483050458702,0.0019516949541298345],[5,0.0,0.9980483050458702,0.0019516949541298345],[4,0.0,0.9980483050458702,0.0019516949541298345],[3,0.0,0.9980483050458702,0.0019516949541298345],[2,0.0,0.9980483050458702,0.0019516949541298345],[1,0.0,0.9980483050458702,0.0019516949541298345],[0,0.0,0.9980483050458702,0.0019516949541298345]],"time":135.777099609375,"type":"analyze"},{"outcomes":[["body",256,"invalid",118.200439453125,2620],["body",256,"valid",369.195556640625,8256]],"time":497.0390625,"type":"sample"},{"compiler":[[13,8]],"egraph":[[0,4,4,2.666e-6],[7,7681,77,0.044164917],[6,3990,77,0.031020625],[5,2282,77,0.013961417],[4,867,77,0.005827125],[3,357,77,0.002050708],[2,146,77,0.00077925],[1,70,91,0.000297125],[0,32,91,0.000110792]],"inputs":[["0","1","2","3"],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","(+.f64 y (/.f64 (*.f64 x (-.f64 z y)) t))","(+.f64 z (/.f64 (*.f64 y (-.f64 x z)) t))","(+.f64 t (/.f64 (*.f64 y (-.f64 z t)) x))","(+.f64 x (/.f64 (*.f64 z (-.f64 y x)) t))","(+.f64 x (/.f64 (*.f64 t (-.f64 z x)) y))","(+.f64 x (/.f64 (*.f64 y (-.f64 t x)) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2","3"],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (-.f64 z x) (/.f64 y t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 y (/.f64 (*.f64 x (-.f64 z y)) t))","(+.f64 y (*.f64 (/.f64 x t) (-.f64 z y)))","(fma.f64 (/.f64 x t) (-.f64 z y) y)","(fma.f64 (-.f64 z y) (/.f64 x t) y)","(fma.f64 x (/.f64 (-.f64 z y) t) y)","(+.f64 z (/.f64 (*.f64 y (-.f64 x z)) t))","(+.f64 z (/.f64 y (/.f64 t (-.f64 x z))))","(fma.f64 (/.f64 y t) (-.f64 x z) z)","(fma.f64 (-.f64 x z) (/.f64 y t) z)","(fma.f64 y (/.f64 (-.f64 x z) t) z)","(+.f64 t (/.f64 (*.f64 y (-.f64 z t)) x))","(+.f64 t (/.f64 y (/.f64 x (-.f64 z t))))","(+.f64 t (*.f64 (/.f64 y x) (-.f64 z t)))","(fma.f64 (/.f64 y x) (-.f64 z t) t)","(fma.f64 (-.f64 z t) (/.f64 y x) t)","(fma.f64 y (/.f64 (-.f64 z t) x) t)","(+.f64 x (/.f64 (*.f64 z (-.f64 y x)) t))","(+.f64 x (/.f64 (-.f64 y x) (/.f64 t z)))","(fma.f64 (/.f64 z t) (-.f64 y x) x)","(fma.f64 (-.f64 y x) (/.f64 z t) x)","(+.f64 x (/.f64 (*.f64 t (-.f64 z x)) y))","(+.f64 x (/.f64 t (/.f64 y (-.f64 z x))))","(+.f64 x (*.f64 (/.f64 t y) (-.f64 z x)))","(fma.f64 (/.f64 t y) (-.f64 z x) x)","(fma.f64 (-.f64 z x) (/.f64 t y) x)","(+.f64 x (/.f64 (*.f64 y (-.f64 t x)) z))","(+.f64 x (*.f64 (/.f64 y z) (-.f64 t x)))","(fma.f64 (/.f64 y z) (-.f64 t x) x)","(fma.f64 (-.f64 t x) (/.f64 y z) x)","(fma.f64 y (/.f64 (-.f64 t x) z) x)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":68.784912109375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[14,3528,11,0.057839747999999996],[13,3528,11,0.050321998],[12,3523,11,0.043956373],[11,3493,11,0.037550873],[10,3444,11,0.030813623],[9,2911,11,0.024173331],[8,1978,11,0.016242915],[7,1014,11,0.008558207],[6,551,11,0.003992124],[5,313,11,0.0020155399999999997],[4,150,11,0.0010023319999999999],[3,64,11,0.00045287400000000003],[2,30,11,0.00020079100000000002],[1,15,13,9.554100000000001e-5],[0,9,13,3.9833e-5]],"inputs":[["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))"]],"method":["egg-herbie"],"outputs":[["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","(+.f64 x (/.f64 y (/.f64 t (-.f64 z x))))","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (-.f64 z x) (/.f64 y t) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)"]],"stop":[["saturated",1]],"time":69.0048828125,"type":"simplify"},{"compiler":[[21,10]],"time":0.298095703125,"type":"eval"},{"alts":[["(fma.f64 y (/.f64 (-.f64 z x) t) x)","next",5.814553448639899],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))","fresh",7.848311775813497]],"compiler":[[12,7],[13,8],[12,7],[13,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.05078125],"time":1.2099609375,"type":"prune"},{"compiler":[[24,7]],"locations":[["(/.f64 (-.f64 z x) t)",0.0078125,true],["(fma.f64 y (/.f64 (-.f64 z x) t) x)",5.506110983451574,true]],"time":5.115966796875,"type":"localize"},{"count":[[2,72]],"series":[["(/.f64 (-.f64 z x) t)","t","-inf",0.2099609375],["(/.f64 (-.f64 z x) t)","t","inf",0.241943359375],["(/.f64 (-.f64 z x) t)","t","0",0.203857421875],["(/.f64 (-.f64 z x) t)","x","-inf",0.153076171875],["(/.f64 (-.f64 z x) t)","x","inf",0.173828125],["(/.f64 (-.f64 z x) t)","x","0",0.155029296875],["(/.f64 (-.f64 z x) t)","z","-inf",0.178955078125],["(/.f64 (-.f64 z x) t)","z","inf",0.152099609375],["(/.f64 (-.f64 z x) t)","z","0",0.161865234375],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","t","-inf",0.35302734375],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","t","inf",0.32421875],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","t","0",0.356201171875],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","-inf",0.446044921875],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","inf",0.7060546875],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","0",0.406005859375],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","z","-inf",0.47314453125],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","z","inf",0.446044921875],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","z","0",0.569091796875],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","y","-inf",0.363037109375],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","y","inf",0.403076171875],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","y","0",0.528076171875]],"time":7.274169921875,"type":"series"},{"count":[[2,214]],"egraph":[[2,2627,18,0.024187833],[1,178,18,0.003276875],[0,8,18,0.000187292]],"inputs":[["(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (-.f64 z x) t)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (/.f64 (-.f64 z x) t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (/.f64 (-.f64 z x) t)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (/.f64 (-.f64 z x) t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 2) (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) (sqrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (/.f64 (-.f64 z x) t)) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 y (/.f64 (-.f64 z x) t)) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 y (/.f64 (-.f64 z x) t)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (/.f64 (-.f64 z x) t)) 2) (*.f64 x x)) (-.f64 (*.f64 y (/.f64 (-.f64 z x) t)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (exp.f64 (*.f64 y (/.f64 (-.f64 z x) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 y (/.f64 (-.f64 z x) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (/.f64 (-.f64 z x) t))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 y (/.f64 (-.f64 z x) t) x)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) t) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (sqrt.f64 (/.f64 x t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 z x) t) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (sqrt.f64 t))) (/.f64 (sqrt.f64 x) (sqrt.f64 t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 z t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) x))) (fma.f64 (neg.f64 (/.f64 1 t)) x (*.f64 (/.f64 1 t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x t) 1))) (fma.f64 (neg.f64 (/.f64 x t)) 1 (*.f64 (/.f64 x t) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (cbrt.f64 (/.f64 x t)) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (cbrt.f64 x) (cbrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 z (/.f64 1 t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (/.f64 z t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 z x) t))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (-.f64 z x) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 z x) t)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (-.f64 z x) t)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 z t) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (-.f64 z x) t))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 z x) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 z x) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 z x)) 2) (*.f64 (cbrt.f64 (-.f64 z x)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) 2) (cbrt.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 z x)) (*.f64 (sqrt.f64 (-.f64 z x)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 z x) t)) (sqrt.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 z x)) (/.f64 1 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (-.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 z x)) 2) 1) (/.f64 (cbrt.f64 (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 z x)) 1) (/.f64 (sqrt.f64 (-.f64 z x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 (-.f64 z x) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 z x)) 2) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 z x)) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 (-.f64 z x)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 t -1/2) (/.f64 (-.f64 z x) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 z x)) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 (-.f64 z x)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 z x) t) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 z x) t) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 z x) t)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 z x) t)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 t (-.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (-.f64 z x) 3) (pow.f64 t 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 t (-.f64 z x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 z x) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 z x) t))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 z x) t) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 z x) 3) (pow.f64 t 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 z x) t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 z x) t)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (-.f64 z x) t) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (-.f64 z x) t))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (-.f64 z x) t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 t (-.f64 z x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (-.f64 z x) t)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (/.f64 1 t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 z t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 z t)) (sqrt.f64 (/.f64 z t)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 t -1/2) (/.f64 z (sqrt.f64 t)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) t) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 t)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 t)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 z) (sqrt.f64 t)) (neg.f64 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (/.f64 (sqrt.f64 z) (sqrt.f64 t)) (neg.f64 (/.f64 x t)))))))"]],"rules":[["egg-rr",180],["egg-rr",34]],"stop":[["node limit",1]],"time":65.04296875,"type":"rewrite"},{"count":[[286,236]],"egraph":[[12,3551,636,0.06000075099999999],[11,3551,636,0.05260837599999999],[10,3543,636,0.04516258399999999],[9,3516,636,0.03896241699999999],[8,3417,636,0.032394166999999995],[7,3201,636,0.026014708999999997],[6,2248,636,0.018344291999999998],[5,1201,636,0.010668041999999999],[4,627,636,0.005081875],[3,298,636,0.002307833],[2,167,690,0.001137875],[1,84,807,0.0005380000000000001],[0,36,810,0.000200875]],"inputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(/.f64 (*.f64 y (-.f64 z x)) t)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(*.f64 (-.f64 z x) (/.f64 y t))","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 y (-.f64 (/.f64 z t) (/.f64 x t))) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(*.f64 (-.f64 z x) (/.f64 y t))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(*.f64 x (-.f64 1 (/.f64 y t)))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(/.f64 y (/.f64 t z))","(*.f64 (/.f64 y t) z)","(*.f64 y (/.f64 z t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(/.f64 y (/.f64 t z))","(*.f64 (/.f64 y t) z)","(*.f64 y (/.f64 z t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y z) t)","(/.f64 y (/.f64 t z))","(*.f64 (/.f64 y t) z)","(*.f64 y (/.f64 z t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(*.f64 x (-.f64 1 (/.f64 y t)))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(*.f64 x (-.f64 1 (/.f64 y t)))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(/.f64 (*.f64 y (-.f64 z x)) t)","(*.f64 y (-.f64 (/.f64 z t) (/.f64 x t)))","(*.f64 (-.f64 z x) (/.f64 y t))","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","x","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y (-.f64 z x)) t) x)","(fma.f64 y (-.f64 (/.f64 z t) (/.f64 x t)) x)","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t)))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)"]],"stop":[["saturated",1]],"time":90.1220703125,"type":"simplify"},{"compiler":[[7009,2534]],"time":52.121826171875,"type":"eval"},{"alts":[["(*.f64 (-.f64 z x) (/.f64 y t))","fresh",33.31137809790704],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","next",5.974415997482109],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (/.f64 x t))) x)","fresh",5.982598565861201],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","fresh",7.848311775813497],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","done",5.814553448639899]],"compiler":[[11,7],[20,12],[22,12],[19,12],[12,7],[11,7],[20,12],[22,12],[19,12]],"count":[[238,5]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[236,4],"picked":[1,1]}],"min-error":[0.0078125],"time":71.826171875,"type":"prune"},{"compiler":[[55,18]],"locations":[["(/.f64 z (cbrt.f64 t))",0.21484375,true],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))",0.359375,true],["(pow.f64 (cbrt.f64 t) -2)",0.5159950683790941,true],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)",5.506110983451574,true]],"time":11.60986328125,"type":"localize"},{"count":[[4,72]],"series":[["(/.f64 z (cbrt.f64 t))","t","-inf",0.383056640625],["(/.f64 z (cbrt.f64 t))","t","inf",0.283935546875],["(/.f64 z (cbrt.f64 t))","t","0",0.27490234375],["(/.f64 z (cbrt.f64 t))","z","-inf",0.2080078125],["(/.f64 z (cbrt.f64 t))","z","inf",0.2890625],["(/.f64 z (cbrt.f64 t))","z","0",1.670166015625],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","x","-inf",0.154052734375],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","x","inf",0.156982421875],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","x","0",0.190185546875],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","z","-inf",0.166015625],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","z","inf",0.192138671875],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","z","0",0.173095703125],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","t","-inf",0.596923828125],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","t","inf",0.531005859375],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","t","0",0.47900390625],["(pow.f64 (cbrt.f64 t) -2)","t","-inf",0.4169921875],["(pow.f64 (cbrt.f64 t) -2)","t","inf",0.317138671875],["(pow.f64 (cbrt.f64 t) -2)","t","0",0.364013671875],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","x","-inf",1.720947265625],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","x","inf",0.39599609375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","x","0",1.2060546875],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","z","-inf",0.48095703125],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","z","inf",0.45703125],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","z","0",1.297119140625],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","t","-inf",2.446044921875],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","t","inf",0.718994140625],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","t","0",1.64990234375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","y","-inf",0.2841796875],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","y","inf",0.240966796875],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","y","0",2.76611328125]],"time":20.908935546875,"type":"series"},{"count":[[4,310]],"egraph":[[2,3611,52,0.027136042],[1,278,52,0.005045292],[0,13,56,0.000330084]],"inputs":[["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","(pow.f64 (cbrt.f64 t) -2)","(fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t)))","(/.f64 z (cbrt.f64 t))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)) (pow.f64 (cbrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)) 2) (cbrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)) (sqrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 2) (*.f64 x x)) (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (exp.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) -2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 t) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 t) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 t) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 1 (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2) -2) (pow.f64 (cbrt.f64 (cbrt.f64 t)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 t 1/6) -2) (pow.f64 (pow.f64 t 1/6) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (cbrt.f64 t) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 t) -4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (pow.f64 (cbrt.f64 t) -2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 t) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2/3 (log.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2/3 (log.f64 t)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x t) (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (neg.f64 (pow.f64 t -1)) x (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 -1 (/.f64 x t) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 1 (/.f64 x t) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (/.f64 x t) 1 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (cbrt.f64 (/.f64 x t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (sqrt.f64 (/.f64 x t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (/.f64 x t)))) (sqrt.f64 (/.f64 x t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (neg.f64 x) (pow.f64 t -1) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (/.f64 x t) -1 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (neg.f64 (sqrt.f64 (/.f64 x t))) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) 1) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (pow.f64 t -1)) x))) (fma.f64 (neg.f64 (neg.f64 (pow.f64 t -1))) x (*.f64 (neg.f64 (pow.f64 t -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2)))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1))) (pow.f64 (cbrt.f64 x) 2) (*.f64 (*.f64 (cbrt.f64 x) (pow.f64 t -1)) (pow.f64 (cbrt.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (pow.f64 t -1)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 t -1)) (neg.f64 x) (*.f64 (pow.f64 t -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x)))) (fma.f64 (neg.f64 (pow.f64 (neg.f64 t) -1)) (neg.f64 x) (*.f64 (pow.f64 (neg.f64 t) -1) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (pow.f64 (cbrt.f64 x) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 t) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (/.f64 1 (sqrt.f64 t)) (*.f64 (/.f64 x (sqrt.f64 t)) (/.f64 1 (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (pow.f64 (cbrt.f64 x) 2) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) 2) (cbrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) 0) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 2) (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) 3) (pow.f64 (/.f64 x t) 3)) (+.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) 2) (-.f64 (pow.f64 (/.f64 x t) 2) (*.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))) 2) (pow.f64 (/.f64 x t) 2)) (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (exp.f64 (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (+.f64 1 (expm1.f64 (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 x t)) (exp.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 x t))) (exp.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)))) (+.f64 1 (expm1.f64 (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (/.f64 x t))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 z (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 z (cbrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 1 (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 z (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2) (cbrt.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) 2) (*.f64 (cbrt.f64 z) (/.f64 1 (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 z (cbrt.f64 t))) (sqrt.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (/.f64 1 (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 1 (neg.f64 (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 t)) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) 1) (/.f64 (cbrt.f64 z) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (/.f64 z (cbrt.f64 (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (cbrt.f64 t)) 2)) (/.f64 (sqrt.f64 z) (cbrt.f64 (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 t 1/6)) (/.f64 z (pow.f64 t 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 z) 2) (pow.f64 t 1/6)) (/.f64 (cbrt.f64 z) (pow.f64 t 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (cbrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 z (cbrt.f64 t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 t) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 z 3) t) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cbrt.f64 t) z) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z (neg.f64 (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 z (cbrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 z 3) t))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (cbrt.f64 t))) 1))))))"]],"rules":[["egg-rr",39],["egg-rr",221],["egg-rr",20],["egg-rr",30]],"stop":[["node limit",1]],"time":86.630126953125,"type":"rewrite"},{"count":[[382,332]],"egraph":[[10,7721,633,0.064960041],[9,6303,633,0.055855625],[8,5763,633,0.0436605],[7,4230,633,0.033297],[6,3022,633,0.022729],[5,1826,687,0.013657375],[4,820,687,0.007047291000000001],[3,390,741,0.002989125],[2,222,774,0.001442208],[1,103,774,0.000677291],[0,38,936,0.000251333]],"inputs":[["x","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y)","(*.f64 (/.f64 y t) (-.f64 z x))","(*.f64 (/.f64 (-.f64 z x) t) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y)","(*.f64 (/.f64 y t) (-.f64 z x))","(*.f64 (/.f64 (-.f64 z x) t) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (/.f64 x (/.f64 t y)))","(-.f64 x (*.f64 (/.f64 x t) y))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(*.f64 1 (/.f64 (*.f64 z y) t))","(/.f64 z (/.f64 t y))","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(*.f64 1 (/.f64 (*.f64 z y) t))","(/.f64 z (/.f64 t y))","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(*.f64 1 (/.f64 (*.f64 z y) t))","(/.f64 z (/.f64 t y))","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (/.f64 x (/.f64 t y)))","(-.f64 x (*.f64 (/.f64 x t) y))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (/.f64 x (/.f64 t y)))","(-.f64 x (*.f64 (/.f64 x t) y))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(*.f64 1 (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(*.f64 1 (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(*.f64 1 (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))"]],"stop":[["node limit",1]],"time":98.0458984375,"type":"simplify"},{"compiler":[[12400,4980]],"time":98.003173828125,"type":"eval"},{"alts":[["(*.f64 (-.f64 z x) (/.f64 y t))","fresh",33.31137809790704],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","done",5.974415997482109],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","fresh",7.848311775813497],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","done",5.814553448639899],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","next",5.90668220840834]],"compiler":[[11,7],[20,12],[19,12],[12,7],[22,15],[11,7],[19,12],[22,15]],"count":[[337,5]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[332,1],"picked":[1,1]}],"min-error":[0.0078125],"time":129.260986328125,"type":"prune"},{"compiler":[[69,35]],"locations":[["(*.f64 z (cbrt.f64 (/.f64 1 t)))",0.2421875,true],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))",0.359375,true],["(pow.f64 (cbrt.f64 t) -2)",0.5159950683790941,false],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)",5.506110983451574,true]],"time":16.660888671875,"type":"localize"},{"count":[[3,72]],"series":[["(*.f64 z (cbrt.f64 (/.f64 1 t)))","t","-inf",0.839111328125],["(*.f64 z (cbrt.f64 (/.f64 1 t)))","t","inf",0.18017578125],["(*.f64 z (cbrt.f64 (/.f64 1 t)))","t","0",0.2060546875],["(*.f64 z (cbrt.f64 (/.f64 1 t)))","z","-inf",0.176025390625],["(*.f64 z (cbrt.f64 (/.f64 1 t)))","z","inf",0.18115234375],["(*.f64 z (cbrt.f64 (/.f64 1 t)))","z","0",0.7431640625],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","x","-inf",0.158935546875],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","x","inf",0.182861328125],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","x","0",0.156005859375],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","z","-inf",0.18603515625],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","z","inf",0.157958984375],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","z","0",0.161865234375],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","t","-inf",0.657958984375],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","t","inf",0.287109375],["(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","t","0",0.31396484375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","x","-inf",0.259033203125],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","x","inf",0.255126953125],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","x","0",0.65087890625],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","z","-inf",0.31787109375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","z","inf",0.365966796875],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","z","0",0.65185546875],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","t","-inf",1.288818359375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","t","inf",0.39599609375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","t","0",0.359130859375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","y","-inf",0.255859375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","y","inf",0.232177734375],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","y","0",0.774169921875]],"time":10.751953125,"type":"series"},{"count":[[3,310]],"egraph":[[2,3920,32,0.028574000000000002],[1,325,36,0.005445125],[0,16,59,0.000387417]],"inputs":[["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","(fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t)))","(*.f64 z (cbrt.f64 (/.f64 1 t)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)) (pow.f64 (cbrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)) 2) (cbrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)) (sqrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))) 2) (-.f64 (*.f64 x x) (*.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))) 2) (*.f64 x x)) (-.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (exp.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 y (fma.f64 (/.f64 1 t) z (/.f64 x t)) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 x t) (*.f64 (/.f64 1 t) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (/.f64 x t) 1 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (neg.f64 x) (/.f64 1 t) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (neg.f64 (/.f64 1 t)) x (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 -1 (/.f64 x t) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 1 (/.f64 x t) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (cbrt.f64 (/.f64 x t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (sqrt.f64 (/.f64 x t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (neg.f64 (neg.f64 (sqrt.f64 (/.f64 x t)))) (sqrt.f64 (/.f64 x t)) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (/.f64 x t) -1 (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (neg.f64 (sqrt.f64 (/.f64 x t))) (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 1 t) z (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 t) z) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 1 t) z) 1) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2)))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 t))) (pow.f64 (cbrt.f64 t) -2) (*.f64 (/.f64 x (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (/.f64 1 t)) x))) (fma.f64 (neg.f64 (neg.f64 (/.f64 1 t))) x (*.f64 (neg.f64 (/.f64 1 t)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x))))) (fma.f64 (neg.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t))) (cbrt.f64 (*.f64 x x)) (*.f64 (*.f64 (cbrt.f64 x) (/.f64 1 t)) (cbrt.f64 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))) (fma.f64 (neg.f64 (neg.f64 (cbrt.f64 (/.f64 x t)))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2) (*.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x)))) (fma.f64 (neg.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t))) (sqrt.f64 x) (*.f64 (*.f64 (sqrt.f64 x) (/.f64 1 t)) (sqrt.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2)))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 t))) (pow.f64 t -1/2) (*.f64 (/.f64 x (sqrt.f64 t)) (pow.f64 t -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 t) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 t)) (neg.f64 x) (*.f64 (/.f64 1 t) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x)))) (fma.f64 (neg.f64 (/.f64 1 (neg.f64 t))) (neg.f64 x) (*.f64 (/.f64 1 (neg.f64 t)) (neg.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) t)) (/.f64 (cbrt.f64 (*.f64 x x)) 1) (*.f64 (/.f64 (cbrt.f64 x) t) (/.f64 (cbrt.f64 (*.f64 x x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) t)) (/.f64 (sqrt.f64 x) 1) (*.f64 (/.f64 (sqrt.f64 x) t) (/.f64 (sqrt.f64 x) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))) (*.f64 (cbrt.f64 (/.f64 x t)) (/.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t))) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))) (*.f64 (/.f64 (sqrt.f64 x) (cbrt.f64 t)) (/.f64 (sqrt.f64 x) (cbrt.f64 (*.f64 t t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t))) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)) (*.f64 (/.f64 (cbrt.f64 x) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 x x)) (sqrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x t))) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)) (*.f64 (cbrt.f64 (/.f64 x t)) (*.f64 -1 (pow.f64 (cbrt.f64 (/.f64 x t)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t)))))) (fma.f64 (neg.f64 (sqrt.f64 (/.f64 x t))) (*.f64 -1 (sqrt.f64 (/.f64 x t))) (*.f64 (sqrt.f64 (/.f64 x t)) (*.f64 -1 (sqrt.f64 (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2))))) (fma.f64 (neg.f64 (/.f64 1 (cbrt.f64 t))) (*.f64 x (pow.f64 (cbrt.f64 t) -2)) (*.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 x (pow.f64 (cbrt.f64 t) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (*.f64 (/.f64 1 t) z) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 t) z (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 1 (cbrt.f64 t)) (*.f64 (/.f64 1 (cbrt.f64 t)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (/.f64 z (cbrt.f64 t)) (pow.f64 (cbrt.f64 t) -2) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -4)) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 t) -2)) (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 1 t) z)) 2) (cbrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (*.f64 (/.f64 1 t) z)) (sqrt.f64 (*.f64 (/.f64 1 t) z)) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (*.f64 (/.f64 1 (cbrt.f64 t)) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) z) (/.f64 1 (cbrt.f64 t)) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 2)) (cbrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (*.f64 (pow.f64 (cbrt.f64 t) -2) (sqrt.f64 (/.f64 z (cbrt.f64 t)))) (sqrt.f64 (/.f64 z (cbrt.f64 t))) (neg.f64 (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2))))) (fma.f64 (neg.f64 (pow.f64 t -1/2)) (*.f64 x (pow.f64 t -1/2)) (*.f64 (pow.f64 t -1/2) (*.f64 x (pow.f64 t -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (/.f64 1 t) z) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (/.f64 1 t) z 0) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 1 t) z (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) 2)) (cbrt.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))) (sqrt.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 1 t) z) 3) (pow.f64 (/.f64 x t) 3)) (+.f64 (pow.f64 (*.f64 (/.f64 1 t) z) 2) (-.f64 (pow.f64 (/.f64 x t) 2) (*.f64 (*.f64 (/.f64 1 t) z) (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (/.f64 1 t) z) 2) (pow.f64 (/.f64 x t) 2)) (fma.f64 (/.f64 1 t) z (/.f64 x t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (/.f64 1 t) z)) (exp.f64 (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 (/.f64 1 t) z)) (+.f64 1 (expm1.f64 (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 x t)) (exp.f64 (*.f64 (/.f64 1 t) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 x t))) (exp.f64 (*.f64 (/.f64 1 t) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 1 t) z)) (+.f64 1 (expm1.f64 (/.f64 x t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 1 t) z (/.f64 x t))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 z (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 z (cbrt.f64 t)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (cbrt.f64 t))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (cbrt.f64 t)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 z (cbrt.f64 t))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 z (cbrt.f64 t))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 z 3) (/.f64 1 t)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 t) (pow.f64 z 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 z (cbrt.f64 t)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 z (cbrt.f64 t)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 z 3) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (/.f64 1 t) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 z (cbrt.f64 t))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 z (cbrt.f64 t))) 1))))))"]],"rules":[["egg-rr",21],["egg-rr",260],["egg-rr",29]],"stop":[["node limit",1]],"time":87.125,"type":"rewrite"},{"count":[[382,332]],"egraph":[[10,7721,633,0.064690833],[9,6303,633,0.055644208],[8,5763,633,0.043532083],[7,4230,633,0.033251333],[6,3022,633,0.022649124],[5,1826,687,0.013629708],[4,820,687,0.007083249],[3,390,741,0.003048583],[2,222,774,0.001497833],[1,103,774,0.000715125],[0,38,936,0.000288583]],"inputs":[["x","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 -1 (/.f64 x t))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y)","(*.f64 (/.f64 y t) (-.f64 z x))","(*.f64 (/.f64 (-.f64 z x) t) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y)","(*.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y)","(*.f64 (/.f64 y t) (-.f64 z x))","(*.f64 (/.f64 (-.f64 z x) t) y)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (-.f64 (*.f64 (pow.f64 1 1/3) (/.f64 z t)) (/.f64 x t)) y) x)","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (/.f64 x (/.f64 t y)))","(-.f64 x (*.f64 (/.f64 x t) y))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(*.f64 1 (/.f64 (*.f64 z y) t))","(/.f64 z (/.f64 t y))","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(*.f64 1 (/.f64 (*.f64 z y) t))","(/.f64 z (/.f64 t y))","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t))","(*.f64 1 (/.f64 (*.f64 z y) t))","(/.f64 z (/.f64 t y))","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (/.f64 x (/.f64 t y)))","(-.f64 x (*.f64 (/.f64 x t) y))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (/.f64 x (/.f64 t y)))","(-.f64 x (*.f64 (/.f64 x t) y))","(-.f64 x (*.f64 x (/.f64 y t)))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y z) t)))","(fma.f64 (-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(*.f64 1 (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(*.f64 1 (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 1 1/3) (/.f64 z t))","(*.f64 1 (/.f64 z t))","(/.f64 z t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 -1 (/.f64 x t))","(neg.f64 (/.f64 x t))","(/.f64 (neg.f64 x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(+.f64 (*.f64 -1 (/.f64 x t)) (*.f64 (pow.f64 1 1/3) (/.f64 z t)))","(-.f64 (*.f64 1 (/.f64 z t)) (/.f64 x t))","(-.f64 (/.f64 z t) (/.f64 x t))","(/.f64 (-.f64 z x) t)","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))","(*.f64 (pow.f64 (/.f64 1 t) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 t)))"]],"stop":[["node limit",1]],"time":98.4189453125,"type":"simplify"},{"compiler":[[13131,5190]],"time":95.7890625,"type":"eval"},{"alts":[["(*.f64 (-.f64 z x) (/.f64 y t))","fresh",33.31137809790704],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","done",5.974415997482109],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","next",7.848311775813497],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","done",5.814553448639899],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","done",5.90668220840834]],"compiler":[[11,7],[20,12],[19,12],[12,7],[22,15],[11,7],[19,12]],"count":[[357,5]],"kept":[{"done":[2,2],"fresh":[2,2],"new":[352,0],"picked":[1,1]}],"min-error":[0.0078125],"time":141.337158203125,"type":"prune"},{"compiler":[[56,18]],"locations":[["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))",0.0078125,true],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))",0.01171875,true],["(/.f64 (*.f64 y x) t)",6.2401444680598255,true],["(/.f64 (*.f64 y z) t)",6.416485468803288,true]],"time":9.552001953125,"type":"localize"},{"count":[[4,72]],"series":[["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","t","-inf",0.155029296875],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","t","inf",0.14501953125],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","t","0",0.178955078125],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","y","-inf",0.166015625],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","y","inf",0.177978515625],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","y","0",0.156982421875],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","x","-inf",0.156982421875],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","x","inf",0.219970703125],["(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","x","0",0.194091796875],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","x","-inf",0.2119140625],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","x","inf",0.196044921875],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","x","0",0.337158203125],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","t","-inf",0.224853515625],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","t","inf",0.18798828125],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","t","0",0.281982421875],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","z","-inf",0.173828125],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","z","inf",0.203125],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","z","0",0.39306640625],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","y","-inf",0.217041015625],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","y","inf",0.223876953125],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","y","0",0.218017578125],["(/.f64 (*.f64 y x) t)","t","-inf",0.304931640625],["(/.f64 (*.f64 y x) t)","t","inf",0.348876953125],["(/.f64 (*.f64 y x) t)","t","0",0.3779296875],["(/.f64 (*.f64 y x) t)","x","-inf",0.216064453125],["(/.f64 (*.f64 y x) t)","x","inf",0.2939453125],["(/.f64 (*.f64 y x) t)","x","0",0.2998046875],["(/.f64 (*.f64 y x) t)","y","-inf",0.31103515625],["(/.f64 (*.f64 y x) t)","y","inf",0.267822265625],["(/.f64 (*.f64 y x) t)","y","0",0.410888671875],["(/.f64 (*.f64 y z) t)","t","-inf",0.286865234375],["(/.f64 (*.f64 y z) t)","t","inf",0.35498046875],["(/.f64 (*.f64 y z) t)","t","0",0.39990234375],["(/.f64 (*.f64 y z) t)","z","-inf",0.29296875],["(/.f64 (*.f64 y z) t)","z","inf",0.35595703125],["(/.f64 (*.f64 y z) t)","z","0",0.406005859375],["(/.f64 (*.f64 y z) t)","y","-inf",0.298828125],["(/.f64 (*.f64 y z) t)","y","inf",0.409912109375],["(/.f64 (*.f64 y z) t)","y","0",0.533203125]],"time":11.0087890625,"type":"series"},{"count":[[4,366]],"egraph":[[2,4768,37,0.033351458],[1,291,43,0.005830333],[0,13,47,0.000304458]],"inputs":[["(/.f64 (*.f64 y z) t)","(/.f64 (*.f64 y x) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 y t) z))) (cbrt.f64 (exp.f64 (*.f64 (/.f64 y t) z))))) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 y t) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 y t) z)))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 y t) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 y t) z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (/.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 z (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 y (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y z) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y t) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 y t) z)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2)) (cbrt.f64 (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (*.f64 (cbrt.f64 (*.f64 y z)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 y t) z)) (sqrt.f64 (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (sqrt.f64 (*.f64 y z)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (neg.f64 z)) (/.f64 1 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y 1) (/.f64 z t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y t) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 (cbrt.f64 t) 2)) (/.f64 z (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y z) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 t)) (/.f64 z (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 t)) (/.f64 (*.f64 y z) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z 1) (/.f64 y t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) 1) (/.f64 (cbrt.f64 (*.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y z)) 1) (/.f64 (sqrt.f64 (*.f64 y z)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (pow.f64 (cbrt.f64 t) 2)) (/.f64 y (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 (*.f64 y z)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (sqrt.f64 t)) (/.f64 y (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 y z)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y t) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 y t) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 y t) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 y t) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 t (*.f64 y z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y z) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) z))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 y t) z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (*.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (exp.f64 (*.f64 (/.f64 y t) x))))) (log.f64 (cbrt.f64 (exp.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 y t) x)))) (log.f64 (sqrt.f64 (exp.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 y t) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (/.f64 t x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (*.f64 x (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 y (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (neg.f64 (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y x) (*.f64 (/.f64 1 t) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y t) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 y t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (cbrt.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 y t) x)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (sqrt.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (neg.f64 (sqrt.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (*.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (sqrt.f64 (*.f64 y x)) (/.f64 1 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (neg.f64 x)) (/.f64 1 t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 y (neg.f64 x)) (/.f64 1 (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 t) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sqrt.f64 (*.f64 (/.f64 y t) x))) (sqrt.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y x) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1 (sqrt.f64 t)) (/.f64 (*.f64 y x) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y 1) (/.f64 x t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 y t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y t) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 y x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y x)) 1) (/.f64 (sqrt.f64 (*.f64 y x)) t))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (pow.f64 (cbrt.f64 t) 2)) (/.f64 x (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 t) 2)) (/.f64 y (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y x) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 (*.f64 y x)) (cbrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (sqrt.f64 t)) (/.f64 x (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 t)) (/.f64 y (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 t)) (/.f64 (*.f64 y x) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 y x)) (sqrt.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2))) (cbrt.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2))) (cbrt.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (sqrt.f64 (*.f64 (/.f64 y t) x))) (sqrt.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y t) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 y t) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 y t) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 t (*.f64 y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 y x) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 y x) 3) (pow.f64 t 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 y t) x)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (/.f64 y t) z x) (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2) (-.f64 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x))) (/.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (-.f64 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))) 2) (cbrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))) (sqrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (*.f64 (/.f64 y t) z) 3) (pow.f64 (fma.f64 (/.f64 y t) x x) 3)) (/.f64 1 (fma.f64 (fma.f64 (/.f64 y t) x x) (-.f64 (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 y t) z)) (pow.f64 (*.f64 (/.f64 y t) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2) (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (/.f64 1 (-.f64 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (fma.f64 (/.f64 y t) x x) (-.f64 (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 y t) z)) (pow.f64 (*.f64 (/.f64 y t) z) 2)) (+.f64 (pow.f64 (*.f64 (/.f64 y t) z) 3) (pow.f64 (fma.f64 (/.f64 y t) x x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x)) (-.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2) (pow.f64 (fma.f64 (/.f64 y t) x x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 y t) z) 3) (pow.f64 (fma.f64 (/.f64 y t) x x) 3)) (fma.f64 (fma.f64 (/.f64 y t) x x) (-.f64 (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 y t) z)) (pow.f64 (*.f64 (/.f64 y t) z) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 y t) z) 3) (pow.f64 (fma.f64 (/.f64 y t) x x) 3)) (+.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (-.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2) (*.f64 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2) (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (-.f64 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (*.f64 (/.f64 y t) z) 3) (pow.f64 (fma.f64 (/.f64 y t) x x) 3))) (neg.f64 (fma.f64 (fma.f64 (/.f64 y t) x x) (-.f64 (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 y t) z)) (pow.f64 (*.f64 (/.f64 y t) z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2) (pow.f64 (fma.f64 (/.f64 y t) x x) 2))) (neg.f64 (-.f64 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (*.f64 (/.f64 t z) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)))) (*.f64 (/.f64 t z) (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 y z) (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (*.f64 t (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)))) (*.f64 t (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (*.f64 (/.f64 t (*.f64 y z)) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)))) (*.f64 (/.f64 t (*.f64 y z)) (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 y (neg.f64 z)) (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (*.f64 (neg.f64 t) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)))) (*.f64 (neg.f64 t) (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 t z) (pow.f64 (fma.f64 (/.f64 y t) x x) 2))) (*.f64 (/.f64 t z) (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 y z) (fma.f64 (/.f64 y t) x x) (*.f64 t (pow.f64 (fma.f64 (/.f64 y t) x x) 2))) (*.f64 t (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 t (*.f64 y z)) (pow.f64 (fma.f64 (/.f64 y t) x x) 2))) (*.f64 (/.f64 t (*.f64 y z)) (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 y (neg.f64 z)) (fma.f64 (/.f64 y t) x x) (*.f64 (neg.f64 t) (pow.f64 (fma.f64 (/.f64 y t) x x) 2))) (*.f64 (neg.f64 t) (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (/.f64 t z) (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) y)) (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (/.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (/.f64 t z) (*.f64 (fma.f64 (/.f64 y t) x x) y)) (*.f64 (fma.f64 (/.f64 y t) x x) (/.f64 t z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) t (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (*.f64 y z))) (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) t (*.f64 (fma.f64 (/.f64 y t) x x) (*.f64 y z))) (*.f64 (fma.f64 (/.f64 y t) x x) t))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (/.f64 t (*.f64 y z)) (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) 1)) (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (/.f64 t (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (/.f64 t (*.f64 y z)) (fma.f64 (/.f64 y t) x x)) (*.f64 (fma.f64 (/.f64 y t) x x) (/.f64 t (*.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (neg.f64 t) (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (*.f64 y (neg.f64 z)))) (*.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (neg.f64 t) (*.f64 (fma.f64 (/.f64 y t) x x) (*.f64 y (neg.f64 z)))) (*.f64 (fma.f64 (/.f64 y t) x x) (neg.f64 t)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 (/.f64 y t) z x) 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (fma.f64 (fma.f64 (/.f64 y t) z x) (fma.f64 (/.f64 y t) z x) (-.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2) (*.f64 (fma.f64 (/.f64 y t) z x) (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (pow.f64 (*.f64 (/.f64 y t) z) 2)) (-.f64 (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (fma.f64 (/.f64 y t) z x) (fma.f64 (/.f64 y t) z x) (pow.f64 (*.f64 (/.f64 y t) x) 2)) (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (fma.f64 (/.f64 y t) z x)) (exp.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (exp.f64 x)) (exp.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (fma.f64 (/.f64 y t) z x)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (exp.f64 x)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) z))) (exp.f64 (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (+.f64 1 (expm1.f64 (fma.f64 (/.f64 y t) x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) z))) (+.f64 1 (expm1.f64 (fma.f64 (/.f64 y t) x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (/.f64 (exp.f64 x) (exp.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) z))) (/.f64 (exp.f64 x) (exp.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) x)) (exp.f64 (fma.f64 (/.f64 y t) z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x))) (exp.f64 (fma.f64 (/.f64 y t) z x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) x)) (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x))) (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (exp.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 y t) x x))) (exp.f64 (*.f64 (/.f64 y t) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (exp.f64 (*.f64 (/.f64 y t) x))) (exp.f64 (*.f64 (/.f64 y t) z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 (/.f64 y t) x x)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 y t) x x))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 (exp.f64 x) (exp.f64 (*.f64 (/.f64 y t) x))) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (exp.f64 x)) (exp.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 (/.f64 y t) z x)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) z)) (exp.f64 x)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 (/.f64 t x)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 (/.f64 t z)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 x (/.f64 1 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 z (/.f64 1 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 y (/.f64 1 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y z) (/.f64 1 t) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y t) z) 1 (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (fma.f64 (/.f64 y t) x (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y (/.f64 1 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (/.f64 1 t) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (neg.f64 (/.f64 1 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (*.f64 (/.f64 1 t) -1) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (/.f64 y t) x) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y t) x) -1 (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y t) x) 1 (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y t) x x) 1 (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 y t) z) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (fma.f64 (/.f64 y t) x (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 y t) x) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y t) x x) (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y t) z x) (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (cbrt.f64 (*.f64 (/.f64 y t) x)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) (/.f64 1 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y t) x x)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (cbrt.f64 (fma.f64 (/.f64 y t) x x)) (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 y t) x)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 y t) z)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) z) 2)) (cbrt.f64 (*.f64 (/.f64 y t) z)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (fma.f64 (/.f64 y t) x (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (fma.f64 (/.f64 y t) x (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (*.f64 (cbrt.f64 (*.f64 y z)) (/.f64 1 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (sqrt.f64 (*.f64 (/.f64 y t) x)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (neg.f64 (sqrt.f64 (*.f64 (/.f64 y t) x))) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (*.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) -1) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (sqrt.f64 (*.f64 y x)) (/.f64 1 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 y t) x x)) (sqrt.f64 (fma.f64 (/.f64 y t) x x)) (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 y t) z)) (sqrt.f64 (*.f64 (/.f64 y t) z)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (fma.f64 (/.f64 y t) x (*.f64 (/.f64 y t) z)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y z)) (*.f64 (sqrt.f64 (*.f64 y z)) (/.f64 1 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (neg.f64 x)) (/.f64 1 t) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (neg.f64 x)) (/.f64 1 (neg.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (neg.f64 z)) (/.f64 1 (neg.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (/.f64 1 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))) (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 t) (*.f64 y z) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 t) (*.f64 y x) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (/.f64 1 (fma.f64 (/.f64 y t) x x)) (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y t) z x) 1 (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (cbrt.f64 (fma.f64 (/.f64 y t) z x)) (cbrt.f64 (fma.f64 (/.f64 y t) z x))) (cbrt.f64 (fma.f64 (/.f64 y t) z x)) (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 y t) z x)) (sqrt.f64 (fma.f64 (/.f64 y t) z x)) (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 (/.f64 y t) x))) (sqrt.f64 (*.f64 (/.f64 y t) x)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y x) (cbrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (sqrt.f64 t)) (/.f64 (*.f64 y x) (sqrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y 1) (/.f64 x t) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y 1) (/.f64 z t) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 y t) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y t) z (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y t) x (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 y x)) t) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 y x)) 1) (/.f64 (sqrt.f64 (*.f64 y x)) t) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (pow.f64 (cbrt.f64 t) 2)) (/.f64 x (cbrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (pow.f64 (cbrt.f64 t) 2)) (/.f64 z (cbrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 t) 2)) (/.f64 y (cbrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y x) (cbrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y z) (cbrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 (*.f64 (/.f64 y t) x)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 (*.f64 y x)) (cbrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (sqrt.f64 t)) (/.f64 x (sqrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (sqrt.f64 t)) (/.f64 z (sqrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 t)) (/.f64 y (sqrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 t)) (/.f64 (*.f64 y x) (sqrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 t)) (/.f64 (*.f64 y z) (sqrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 y x)) (sqrt.f64 t)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z 1) (/.f64 y t) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) 1) (/.f64 (cbrt.f64 (*.f64 y z)) t) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 y z)) 1) (/.f64 (sqrt.f64 (*.f64 y z)) t) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z (pow.f64 (cbrt.f64 t) 2)) (/.f64 y (cbrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 (*.f64 (/.f64 y t) z)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 y z)) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 (*.f64 y z)) (cbrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z (sqrt.f64 t)) (/.f64 y (sqrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (pow.f64 (*.f64 y z) 2)) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 y z)) (sqrt.f64 t)) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))) (*.f64 (/.f64 y t) z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2))) (cbrt.f64 (*.f64 (/.f64 y t) x)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2))) (cbrt.f64 (*.f64 (/.f64 y t) x)) (fma.f64 (/.f64 y t) z x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (sqrt.f64 (*.f64 (/.f64 y t) x))) (sqrt.f64 (*.f64 (/.f64 y t) x)) (fma.f64 (/.f64 y t) z x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 x (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 y t) x x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 x x) (fma.f64 (/.f64 y t) x x)) (/.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2) (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 y t) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 y t) x x)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (cbrt.f64 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 y t) x x)) (sqrt.f64 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (/.f64 1 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (/.f64 1 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))) (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 y t) x x) (pow.f64 (fma.f64 (/.f64 y t) x x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (+.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2) (fma.f64 x x (*.f64 x (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (fma.f64 (/.f64 y t) x x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (neg.f64 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3))) (neg.f64 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2) (*.f64 x x)) (-.f64 (*.f64 (/.f64 y t) x) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 y t) x x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 y t) x x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 y t) x x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 y t) x x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (exp.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (*.f64 (/.f64 y t) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (/.f64 y t) x)) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 y t) x))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 x (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 y t) x x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 y t) x x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 (/.f64 t x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (*.f64 x (/.f64 1 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 y (/.f64 1 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (/.f64 1 t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (neg.f64 (/.f64 1 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y x) (*.f64 (/.f64 1 t) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 (/.f64 y t) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y t) x) -1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (/.f64 y t) x) 1 x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y t) x x) 1 (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 y t) x x) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 (/.f64 y t) x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y t) x x) (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 y t) x x) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (cbrt.f64 (*.f64 (/.f64 y t) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (*.f64 (cbrt.f64 (*.f64 y x)) (/.f64 1 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y t) x x)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 (/.f64 y t) x x)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (cbrt.f64 (fma.f64 (/.f64 y t) x x)) (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2)) (cbrt.f64 (fma.f64 (/.f64 y t) x x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (/.f64 y t) x)) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (cbrt.f64 (*.f64 x x)) (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (cbrt.f64 x) (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (sqrt.f64 (*.f64 (/.f64 y t) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (neg.f64 (sqrt.f64 (*.f64 (/.f64 y t) x))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) (*.f64 (sqrt.f64 (*.f64 (/.f64 y t) x)) -1) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y x)) (*.f64 (sqrt.f64 (*.f64 y x)) (/.f64 1 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 y t) x x)) (sqrt.f64 (fma.f64 (/.f64 y t) x x)) (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 y t) x x)) (sqrt.f64 (fma.f64 (/.f64 y t) x x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (/.f64 y t) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (neg.f64 x)) (/.f64 1 t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (neg.f64 x)) (/.f64 1 (neg.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (/.f64 1 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))) (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 y t) x) 3)) (/.f64 1 (-.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (*.f64 x (*.f64 (/.f64 y t) x)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 t) (*.f64 y x) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (/.f64 1 (fma.f64 (/.f64 y t) x x)) (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 (/.f64 y t) x x) 2) (/.f64 1 (fma.f64 (/.f64 y t) x x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 (/.f64 y t) x))) (sqrt.f64 (*.f64 (/.f64 y t) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y x) (cbrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -1 (sqrt.f64 t)) (/.f64 (*.f64 y x) (sqrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y 1) (/.f64 x t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x 1) (/.f64 y t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y t) x x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 y x)) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 y x)) 1) (/.f64 (sqrt.f64 (*.f64 y x)) t) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (pow.f64 (cbrt.f64 t) 2)) (/.f64 x (cbrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (pow.f64 (cbrt.f64 t) 2)) (/.f64 y (cbrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (pow.f64 (cbrt.f64 t) 2)) (/.f64 (*.f64 y x) (cbrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (pow.f64 (cbrt.f64 t) 2)) (cbrt.f64 (*.f64 (/.f64 y t) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (*.f64 y x)) (pow.f64 (cbrt.f64 t) 2)) (/.f64 (sqrt.f64 (*.f64 y x)) (cbrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y (sqrt.f64 t)) (/.f64 x (sqrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x (sqrt.f64 t)) (/.f64 y (sqrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (sqrt.f64 t)) (/.f64 (*.f64 y x) (sqrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 y x)) 2) (sqrt.f64 t)) (/.f64 (cbrt.f64 (*.f64 y x)) (sqrt.f64 t)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))) (+.f64 (*.f64 (/.f64 y t) x) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 y t) x))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 y t) x))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2)) (*.f64 (/.f64 y t) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2))) (cbrt.f64 (*.f64 (/.f64 y t) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y t) x) 2))) (cbrt.f64 (*.f64 (/.f64 y t) x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -1 (sqrt.f64 (*.f64 (/.f64 y t) x))) (sqrt.f64 (*.f64 (/.f64 y t) x)) x)))))"]],"rules":[["egg-rr",104],["egg-rr",154],["egg-rr",63],["egg-rr",45]],"stop":[["node limit",1]],"time":75.989990234375,"type":"rewrite"},{"count":[[438,388]],"egraph":[[10,3912,687,0.054068627],[9,3912,687,0.046490835],[8,3907,687,0.040121627],[7,3874,687,0.033698168],[6,3402,687,0.026947835],[5,2270,687,0.01874346],[4,1195,687,0.009292668],[3,567,687,0.004080876000000001],[2,270,753,0.001819293],[1,121,795,0.000747834],[0,46,855,0.000253084]],"inputs":[["x","(+.f64 (*.f64 (+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t))) y) x)","(+.f64 (*.f64 (+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t))) y) x)","(+.f64 (*.f64 (+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t))) y) x)","(*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t)))","(+.f64 x (*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))))","(+.f64 x (*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))))","(+.f64 x (*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))))","(*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y)))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y)))","(+.f64 x (*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y)))","(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(/.f64 (*.f64 y z) t)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(/.f64 (+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x))) t)","x","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z))) t)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z))) t)) x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z))) t)) x)","(/.f64 (*.f64 y z) t)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(*.f64 -1 (/.f64 (*.f64 y x) t))","(*.f64 -1 (/.f64 (*.f64 y x) t))","(*.f64 -1 (/.f64 (*.f64 y x) t))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 (+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t))) y) x)","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t))) y) x)","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 (/.f64 z t) (*.f64 -1 (/.f64 x t))) y) x)","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t)))","(*.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y)","(*.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y)","(*.f64 (/.f64 y t) (-.f64 z x))","(*.f64 (/.f64 (-.f64 z x) t) y)","(+.f64 x (*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 x (*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 x (*.f64 y (+.f64 (*.f64 -1 (/.f64 x t)) (/.f64 z t))))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y))","(*.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y)","(*.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y)","(*.f64 (/.f64 y t) (-.f64 z x))","(*.f64 (/.f64 (-.f64 z x) t) y)","(+.f64 x (*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y)))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 x (*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y)))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 x (*.f64 -1 (*.f64 (+.f64 (/.f64 x t) (*.f64 -1 (/.f64 z t))) y)))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(/.f64 (*.f64 y z) t)","(/.f64 (*.f64 z y) t)","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(/.f64 (*.f64 y z) t)","(/.f64 (*.f64 z y) t)","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(/.f64 (+.f64 (*.f64 y z) (*.f64 -1 (*.f64 y x))) t)","(*.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y)","(*.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y)","(*.f64 (/.f64 y t) (-.f64 z x))","(*.f64 (/.f64 (-.f64 z x) t) y)","x","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","x","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z))) t)) x)","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z))) t)) x)","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 y x) (*.f64 -1 (*.f64 y z))) t)) x)","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(/.f64 (*.f64 y z) t)","(/.f64 (*.f64 z y) t)","(*.f64 (/.f64 z t) y)","(*.f64 z (/.f64 y t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(+.f64 (*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x)) (/.f64 (*.f64 y z) t))","(fma.f64 (fma.f64 -1 (/.f64 x t) (/.f64 z t)) y x)","(fma.f64 (-.f64 (/.f64 z t) (/.f64 x t)) y x)","(+.f64 x (*.f64 (/.f64 y t) (-.f64 z x)))","(fma.f64 (/.f64 y t) (-.f64 z x) x)","(fma.f64 (/.f64 (-.f64 z x) t) y x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 y t))) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 -1 (*.f64 (-.f64 (/.f64 y t) 1) x))","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(*.f64 -1 (/.f64 (*.f64 y x) t))","(/.f64 (neg.f64 (*.f64 x y)) t)","(*.f64 (/.f64 x t) (neg.f64 y))","(*.f64 x (/.f64 (neg.f64 y) t))","(*.f64 -1 (/.f64 (*.f64 y x) t))","(/.f64 (neg.f64 (*.f64 x y)) t)","(*.f64 (/.f64 x t) (neg.f64 y))","(*.f64 x (/.f64 (neg.f64 y) t))","(*.f64 -1 (/.f64 (*.f64 y x) t))","(/.f64 (neg.f64 (*.f64 x y)) t)","(*.f64 (/.f64 x t) (neg.f64 y))","(*.f64 x (/.f64 (neg.f64 y) t))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))","(+.f64 (*.f64 -1 (/.f64 (*.f64 y x) t)) x)","(fma.f64 -1 (/.f64 y (/.f64 t x)) x)","(-.f64 x (*.f64 (/.f64 y t) x))","(-.f64 x (/.f64 (*.f64 x y) t))"]],"stop":[["saturated",1]],"time":86.423095703125,"type":"simplify"},{"compiler":[[8065,2117]],"time":52.3740234375,"type":"eval"},{"alts":[["(*.f64 (-.f64 z x) (/.f64 y t))","fresh",33.31137809790704],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","done",5.974415997482109],["(+.f64 (pow.f64 (/.f64 t (*.f64 y z)) -1) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","fresh",7.867843025813497],["(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (*.f64 (/.f64 y (pow.f64 (cbrt.f64 t) 2)) (/.f64 x (cbrt.f64 t))))))","fresh",5.957401318379094],["(fma.f64 y (/.f64 (-.f64 z x) t) x)","done",5.814553448639899],["(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","done",5.90668220840834]],"compiler":[[11,7],[20,12],[21,14],[25,16],[12,7],[22,15]],"count":[[393,6]],"kept":[{"done":[3,3],"fresh":[1,1],"new":[388,2],"picked":[1,0]}],"min-error":[0],"time":173.7919921875,"type":"prune"},{"accuracy":[0.6100305258134963],"baseline":[5.814553448639899],"branch":[["x",3.396118766923208,3],["y",1.8168976764923639,3],["z",4.409862548842209,2],["t",2.0573964744533946,3],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))",0.6100305258134963,3]],"compiler":[[5,4],[5,4],[5,4],[5,4],[13,8],[133,58]],"count":[[9,3]],"inputs":[["(+.f64 (pow.f64 (/.f64 t (*.f64 y z)) -1) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (*.f64 (/.f64 y (pow.f64 (cbrt.f64 t) 2)) (/.f64 x (cbrt.f64 t))))))","(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (*.f64 z (cbrt.f64 (/.f64 1 t))) (neg.f64 (/.f64 x t))) x)","(*.f64 (-.f64 z x) (/.f64 y t))","(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 t) -2) (/.f64 z (cbrt.f64 t)) (neg.f64 (/.f64 x t))) x)","(fma.f64 y (fma.f64 (pow.f64 (cbrt.f64 (/.f64 z t)) 2) (cbrt.f64 (/.f64 z t)) (neg.f64 (/.f64 x t))) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))"]],"link":["."],"name":["Optimisation.CirclePacking:place from circle-packing-0.1.0.4, D"],"oracle":[43.697291484574],"outputs":[["(fma.f64 y (/.f64 (-.f64 z x) t) x)","(+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t))))","(fma.f64 y (/.f64 (-.f64 z x) t) x)"]],"time":66.300048828125,"times":[["x",12.243896484375],["y",15.9609375],["z",8.36181640625],["t",16.18505859375],["(+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t))",11.18310546875]],"type":"regimes"},{"bstep":[[6.551052550498923e+299,3.791811002855182e+303,0.031005859375],[-1.4362120301307458e+301,-2.6564176188581826e+300,0.10595703125]],"compiler":[[7,6],[13,8]],"method":["left-value","left-value"],"time":0.244873046875,"type":"bsearch"},{"compiler":[[57,22]],"egraph":[[6,64,77,0.00046241800000000003],[5,63,77,0.000387209],[4,60,77,0.00031],[3,54,77,0.0002325],[2,44,77,0.000155584],[1,36,77,9.4667e-5],[0,26,79,4.475e-5]],"inputs":[["(if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) -10000000000000000525047602552044202487044685811081591549158541155118024579889081957863713750804478640437044438328838781769425232353604305756447921847867069828483872009265758037378302337947880900593689532349707999450811190389676408800746527427801424945792587888200568428381156694721963868654594005401600) (fma.f64 y (/.f64 (-.f64 z x) t) x) (if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) 1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))) (fma.f64 y (/.f64 (-.f64 z x) t) x)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) -10000000000000000525047602552044202487044685811081591549158541155118024579889081957863713750804478640437044438328838781769425232353604305756447921847867069828483872009265758037378302337947880900593689532349707999450811190389676408800746527427801424945792587888200568428381156694721963868654594005401600) (fma.f64 y (/.f64 (-.f64 z x) t) x) (if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) 1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (*.f64 -1 (/.f64 (*.f64 y x) t)))) (fma.f64 y (/.f64 (-.f64 z x) t) x)))","(if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) -10000000000000000525047602552044202487044685811081591549158541155118024579889081957863713750804478640437044438328838781769425232353604305756447921847867069828483872009265758037378302337947880900593689532349707999450811190389676408800746527427801424945792587888200568428381156694721963868654594005401600) (fma.f64 y (/.f64 (-.f64 z x) t) x) (if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) 1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (+.f64 (/.f64 (*.f64 y z) t) (+.f64 x (neg.f64 (/.f64 (*.f64 x y) t)))) (fma.f64 y (/.f64 (-.f64 z x) t) x)))","(if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) -10000000000000000525047602552044202487044685811081591549158541155118024579889081957863713750804478640437044438328838781769425232353604305756447921847867069828483872009265758037378302337947880900593689532349707999450811190389676408800746527427801424945792587888200568428381156694721963868654594005401600) (fma.f64 y (/.f64 (-.f64 z x) t) x) (if (<=.f64 (+.f64 x (/.f64 (*.f64 y (-.f64 z x)) t)) 1000000000000000052504760255204420248704468581108159154915854115511802457988908195786371375080447864043704443832883878176942523235360430575644792184786706982848387200926575803737830233794788090059368953234970799945081119038967640880074652742780142494579258788820056842838115669472196386865459400540160) (+.f64 (/.f64 (*.f64 y z) t) (-.f64 x (/.f64 (*.f64 x y) t))) (fma.f64 y (/.f64 (-.f64 z x) t) x)))"]],"stop":[["fuel",1],["saturated",1]],"time":10.341064453125,"type":"simplify"},{"time":0.01904296875,"type":"soundness"},{"compiler":[[57,22]],"remove-preprocessing":[[]],"time":12.89990234375,"type":"end"}]
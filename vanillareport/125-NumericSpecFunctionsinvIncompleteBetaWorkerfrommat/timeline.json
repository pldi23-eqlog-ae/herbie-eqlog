[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.7496337890625,0.0009760856628417969,0.2493901252746582],[11,0.7496337890625,0.0019521713256835938,0.2484140396118164],[10,0.7496337890625,0.0039043426513671875,0.2464618682861328],[9,0.7496337890625,0.007808685302734375,0.24255752563476563],[8,0.7496337890625,0.01561737060546875,0.23474884033203125],[7,0.7496337890625,0.0312347412109375,0.2191314697265625],[6,0.7496337890625,0.062469482421875,0.187896728515625],[5,0.7496337890625,0.12493896484375,0.12542724609375],[4,0.7496337890625,0.2498779296875,0.00048828125],[3,0.499755859375,0.499755859375,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":1.52197265625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.1455078125,5],["body",256,"valid",255.777587890625,8256]],"time":264.3388671875,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,2.292e-6],[5,27,8,0.000403708],[4,26,8,0.000336708],[3,24,8,0.000266916],[2,21,8,0.00020375000000000002],[1,15,8,0.000148583],[0,7,8,8.3083e-5]],"inputs":[["0"],["(/.f64 (-.f64 (*.f64 x x) 3) 6)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","(/.f64 (fma.f64 x x -3) 6)"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":26.114013671875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,27,8,0.000353709],[4,26,8,0.00029104200000000004],[3,24,8,0.000227084],[2,21,8,0.000168292],[1,15,8,0.000117459],[0,7,8,6.2667e-5]],"inputs":[["(/.f64 (-.f64 (*.f64 x x) 3) 6)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (*.f64 x x) 3) 6)","(/.f64 (fma.f64 x x -3) 6)"]],"stop":[["saturated",1]],"time":12.866943359375,"type":"simplify"},{"compiler":[[14,10]],"time":0.43701171875,"type":"eval"},{"alts":[["(/.f64 (-.f64 (*.f64 x x) 3) 6)","next",0.33203125]],"compiler":[[8,6],[8,6]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,1],"picked":[0,0]}],"min-error":[0.33203125],"time":0.830078125,"type":"prune"},{"compiler":[[19,10]],"locations":[["(-.f64 (*.f64 x x) 3)",0.00390625,true],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",0.29198514072195336,true]],"time":4.77099609375,"type":"localize"},{"count":[[2,24]],"series":[["(-.f64 (*.f64 x x) 3)","x","-inf",0.197021484375],["(-.f64 (*.f64 x x) 3)","x","inf",0.16015625],["(-.f64 (*.f64 x x) 3)","x","0",0.159912109375],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","x","-inf",0.23388671875],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","x","inf",0.555908203125],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","x","0",0.5791015625]],"time":1.998046875,"type":"series"},{"count":[[2,55]],"egraph":[[2,2033,13,0.023005291999999997],[1,166,13,0.003837834],[0,7,13,0.000348292]],"inputs":[["(/.f64 (-.f64 (*.f64 x x) 3) 6)","(-.f64 (*.f64 x x) 3)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x x) 1/6) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (*.f64 x x) 1/6) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (fma.f64 x x -3) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -3) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 x x -3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2) (*.f64 (cbrt.f64 (fma.f64 x x -3)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 2) (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x -3)) (*.f64 (sqrt.f64 (fma.f64 x x -3)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x x -3)) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -3) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 x x -3) 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x x -3) -6))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (fma.f64 x x -3) 2) 1/36))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (fma.f64 x x -3)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -3) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 x x -3) 1/6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -3 (*.f64 x x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x x -3)) (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2) (cbrt.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x x -3)) (sqrt.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 x 6) -27) (/.f64 1 (+.f64 (pow.f64 x 4) (+.f64 9 (*.f64 x (*.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 4) 9) (/.f64 1 (fma.f64 x x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 x 4) (+.f64 9 (*.f64 x (*.f64 x 3)))) (+.f64 (pow.f64 x 6) -27)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x 3) (-.f64 (pow.f64 x 4) 9)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (+.f64 (pow.f64 x 4) (+.f64 9 (*.f64 x (*.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 6) -27) (+.f64 (pow.f64 x 4) (-.f64 9 (*.f64 (*.f64 x x) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) 9) (fma.f64 x x 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 4) 9) (-.f64 (*.f64 x x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 x 6) -27)) (neg.f64 (+.f64 (pow.f64 x 4) (+.f64 9 (*.f64 x (*.f64 x 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 4) 9)) (neg.f64 (fma.f64 x x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x -3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x x -3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x x -3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x x -3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x x -3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x x -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x x) -3)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 x 4)) (pow.f64 (cbrt.f64 x) 2) -3)))))"]],"rules":[["egg-rr",30],["egg-rr",25]],"stop":[["node limit",1]],"time":44.93603515625,"type":"rewrite"},{"count":[[79,64]],"egraph":[[21,7150,141,0.118620084],[20,7114,141,0.105254084],[19,7038,141,0.094705042],[18,6758,141,0.086118708],[17,6470,141,0.077375124],[16,6076,141,0.069138166],[15,5239,141,0.059888332],[14,4547,141,0.04962854],[13,3979,141,0.040042332],[12,3498,141,0.033580499],[11,3103,141,0.027145124],[10,2803,141,0.021852958],[9,2595,141,0.017699249],[8,2411,141,0.013869415999999999],[7,2227,141,0.010068873999999998],[6,1305,141,0.006121374],[5,364,141,0.003100332],[4,132,141,0.001205499],[3,63,141,0.000624624],[2,38,141,0.000381874],[1,23,141,0.000229207],[0,12,159,8.9041e-5]],"inputs":[["-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","-3","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(pow.f64 x 2)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(pow.f64 x 2)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)","(-.f64 (pow.f64 x 2) 3)"]],"method":["egg-herbie"],"outputs":[["-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","-3","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(pow.f64 x 2)","(*.f64 x x)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)","(-.f64 (pow.f64 x 2) 3)","(+.f64 (*.f64 x x) -3)","(fma.f64 x x -3)"]],"stop":[["node limit",1]],"time":137.906005859375,"type":"simplify"},{"compiler":[[635,475]],"time":10.990966796875,"type":"eval"},{"alts":[["(/.f64 (/.f64 (-.f64 (pow.f64 x 4) 9) (fma.f64 x x 3)) 6)","fresh",10.33203125],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","done",0.33203125],["-1/2","fresh",21.54693649134869],["(*.f64 (sqrt.f64 (fma.f64 x x -3)) (*.f64 (sqrt.f64 (fma.f64 x x -3)) 1/6))","fresh",42.88509750976844],["(pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)","next",0.375],["(pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 2)","fresh",42.99617011722131],["(/.f64 (*.f64 (cbrt.f64 (fma.f64 x x -3)) (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2)) 6)","fresh",0.5297051269897464]],"compiler":[[13,10],[8,6],[2,2],[14,10],[9,7],[10,8],[16,12],[13,10],[2,2],[14,10],[9,7],[10,8],[16,12]],"count":[[65,7]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[64,6],"picked":[1,1]}],"min-error":[0.25227641841557924],"time":12.675048828125,"type":"prune"},{"compiler":[[23,16]],"locations":[["(pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)",0.10546875,true],["(/.f64 6 (fma.f64 x x -3))",0.28359033048133775,true]],"time":6.044921875,"type":"localize"},{"count":[[2,24]],"series":[["(pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)","x","-inf",0.616943359375],["(pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)","x","inf",0.4541015625],["(pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)","x","0",0.495849609375],["(/.f64 6 (fma.f64 x x -3))","x","-inf",0.343994140625],["(/.f64 6 (fma.f64 x x -3))","x","inf",0.48291015625],["(/.f64 6 (fma.f64 x x -3))","x","0",0.373046875]],"time":2.860107421875,"type":"series"},{"count":[[2,48]],"egraph":[[2,1908,16,0.01887175],[1,170,16,0.003054083],[0,8,19,0.000302958]],"inputs":[["(/.f64 6 (fma.f64 x x -3))","(pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 6 (fma.f64 x x -3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 6 (/.f64 1 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 6 (fma.f64 x x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 6 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) (pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) 2) (cbrt.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 6 (fma.f64 x x -3))) (sqrt.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -6 (/.f64 1 (neg.f64 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -3)) 6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 6 (fma.f64 x x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 x x -3) 1/6) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 6 (fma.f64 x x -3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 6 (fma.f64 x x -3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (fma.f64 x x -3) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -3) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 x x -3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (cbrt.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) -2)) (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (pow.f64 (/.f64 1 (fma.f64 x x -3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) 2) -1) (pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 6 (fma.f64 x x -3))) -1) (pow.f64 (sqrt.f64 (/.f64 6 (fma.f64 x x -3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/6 (neg.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -3) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 6 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 6 (fma.f64 x x -3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2) (/.f64 6 (cbrt.f64 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (fma.f64 x x -3)) (/.f64 6 (sqrt.f64 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 x x -3)) -6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (sqrt.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/6 (/.f64 1 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) 2)) (cbrt.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -3) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 x x -3) 1/6)))))))"]],"rules":[["egg-rr",28],["egg-rr",20]],"stop":[["node limit",1]],"time":39.2529296875,"type":"rewrite"},{"count":[[72,68]],"egraph":[[5,6979,297,0.023088958],[4,2362,297,0.012985208],[3,613,297,0.004829458],[2,236,297,0.001695417],[1,108,299,0.000718542],[0,46,301,0.000231917]],"inputs":[["-2","(-.f64 (*.f64 -2/3 (pow.f64 x 2)) 2)","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (*.f64 -2/3 (pow.f64 x 2))) 2)","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (+.f64 (*.f64 -2/3 (pow.f64 x 2)) (*.f64 -2/27 (pow.f64 x 6)))) 2)","(/.f64 6 (pow.f64 x 2))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","(/.f64 6 (pow.f64 x 2))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)"]],"method":["egg-herbie"],"outputs":[["-2","(-.f64 (*.f64 -2/3 (pow.f64 x 2)) 2)","(fma.f64 -2/3 (*.f64 x x) -2)","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (*.f64 -2/3 (pow.f64 x 2))) 2)","(+.f64 (*.f64 -2/9 (pow.f64 x 4)) (fma.f64 -2/3 (*.f64 x x) -2))","(fma.f64 -2/9 (pow.f64 x 4) (fma.f64 -2/3 (*.f64 x x) -2))","(fma.f64 -2/3 (*.f64 x x) (fma.f64 -2/9 (pow.f64 x 4) -2))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x -2/9) -2/3) -2)","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (+.f64 (*.f64 -2/3 (pow.f64 x 2)) (*.f64 -2/27 (pow.f64 x 6)))) 2)","(+.f64 (fma.f64 -2/9 (pow.f64 x 4) (fma.f64 -2/3 (*.f64 x x) (*.f64 -2/27 (pow.f64 x 6)))) -2)","(fma.f64 -2/9 (pow.f64 x 4) (fma.f64 -2/27 (pow.f64 x 6) (fma.f64 -2/3 (*.f64 x x) -2)))","(fma.f64 -2/3 (*.f64 x x) (fma.f64 -2/9 (pow.f64 x 4) (fma.f64 -2/27 (pow.f64 x 6) -2)))","(fma.f64 x (*.f64 x (fma.f64 (pow.f64 x 4) -2/27 -2/3)) (fma.f64 -2/9 (pow.f64 x 4) -2))","(/.f64 6 (pow.f64 x 2))","(/.f64 6 (*.f64 x x))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x)))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x))) (/.f64 54 (pow.f64 x 6)))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 54 (pow.f64 x 6))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 54 (pow.f64 x 6)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","(/.f64 6 (pow.f64 x 2))","(/.f64 6 (*.f64 x x))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x)))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x))) (/.f64 54 (pow.f64 x 6)))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 54 (pow.f64 x 6))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 54 (pow.f64 x 6)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 (*.f64 x x) 1/6)","(*.f64 x (*.f64 x 1/6))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 (*.f64 x x) 1/6)","(*.f64 x (*.f64 x 1/6))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)"]],"stop":[["node limit",1]],"time":38.7470703125,"type":"simplify"},{"compiler":[[796,625]],"time":13.3798828125,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (fma.f64 x x -3)) (/.f64 6 (sqrt.f64 (fma.f64 x x -3))))","fresh",42.83431625976844],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","done",0.33203125],["(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)","fresh",0.3951950195368841],["(fma.f64 x (*.f64 x 1/6) -1/2)","next",0.127285009768442]],"compiler":[[14,10],[8,6],[11,9],[7,5],[14,10],[11,9],[7,5]],"count":[[75,4]],"kept":[{"done":[1,1],"fresh":[5,0],"new":[68,3],"picked":[1,0]}],"min-error":[0],"time":12.8291015625,"type":"prune"},{"compiler":[[13,9]],"locations":[["(fma.f64 x (*.f64 x 1/6) -1/2)",0.0703125,true],["(*.f64 x 1/6)",0.3046875,true]],"time":3.280029296875,"type":"localize"},{"count":[[2,24]],"series":[["(fma.f64 x (*.f64 x 1/6) -1/2)","x","-inf",0.2880859375],["(fma.f64 x (*.f64 x 1/6) -1/2)","x","inf",0.256103515625],["(fma.f64 x (*.f64 x 1/6) -1/2)","x","0",0.242919921875],["(*.f64 x 1/6)","x","-inf",0.31103515625],["(*.f64 x 1/6)","x","inf",0.31005859375],["(*.f64 x 1/6)","x","0",0.303955078125]],"time":1.785888671875,"type":"series"},{"count":[[2,32]],"egraph":[[2,1327,12,0.014430249999999999],[1,122,12,0.001993292],[0,6,12,0.000232708]],"inputs":[["(*.f64 x 1/6)","(fma.f64 x (*.f64 x 1/6) -1/2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 x 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x 1/6) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x 1/6)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x 1/6)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x 1/6) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x 1/6)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 -1/2 (*.f64 x (*.f64 x 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (*.f64 x 1/6)) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (*.f64 x 1/6)) 1) -1/2)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (*.f64 x 1/6) -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (*.f64 x 1/6) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) 2) (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) (sqrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (*.f64 x 1/6)) 3) -1/8) (+.f64 (*.f64 (*.f64 x (*.f64 x 1/6)) (*.f64 x (*.f64 x 1/6))) (-.f64 1/4 (*.f64 (*.f64 x (*.f64 x 1/6)) -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (*.f64 x 1/6)) (*.f64 x (*.f64 x 1/6))) 1/4) (-.f64 (*.f64 x (*.f64 x 1/6)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (*.f64 x 1/6) -1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (*.f64 x 1/6) -1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (*.f64 x 1/6) -1/2)))))))"]],"rules":[["egg-rr",21],["egg-rr",11]],"stop":[["node limit",1]],"time":32.927978515625,"type":"rewrite"},{"count":[[56,38]],"egraph":[[21,7060,135,0.10899349800000001],[20,7024,135,0.096135915],[19,6956,135,0.08601454],[18,6682,135,0.077653248],[17,6392,135,0.069244665],[16,6002,135,0.061396207],[15,5163,135,0.053156582],[14,4473,135,0.044128498],[13,3907,135,0.03678129],[12,3426,135,0.030589373],[11,3033,135,0.024808165],[10,2735,135,0.019950415],[9,2527,135,0.015917082],[8,2343,135,0.012295206999999999],[7,2179,135,0.009158791],[6,1281,135,0.005836791],[5,349,135,0.002918541],[4,116,135,0.0010884990000000002],[3,51,135,0.0005234160000000001],[2,30,135,0.000296666],[1,20,135,0.000170583],[0,10,135,7.375e-5]],"inputs":[["(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","(*.f64 1/6 x)","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 1/6 (*.f64 x x))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)"]],"stop":[["node limit",1]],"time":126.10693359375,"type":"simplify"},{"compiler":[[363,274]],"time":6.84912109375,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (fma.f64 x x -3)) (/.f64 6 (sqrt.f64 (fma.f64 x x -3))))","fresh",42.83431625976844],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","done",0.33203125],["(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)","next",0.3951950195368841],["(fma.f64 x (*.f64 x 1/6) -1/2)","done",0.127285009768442]],"compiler":[[14,10],[8,6],[11,9],[7,5],[14,10],[11,9]],"count":[[42,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[38,0],"picked":[1,1]}],"min-error":[0],"time":6.43798828125,"type":"prune"},{"compiler":[[34,25]],"locations":[["(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)",0.10546875,true],["(*.f64 6 (/.f64 1 (fma.f64 x x -3)))",0.11947250976844202,true],["(/.f64 1 (fma.f64 x x -3))",0.2617740707128957,true]],"time":8.530029296875,"type":"localize"},{"count":[[3,36]],"series":[["(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)","x","-inf",0.169921875],["(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)","x","inf",0.14208984375],["(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)","x","0",0.14501953125],["(*.f64 6 (/.f64 1 (fma.f64 x x -3)))","x","-inf",0.191162109375],["(*.f64 6 (/.f64 1 (fma.f64 x x -3)))","x","inf",0.172119140625],["(*.f64 6 (/.f64 1 (fma.f64 x x -3)))","x","0",0.184814453125],["(/.f64 1 (fma.f64 x x -3))","x","-inf",0.19921875],["(/.f64 1 (fma.f64 x x -3))","x","inf",0.2841796875],["(/.f64 1 (fma.f64 x x -3))","x","0",0.268798828125]],"time":1.87890625,"type":"series"},{"count":[[3,59]],"egraph":[[2,2217,24,0.019654251],[1,207,24,0.0034278340000000003],[0,10,27,0.00035575]],"inputs":[["(/.f64 1 (fma.f64 x x -3))","(*.f64 6 (/.f64 1 (fma.f64 x x -3)))","(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (fma.f64 x x -3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (fma.f64 x x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x -3))) (cbrt.f64 (pow.f64 (fma.f64 x x -3) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 x x -3) -2)) (/.f64 1 (cbrt.f64 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 x x -3) -1/2) (pow.f64 (fma.f64 x x -3) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2) -1) (pow.f64 (cbrt.f64 (fma.f64 x x -3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (fma.f64 x x -3)) -1) (pow.f64 (sqrt.f64 (fma.f64 x x -3)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x x -3) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (fma.f64 x x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (fma.f64 x x -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (fma.f64 x x -3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x x -3) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x x -3) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (fma.f64 x x -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (fma.f64 x x -3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 6 (fma.f64 x x -3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (fma.f64 x x -3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 6 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -6 (neg.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 6 (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2)) (cbrt.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 6 (sqrt.f64 (fma.f64 x x -3))) (sqrt.f64 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 6 (fma.f64 x x -3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 6 (fma.f64 x x -3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 36 (pow.f64 (fma.f64 x x -3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 6 (fma.f64 x x -3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 6 (fma.f64 x x -3))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (*.f64 (fma.f64 x x -3) 1/6)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (fma.f64 x x -3) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x x -3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (fma.f64 x x -3) 1/6) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 2) (cbrt.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/6 (fma.f64 x x -3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 36 (pow.f64 (fma.f64 x x -3) 2))) -1) (pow.f64 (cbrt.f64 (/.f64 6 (fma.f64 x x -3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (/.f64 6 (fma.f64 x x -3))) -1) (pow.f64 (sqrt.f64 (/.f64 6 (fma.f64 x x -3))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 6 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 6 (fma.f64 x x -3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x x -3) 6)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/6 (/.f64 1 (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) (sqrt.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cbrt.f64 (/.f64 36 (pow.f64 (fma.f64 x x -3) 2)))) (cbrt.f64 (/.f64 6 (fma.f64 x x -3))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 1/36 (pow.f64 (fma.f64 x x -3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 1/6) (fma.f64 x x -3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 x x -3) 1/6) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 x x -3) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 x x -3) 1/6)))))))"]],"rules":[["egg-rr",23],["egg-rr",16],["egg-rr",20]],"stop":[["node limit",1]],"time":41.671142578125,"type":"rewrite"},{"count":[[95,94]],"egraph":[[4,3928,507,0.017629334],[3,1013,507,0.007623292],[2,381,507,0.002583709],[1,170,511,0.001059625],[0,70,515,0.000328]],"inputs":[["-1/3","(-.f64 (*.f64 -1/9 (pow.f64 x 2)) 1/3)","(-.f64 (+.f64 (*.f64 -1/9 (pow.f64 x 2)) (*.f64 -1/27 (pow.f64 x 4))) 1/3)","(-.f64 (+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 (*.f64 -1/81 (pow.f64 x 6)) (*.f64 -1/27 (pow.f64 x 4)))) 1/3)","(/.f64 1 (pow.f64 x 2))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (/.f64 1 (pow.f64 x 2)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6)))))","(+.f64 (*.f64 27 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6))))))","(/.f64 1 (pow.f64 x 2))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (/.f64 1 (pow.f64 x 2)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6)))))","(+.f64 (*.f64 27 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6))))))","-2","(-.f64 (*.f64 -2/3 (pow.f64 x 2)) 2)","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (*.f64 -2/3 (pow.f64 x 2))) 2)","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (+.f64 (*.f64 -2/3 (pow.f64 x 2)) (*.f64 -2/27 (pow.f64 x 6)))) 2)","(/.f64 6 (pow.f64 x 2))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","(/.f64 6 (pow.f64 x 2))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(*.f64 1/6 (pow.f64 x 2))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)"]],"method":["egg-herbie"],"outputs":[["-1/3","(-.f64 (*.f64 -1/9 (pow.f64 x 2)) 1/3)","(fma.f64 -1/9 (*.f64 x x) -1/3)","(-.f64 (+.f64 (*.f64 -1/9 (pow.f64 x 2)) (*.f64 -1/27 (pow.f64 x 4))) 1/3)","(+.f64 (fma.f64 -1/9 (*.f64 x x) (*.f64 -1/27 (pow.f64 x 4))) -1/3)","(fma.f64 -1/9 (*.f64 x x) (fma.f64 -1/27 (pow.f64 x 4) -1/3))","(-.f64 (+.f64 (*.f64 -1/9 (pow.f64 x 2)) (+.f64 (*.f64 -1/81 (pow.f64 x 6)) (*.f64 -1/27 (pow.f64 x 4)))) 1/3)","(+.f64 (fma.f64 -1/9 (*.f64 x x) (fma.f64 -1/81 (pow.f64 x 6) (*.f64 -1/27 (pow.f64 x 4)))) -1/3)","(+.f64 (fma.f64 -1/27 (pow.f64 x 4) (*.f64 -1/81 (pow.f64 x 6))) (fma.f64 -1/9 (*.f64 x x) -1/3))","(fma.f64 -1/9 (*.f64 x x) (fma.f64 -1/27 (pow.f64 x 4) (fma.f64 -1/81 (pow.f64 x 6) -1/3)))","(fma.f64 -1/9 (*.f64 x x) (fma.f64 -1/81 (pow.f64 x 6) (fma.f64 -1/27 (pow.f64 x 4) -1/3)))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (*.f64 x x)) (/.f64 3 (pow.f64 x 4)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 3 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 9 (pow.f64 x 6))))","(+.f64 (*.f64 27 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6))))))","(+.f64 (+.f64 (/.f64 27 (pow.f64 x 8)) (/.f64 3 (pow.f64 x 4))) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 9 (pow.f64 x 6))))","(+.f64 (/.f64 3 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 9 (pow.f64 x 6))) (/.f64 27 (pow.f64 x 8))))","(+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 3 (pow.f64 x 4)) (+.f64 (/.f64 9 (pow.f64 x 6)) (/.f64 27 (pow.f64 x 8)))))","(/.f64 1 (pow.f64 x 2))","(/.f64 1 (*.f64 x x))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (/.f64 1 (pow.f64 x 2)))","(+.f64 (/.f64 1 (*.f64 x x)) (/.f64 3 (pow.f64 x 4)))","(+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6)))))","(+.f64 (/.f64 3 (pow.f64 x 4)) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 9 (pow.f64 x 6))))","(+.f64 (*.f64 27 (/.f64 1 (pow.f64 x 8))) (+.f64 (*.f64 3 (/.f64 1 (pow.f64 x 4))) (+.f64 (/.f64 1 (pow.f64 x 2)) (*.f64 9 (/.f64 1 (pow.f64 x 6))))))","(+.f64 (+.f64 (/.f64 27 (pow.f64 x 8)) (/.f64 3 (pow.f64 x 4))) (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 9 (pow.f64 x 6))))","(+.f64 (/.f64 3 (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 1 (*.f64 x x)) (/.f64 9 (pow.f64 x 6))) (/.f64 27 (pow.f64 x 8))))","(+.f64 (/.f64 1 (*.f64 x x)) (+.f64 (/.f64 3 (pow.f64 x 4)) (+.f64 (/.f64 9 (pow.f64 x 6)) (/.f64 27 (pow.f64 x 8)))))","-2","(-.f64 (*.f64 -2/3 (pow.f64 x 2)) 2)","(fma.f64 -2/3 (*.f64 x x) -2)","(fma.f64 (*.f64 x x) -2/3 -2)","(fma.f64 x (*.f64 x -2/3) -2)","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (*.f64 -2/3 (pow.f64 x 2))) 2)","(+.f64 (*.f64 (pow.f64 x 4) -2/9) (fma.f64 -2/3 (*.f64 x x) -2))","(fma.f64 (pow.f64 x 4) -2/9 (fma.f64 (*.f64 x x) -2/3 -2))","(fma.f64 x (*.f64 x -2/3) (fma.f64 (pow.f64 x 4) -2/9 -2))","(-.f64 (+.f64 (*.f64 -2/9 (pow.f64 x 4)) (+.f64 (*.f64 -2/3 (pow.f64 x 2)) (*.f64 -2/27 (pow.f64 x 6)))) 2)","(+.f64 (fma.f64 -2/9 (pow.f64 x 4) (fma.f64 -2/3 (*.f64 x x) (*.f64 (pow.f64 x 6) -2/27))) -2)","(+.f64 (fma.f64 (pow.f64 x 4) -2/9 (fma.f64 (*.f64 x x) -2/3 (*.f64 (pow.f64 x 6) -2/27))) -2)","(fma.f64 (pow.f64 x 4) -2/9 (fma.f64 x (*.f64 x -2/3) (fma.f64 (pow.f64 x 6) -2/27 -2)))","(fma.f64 x (*.f64 x -2/3) (fma.f64 (pow.f64 x 4) -2/9 (fma.f64 (pow.f64 x 6) -2/27 -2)))","(/.f64 6 (pow.f64 x 2))","(/.f64 6 (*.f64 x x))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x)))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x))) (/.f64 54 (pow.f64 x 6)))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 54 (pow.f64 x 6))))","(+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 54 (pow.f64 x 6))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x))) (/.f64 162 (pow.f64 x 8))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 54 (pow.f64 x 6)) (/.f64 162 (pow.f64 x 8)))))","(/.f64 6 (pow.f64 x 2))","(/.f64 6 (*.f64 x x))","(+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x)))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (*.f64 6 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x))) (/.f64 54 (pow.f64 x 6)))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 54 (pow.f64 x 6))))","(+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 54 (pow.f64 x 6))))","(+.f64 (*.f64 54 (/.f64 1 (pow.f64 x 6))) (+.f64 (*.f64 18 (/.f64 1 (pow.f64 x 4))) (+.f64 (*.f64 162 (/.f64 1 (pow.f64 x 8))) (*.f64 6 (/.f64 1 (pow.f64 x 2))))))","(+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (+.f64 (/.f64 18 (pow.f64 x 4)) (/.f64 6 (*.f64 x x))) (/.f64 162 (pow.f64 x 8))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 54 (pow.f64 x 6)) (+.f64 (/.f64 6 (*.f64 x x)) (/.f64 162 (pow.f64 x 8)))))","(+.f64 (/.f64 18 (pow.f64 x 4)) (+.f64 (/.f64 6 (*.f64 x x)) (+.f64 (/.f64 54 (pow.f64 x 6)) (/.f64 162 (pow.f64 x 8)))))","-1/2","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 (*.f64 x x) 1/6)","(*.f64 x (*.f64 x 1/6))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(*.f64 1/6 (pow.f64 x 2))","(*.f64 (*.f64 x x) 1/6)","(*.f64 x (*.f64 x 1/6))","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)","(-.f64 (*.f64 1/6 (pow.f64 x 2)) 1/2)","(fma.f64 1/6 (*.f64 x x) -1/2)","(fma.f64 (*.f64 x x) 1/6 -1/2)","(fma.f64 x (*.f64 x 1/6) -1/2)"]],"stop":[["node limit",1]],"time":34.885986328125,"type":"simplify"},{"compiler":[[1222,982]],"time":19.5859375,"type":"eval"},{"alts":[["(/.f64 (sqrt.f64 (fma.f64 x x -3)) (/.f64 6 (sqrt.f64 (fma.f64 x x -3))))","fresh",42.83431625976844],["(/.f64 (-.f64 (*.f64 x x) 3) 6)","done",0.33203125],["(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)","done",0.3951950195368841],["(fma.f64 x (*.f64 x 1/6) -1/2)","done",0.127285009768442]],"compiler":[[14,10],[8,6],[11,9],[7,5]],"count":[[98,4]],"kept":[{"done":[2,2],"fresh":[1,1],"new":[94,0],"picked":[1,1]}],"min-error":[0],"time":17.052001953125,"type":"prune"},{"accuracy":[0.12728500976844204],"baseline":[0.127285009768442],"branch":[["x",0.12728500976844204,1],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",0.12728500976844204,1],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",0.12728500976844204,1],["(-.f64 (*.f64 x x) 3)",0.12728500976844204,1],["(-.f64 (*.f64 x x) 3)",0.12728500976844204,1],["(*.f64 x x)",0.12728500976844204,1],["(*.f64 x x)",0.12728500976844204,1]],"compiler":[[2,1],[8,6],[8,6],[6,4],[6,4],[4,2],[4,2],[95,70]],"count":[[10,1]],"inputs":[["(/.f64 (sqrt.f64 (fma.f64 x x -3)) (/.f64 6 (sqrt.f64 (fma.f64 x x -3))))","(pow.f64 (*.f64 6 (/.f64 1 (fma.f64 x x -3))) -1)","(fma.f64 x (*.f64 x 1/6) -1/2)","(/.f64 (/.f64 (-.f64 (pow.f64 x 4) 9) (fma.f64 x x 3)) 6)","-1/2","(*.f64 (sqrt.f64 (fma.f64 x x -3)) (*.f64 (sqrt.f64 (fma.f64 x x -3)) 1/6))","(pow.f64 (/.f64 6 (fma.f64 x x -3)) -1)","(pow.f64 (sqrt.f64 (*.f64 (fma.f64 x x -3) 1/6)) 2)","(/.f64 (*.f64 (cbrt.f64 (fma.f64 x x -3)) (pow.f64 (cbrt.f64 (fma.f64 x x -3)) 2)) 6)","(/.f64 (-.f64 (*.f64 x x) 3) 6)"]],"link":["."],"name":["Numeric.SpecFunctions:invIncompleteBetaWorker from math-functions-0.1.5.2, H"],"oracle":[63.85272102220899],"outputs":[["(fma.f64 x (*.f64 x 1/6) -1/2)"]],"time":21.675048828125,"times":[["x",4.60595703125],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",2.177001953125],["(/.f64 (-.f64 (*.f64 x x) 3) 6)",2.138916015625],["(-.f64 (*.f64 x x) 3)",2.099853515625],["(-.f64 (*.f64 x x) 3)",2.11083984375],["(*.f64 x x)",3.218994140625],["(*.f64 x x)",3.093017578125]],"type":"regimes"},{"compiler":[[7,5]],"egraph":[[1,7,8,2.875e-5],[0,6,8,1.8e-5]],"inputs":[["(fma.f64 x (*.f64 x 1/6) -1/2)"]],"method":["egg-herbie"],"outputs":[["(fma.f64 x (*.f64 x 1/6) -1/2)"]],"stop":[["fuel",1],["saturated",1]],"time":8.280029296875,"type":"simplify"},{"time":0.014892578125,"type":"soundness"},{"compiler":[[7,5]],"remove-preprocessing":[[]],"time":7.907958984375,"type":"end"}]
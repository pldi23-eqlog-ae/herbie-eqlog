[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.6279854503659408,0.3705504210233812,0.0014641286106780171],[11,0.5480245700398427,0.45051130134947925,0.0014641286106780171],[10,0.47586475120897376,0.5226711201803482,0.0014641286106780171],[9,0.3588488287805376,0.6396870426087844,0.0014641286106780171],[8,0.2496339678473305,0.7489019035419915,0.0014641286106780171],[7,0.12481698392366525,0.8737188874656567,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":104.68212890625,"type":"analyze"},{"outcomes":[["body",512,"invalid",6.858154296875,60],["body",256,"invalid",38.685302734375,673],["body",1024,"invalid",3.958984375,22],["body",512,"valid",98.0869140625,841],["body",1024,"valid",268.1328125,1415],["body",2048,"valid",1.10498046875,3],["body",256,"valid",350.058837890625,5997]],"time":776.671875,"type":"sample"},{"compiler":[[11,7]],"egraph":[[0,3,3,2.125e-6],[5,291,48,0.001789209],[4,255,48,0.00131225],[3,176,48,0.000840833],[2,83,48,0.00043683299999999997],[1,38,48,0.000206666],[0,18,48,8.3125e-5]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 (*.f64 y (/.f64 (sin.f64 x) x)) z)","(/.f64 (*.f64 z (/.f64 (sin.f64 y) y)) x)","(/.f64 (*.f64 x (/.f64 (sin.f64 z) z)) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 x (/.f64 z (/.f64 (sin.f64 y) y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(/.f64 (*.f64 y (/.f64 (sin.f64 x) x)) z)","(/.f64 (/.f64 (sin.f64 x) x) (/.f64 z y))","(*.f64 (/.f64 (sin.f64 x) z) (/.f64 y x))","(*.f64 y (/.f64 (/.f64 (sin.f64 x) x) z))","(/.f64 (*.f64 z (/.f64 (sin.f64 y) y)) x)","(/.f64 z (/.f64 x (/.f64 (sin.f64 y) y)))","(*.f64 (/.f64 z x) (/.f64 (sin.f64 y) y))","(/.f64 z (*.f64 y (/.f64 x (sin.f64 y))))","(*.f64 (/.f64 z (*.f64 x y)) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 z (*.f64 x y)))","(/.f64 (*.f64 x (/.f64 (sin.f64 z) z)) y)","(/.f64 x (/.f64 y (/.f64 (sin.f64 z) z)))","(*.f64 (/.f64 x y) (/.f64 (sin.f64 z) z))","(*.f64 (/.f64 (sin.f64 z) z) (/.f64 x y))","(*.f64 (sin.f64 z) (/.f64 (/.f64 x y) z))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":25.52099609375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,81,12,0.000614458],[4,71,12,0.00046416599999999996],[3,50,12,0.00030949899999999997],[2,25,12,0.000175791],[1,13,12,9.4624e-5],[0,8,12,4.2833e-5]],"inputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 x (/.f64 z (/.f64 (sin.f64 y) y)))","(/.f64 (/.f64 x (/.f64 y (sin.f64 y))) z)","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(/.f64 (sin.f64 y) (*.f64 z (/.f64 y x)))"]],"stop":[["saturated",1]],"time":10.838134765625,"type":"simplify"},{"compiler":[[19,10]],"time":0.287841796875,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","next",3.967228939535031],["(/.f64 (sin.f64 y) (*.f64 z (/.f64 y x)))","fresh",12.873767698115458]],"compiler":[[11,7],[11,7],[11,7],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[3.900822689535031],"time":1.177001953125,"type":"prune"},{"compiler":[[26,7]],"locations":[["(sin.f64 y)",0.0390625,true],["(*.f64 x (/.f64 (sin.f64 y) y))",0.11166000976844201,true],["(/.f64 (sin.f64 y) y)",0.13671875,true],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)",3.910256429766589,true]],"time":5.48193359375,"type":"localize"},{"count":[[4,68]],"series":[["(sin.f64 y)","y","-inf",0.1318359375],["(sin.f64 y)","y","inf",0.135009765625],["(sin.f64 y)","y","0",0.2529296875],["(*.f64 x (/.f64 (sin.f64 y) y))","y","-inf",0.593994140625],["(*.f64 x (/.f64 (sin.f64 y) y))","y","inf",0.15185546875],["(*.f64 x (/.f64 (sin.f64 y) y))","y","0",0.291015625],["(*.f64 x (/.f64 (sin.f64 y) y))","x","-inf",0.31982421875],["(*.f64 x (/.f64 (sin.f64 y) y))","x","inf",0.31591796875],["(*.f64 x (/.f64 (sin.f64 y) y))","x","0",0.326904296875],["(/.f64 (sin.f64 y) y)","y","-inf",1.1650390625],["(/.f64 (sin.f64 y) y)","y","inf",0.26220703125],["(/.f64 (sin.f64 y) y)","y","0",0.259765625],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","z","-inf",0.783203125],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","z","inf",0.47900390625],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","z","0",0.7080078125],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","y","-inf",0.8369140625],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","y","inf",0.93701171875],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","y","0",0.526123046875],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","x","-inf",0.35302734375],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","x","inf",0.7099609375],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","x","0",1.135986328125]],"time":10.9580078125,"type":"series"},{"count":[[4,187]],"egraph":[[2,2511,30,0.025137791],[1,172,30,0.003123041],[0,8,30,0.000186125]],"inputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(/.f64 (sin.f64 y) y)","(*.f64 x (/.f64 (sin.f64 y) y))","(sin.f64 y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (*.f64 z (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 (/.f64 (sin.f64 y) y) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (*.f64 x (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (/.f64 y (sin.f64 y))) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))) (cbrt.f64 (pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -2)) (cbrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 2) (*.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))) (sqrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) (*.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 (/.f64 (sin.f64 y) y))) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 x (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) 1) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 2) 1) (/.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 1) (/.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 z) 2)) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 x (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 (/.f64 x (/.f64 y (sin.f64 y))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 z)) (/.f64 (/.f64 (sin.f64 y) y) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (sqrt.f64 z)) (/.f64 x (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/2) (/.f64 (/.f64 x (/.f64 y (sin.f64 y))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 x (/.f64 y (sin.f64 y))) 3) (pow.f64 z 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))) 2)) (cbrt.f64 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))) (sqrt.f64 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 x (/.f64 y (sin.f64 y))) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 x (/.f64 y (sin.f64 y))) 3) (pow.f64 z 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 x) 1) (log.f64 (*.f64 z (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 1) (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 1) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 1) (neg.f64 (log.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 z)) (*.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 y) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 y) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sin.f64 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (cbrt.f64 (sin.f64 y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (sqrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (*.f64 (sqrt.f64 (sin.f64 y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) 1) (/.f64 (cbrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 y)) 1) (/.f64 (sqrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (sin.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/2) (/.f64 (sin.f64 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (sin.f64 y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 y) 3) (pow.f64 y 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y (sin.f64 y)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (sin.f64 y) y))) 2)) (cbrt.f64 (log.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (sin.f64 y) y)))) (sqrt.f64 (log.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 y) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 y (sin.f64 y)) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (sin.f64 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (sin.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (sin.f64 y)) 1) (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (sin.f64 y)) (*.f64 (log.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (sin.f64 y)) 1) (*.f64 (log.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (sin.f64 y)) 1) (neg.f64 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 y)) (*.f64 (log.f64 (sin.f64 y)) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (/.f64 y (sin.f64 y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (sin.f64 y)) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) x) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (/.f64 y (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (/.f64 y (sin.f64 y))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (/.f64 y (sin.f64 y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 x (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y))))) 2)) (cbrt.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))))) (sqrt.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (/.f64 y (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y (sin.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (/.f64 y (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 x (/.f64 y (sin.f64 y))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 x (/.f64 y (sin.f64 y))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 x (/.f64 y (sin.f64 y))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y (sin.f64 y)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 x) 1) (log.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 x (sin.f64 y))) (*.f64 (log.f64 y) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1) (log.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 x) (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1) (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (/.f64 (sin.f64 y) y)) (*.f64 (log.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1) (*.f64 (log.f64 x) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 y)))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 y))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 y))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 (sin.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (cbrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (sqrt.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (sin.f64 y))) 2)) (cbrt.f64 (log.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (sin.f64 y)))) (sqrt.f64 (log.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (sin.f64 y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (sin.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sin.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 y)) 1) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",42],["egg-rr",52],["egg-rr",63]],"stop":[["node limit",1]],"time":56.405029296875,"type":"rewrite"},{"count":[[255,219]],"egraph":[[6,7703,788,0.035883749000000006],[5,5531,788,0.026438541000000003],[4,3502,797,0.015573499000000001],[3,1460,805,0.008278499],[2,453,807,0.003309999],[1,173,816,0.001166166],[0,63,822,0.000326708]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","(/.f64 (*.f64 (sin.f64 y) x) y)","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(fma.f64 -1/6 (/.f64 (*.f64 x (*.f64 y y)) z) (/.f64 x z))","(fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))","(fma.f64 -1/6 (*.f64 x (/.f64 y (/.f64 z y))) (/.f64 x z))","(fma.f64 -1/6 (*.f64 y (*.f64 (/.f64 y z) x)) (/.f64 x z))","(fma.f64 -1/6 (*.f64 y (*.f64 x (/.f64 y z))) (/.f64 x z))","(*.f64 (fma.f64 y (*.f64 y -1/6) 1) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (*.f64 x (pow.f64 y 4)) z) (fma.f64 -1/6 (/.f64 (*.f64 x (*.f64 y y)) z) (/.f64 x z)))","(fma.f64 1/120 (*.f64 (/.f64 (pow.f64 y 4) z) x) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z)))","(fma.f64 1/120 (*.f64 x (/.f64 (pow.f64 y 4) z)) (fma.f64 -1/6 (*.f64 x (/.f64 y (/.f64 z y))) (/.f64 x z)))","(fma.f64 -1/6 (*.f64 y (*.f64 (/.f64 y z) x)) (fma.f64 1/120 (/.f64 x (/.f64 z (pow.f64 y 4))) (/.f64 x z)))","(+.f64 (/.f64 x z) (*.f64 (/.f64 x z) (fma.f64 y (*.f64 y -1/6) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(fma.f64 -1/5040 (/.f64 (*.f64 x (pow.f64 y 6)) z) (fma.f64 1/120 (/.f64 (*.f64 x (pow.f64 y 4)) z) (fma.f64 -1/6 (/.f64 (*.f64 x (*.f64 y y)) z) (/.f64 x z))))","(fma.f64 -1/5040 (/.f64 (pow.f64 y 6) (/.f64 z x)) (fma.f64 1/120 (*.f64 (/.f64 (pow.f64 y 4) z) x) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))))","(fma.f64 -1/5040 (*.f64 (/.f64 x z) (pow.f64 y 6)) (fma.f64 1/120 (*.f64 x (/.f64 (pow.f64 y 4) z)) (fma.f64 -1/6 (*.f64 x (/.f64 y (/.f64 z y))) (/.f64 x z))))","(fma.f64 1/120 (/.f64 x (/.f64 z (pow.f64 y 4))) (fma.f64 -1/5040 (*.f64 x (/.f64 (pow.f64 y 6) z)) (fma.f64 -1/6 (*.f64 y (*.f64 (/.f64 y z) x)) (/.f64 x z))))","(+.f64 (/.f64 x z) (fma.f64 -1/5040 (*.f64 x (/.f64 (pow.f64 y 6) z)) (*.f64 (/.f64 x z) (fma.f64 y (*.f64 y -1/6) (*.f64 1/120 (pow.f64 y 4))))))","(+.f64 (/.f64 x z) (*.f64 (/.f64 x z) (fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/6) (*.f64 1/120 (pow.f64 y 4))))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/6 (*.f64 y y)))","(fma.f64 -1/6 (*.f64 y y) 1)","(fma.f64 y (*.f64 y -1/6) 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (fma.f64 -1/6 (*.f64 y y) 1) (*.f64 1/120 (pow.f64 y 4)))","(fma.f64 1/120 (pow.f64 y 4) (fma.f64 y (*.f64 y -1/6) 1))","(fma.f64 y (*.f64 y -1/6) (fma.f64 1/120 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(fma.f64 -1/5040 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(fma.f64 -1/5040 (pow.f64 y 6) (+.f64 (fma.f64 -1/6 (*.f64 y y) 1) (*.f64 1/120 (pow.f64 y 4))))","(fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 1/120 (pow.f64 y 4) (fma.f64 y (*.f64 y -1/6) 1)))","(fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/6) (fma.f64 1/120 (pow.f64 y 4) 1)))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","x","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) x)","(fma.f64 -1/6 (*.f64 x (*.f64 y y)) x)","(fma.f64 -1/6 (*.f64 y (*.f64 y x)) x)","(*.f64 x (fma.f64 y (*.f64 y -1/6) 1))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) x))","(fma.f64 -1/6 (*.f64 x (*.f64 y y)) (fma.f64 1/120 (*.f64 x (pow.f64 y 4)) x))","(+.f64 x (*.f64 x (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(*.f64 x (fma.f64 1/120 (pow.f64 y 4) (fma.f64 y (*.f64 y -1/6) 1)))","(*.f64 x (fma.f64 y (*.f64 y -1/6) (fma.f64 1/120 (pow.f64 y 4) 1)))","(+.f64 (*.f64 -1/6 (*.f64 (pow.f64 y 2) x)) (+.f64 (*.f64 1/120 (*.f64 (pow.f64 y 4) x)) (+.f64 (*.f64 -1/5040 (*.f64 (pow.f64 y 6) x)) x)))","(fma.f64 -1/6 (*.f64 x (*.f64 y y)) (fma.f64 1/120 (*.f64 x (pow.f64 y 4)) (fma.f64 -1/5040 (*.f64 x (pow.f64 y 6)) x)))","(+.f64 (*.f64 (fma.f64 -1/5040 (pow.f64 y 6) 1) x) (*.f64 x (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 x (*.f64 x (fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/6) (*.f64 1/120 (pow.f64 y 4))))))","(*.f64 x (fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/6) (fma.f64 1/120 (pow.f64 y 4) 1))))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","(/.f64 (*.f64 (sin.f64 y) x) y)","(*.f64 (/.f64 (sin.f64 y) y) x)","(*.f64 (/.f64 x y) (sin.f64 y))","(*.f64 (sin.f64 y) (/.f64 x y))","y","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) y)","(fma.f64 -1/6 (pow.f64 y 3) y)","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) y))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) y))","(fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/6 (pow.f64 y 3) y))","(+.f64 (*.f64 -1/6 (pow.f64 y 3)) (+.f64 (*.f64 1/120 (pow.f64 y 5)) (+.f64 y (*.f64 -1/5040 (pow.f64 y 7)))))","(fma.f64 -1/6 (pow.f64 y 3) (+.f64 (fma.f64 1/120 (pow.f64 y 5) y) (*.f64 -1/5040 (pow.f64 y 7))))","(fma.f64 -1/6 (pow.f64 y 3) (fma.f64 1/120 (pow.f64 y 5) (fma.f64 -1/5040 (pow.f64 y 7) y)))"]],"stop":[["node limit",1]],"time":61.01318359375,"type":"simplify"},{"compiler":[[2964,1220]],"time":28.19677734375,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (*.f64 (sin.f64 y) (/.f64 1 y))) z)","fresh",4.054493978608799],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","next",2.668632519536884],["(*.f64 (/.f64 1 z) (/.f64 x (/.f64 y (sin.f64 y))))","fresh",4.307404883499021],["(+.f64 0 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))","fresh",3.4953782327407934],["(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)) z)","fresh",4.08906282629322],["(pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -1)","fresh",3.112620522025307],["(*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z))","fresh",3.1981597428421957],["(/.f64 (sin.f64 y) (*.f64 z (/.f64 y x)))","fresh",12.873767698115458]],"compiler":[[13,9],[11,7],[13,9],[13,9],[14,10],[13,9],[13,9],[11,7],[13,9],[11,7],[13,9],[13,9],[14,10],[13,9],[13,9],[11,7]],"count":[[221,8]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[219,7],"picked":[1,0]}],"min-error":[0.00390625],"time":64.34814453125,"type":"prune"},{"compiler":[[23,7]],"locations":[["(sin.f64 y)",0.0390625,false],["(/.f64 (sin.f64 y) y)",0.13671875,false],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))",2.5119564457704664,true]],"time":5.364990234375,"type":"localize"},{"count":[[1,36]],"series":[["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","y","-inf",0.481201171875],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","y","inf",0.16015625],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","y","0",0.201171875],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","z","-inf",0.1630859375],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","z","inf",0.182861328125],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","z","0",0.15283203125],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","x","-inf",0.16796875],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","x","inf",0.18798828125],["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","x","0",0.199951171875]],"time":2.005859375,"type":"series"},{"count":[[1,72]],"egraph":[[2,2591,12,0.024223124000000002],[1,175,12,0.003130541],[0,8,12,0.000182208]],"inputs":[["(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (/.f64 y (sin.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 (*.f64 z y) (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 z (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x z) (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 (/.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 z x) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 z y) (*.f64 x (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (*.f64 x (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 (/.f64 x z) (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (*.f64 (/.f64 z x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (/.f64 y (sin.f64 y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (sin.f64 y))) (neg.f64 (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (/.f64 (sin.f64 y) y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 x z) (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 z) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (sin.f64 y))) (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (neg.f64 (sin.f64 y))) (*.f64 (neg.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) x) (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) 1) (*.f64 (neg.f64 y) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (neg.f64 x)) (*.f64 (neg.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (sin.f64 y)) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (sin.f64 y)) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 x z) (sin.f64 y)) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (sin.f64 y) y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (neg.f64 (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 z x) (/.f64 y (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 z y) (*.f64 x (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (*.f64 x (/.f64 (sin.f64 y) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 (/.f64 x z) (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))) 2)) (cbrt.f64 (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))) (sqrt.f64 (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 x z)) 1) (log.f64 (/.f64 y (sin.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1) (log.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) y))) (*.f64 (log.f64 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 (/.f64 x z) (sin.f64 y))) (*.f64 (log.f64 y) 1)))))))"]],"rules":[["egg-rr",72]],"stop":[["node limit",1]],"time":44.09814453125,"type":"rewrite"},{"count":[[108,81]],"egraph":[[6,6794,468,0.034145166],[5,5983,468,0.02263125],[4,2633,472,0.012562542],[3,579,478,0.004585458],[2,203,478,0.001352708],[1,75,478,0.000514375],[0,30,478,0.000161625]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(fma.f64 -1/6 (/.f64 (*.f64 x (*.f64 y y)) z) (/.f64 x z))","(fma.f64 -1/6 (*.f64 (/.f64 (*.f64 y y) z) x) (/.f64 x z))","(fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))","(fma.f64 -1/6 (*.f64 y (*.f64 (/.f64 y z) x)) (/.f64 x z))","(fma.f64 x (*.f64 -1/6 (*.f64 (/.f64 y z) y)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (*.f64 x (pow.f64 y 4)) z) (fma.f64 -1/6 (/.f64 (*.f64 x (*.f64 y y)) z) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (*.f64 x (pow.f64 y 4)) z) (fma.f64 -1/6 (*.f64 (/.f64 (*.f64 y y) z) x) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z)))","(fma.f64 1/120 (*.f64 (/.f64 x z) (pow.f64 y 4)) (fma.f64 -1/6 (*.f64 y (*.f64 (/.f64 y z) x)) (/.f64 x z)))","(fma.f64 x (fma.f64 -1/6 (*.f64 (/.f64 y z) y) (*.f64 (/.f64 1/120 z) (pow.f64 y 4))) (/.f64 x z))","(fma.f64 x (*.f64 (*.f64 (/.f64 y z) y) (+.f64 -1/6 (*.f64 y (*.f64 y 1/120)))) (/.f64 x z))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(fma.f64 -1/5040 (/.f64 (*.f64 x (pow.f64 y 6)) z) (fma.f64 1/120 (/.f64 (*.f64 x (pow.f64 y 4)) z) (fma.f64 -1/6 (/.f64 (*.f64 x (*.f64 y y)) z) (/.f64 x z))))","(fma.f64 -1/5040 (/.f64 x (/.f64 z (pow.f64 y 6))) (fma.f64 1/120 (/.f64 (*.f64 x (pow.f64 y 4)) z) (fma.f64 -1/6 (*.f64 (/.f64 (*.f64 y y) z) x) (/.f64 x z))))","(fma.f64 -1/5040 (*.f64 (/.f64 x z) (pow.f64 y 6)) (fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))))","(fma.f64 -1/6 (*.f64 y (*.f64 (/.f64 y z) x)) (fma.f64 1/120 (*.f64 (/.f64 x z) (pow.f64 y 4)) (fma.f64 -1/5040 (*.f64 (/.f64 x z) (pow.f64 y 6)) (/.f64 x z))))","(fma.f64 x (*.f64 -1/5040 (/.f64 (pow.f64 y 6) z)) (fma.f64 x (fma.f64 -1/6 (*.f64 (/.f64 y z) y) (*.f64 (/.f64 1/120 z) (pow.f64 y 4))) (/.f64 x z)))","(+.f64 (/.f64 x z) (*.f64 (/.f64 x z) (+.f64 (*.f64 y (*.f64 y -1/6)) (+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (*.f64 1/120 (pow.f64 y 4))))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (sin.f64 y) (/.f64 (*.f64 y z) x))","(/.f64 (sin.f64 y) (/.f64 z (/.f64 x y)))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))"]],"stop":[["node limit",1]],"time":56.5458984375,"type":"simplify"},{"compiler":[[2258,842]],"time":20.77294921875,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (*.f64 (sin.f64 y) (/.f64 1 y))) z)","fresh",4.054493978608799],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","next",2.7999001465266304],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","fresh",2.867815818292834],["(/.f64 x (*.f64 (/.f64 y (sin.f64 y)) z))","fresh",3.4953782327407934],["(*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z))","fresh",3.1981597428421957],["(*.f64 (/.f64 1 z) (/.f64 x (/.f64 y (sin.f64 y))))","fresh",4.307404883499021],["(/.f64 (sin.f64 y) (*.f64 z (/.f64 y x)))","fresh",12.873767698115458]],"compiler":[[13,9],[14,10],[11,7],[11,7],[13,9],[13,9],[11,7],[13,9],[14,10],[11,7],[11,7],[13,9],[13,9],[11,7]],"count":[[185,7]],"kept":[{"done":[0,0],"fresh":[7,4],"new":[177,3],"picked":[1,0]}],"min-error":[0],"time":48.923095703125,"type":"prune"},{"compiler":[[39,13]],"locations":[["(cbrt.f64 (/.f64 (sin.f64 y) y))",0.06640625,true],["(/.f64 (sin.f64 y) y)",0.13671875,false],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)",0.43566142583195644,true],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))",2.5119564457704664,true]],"time":8.10595703125,"type":"localize"},{"count":[[3,44]],"series":[["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","-inf",0.3388671875],["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","inf",0.26904296875],["(cbrt.f64 (/.f64 (sin.f64 y) y))","y","0",0.200927734375],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","-inf",0.826171875],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","inf",2.298828125],["(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","y","0",0.655029296875],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","y","-inf",2.320068359375],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","y","inf",0.488037109375],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","y","0",0.263916015625],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","z","-inf",0.241943359375],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","z","inf",0.43310546875],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","z","0",0.355224609375],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","x","-inf",0.26318359375],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","x","inf",0.406982421875],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","x","0",0.56005859375]],"time":10.123046875,"type":"series"},{"count":[[3,154]],"egraph":[[2,2954,26,0.026189082000000002],[1,240,26,0.004052999],[0,11,26,0.000303041]],"inputs":[["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","(pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)","(cbrt.f64 (/.f64 (sin.f64 y) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 z (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (/.f64 y (sin.f64 y)) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 z (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x z) (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 (/.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 z x) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 z (*.f64 x (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (*.f64 (/.f64 z x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (/.f64 y (sin.f64 y)) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 x (/.f64 (sin.f64 y) y))) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 z) (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) 1) (*.f64 (neg.f64 y) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (sin.f64 y)) (*.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (sin.f64 y)) (*.f64 (neg.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 (sin.f64 y))) (*.f64 z (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (neg.f64 (sin.f64 y))) (*.f64 (neg.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) x) (*.f64 (neg.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (neg.f64 x)) (*.f64 y (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (neg.f64 x)) (*.f64 (neg.f64 y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) (sqrt.f64 z)) (sqrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (/.f64 (sin.f64 y) y)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 y) (/.f64 x z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 y)) (/.f64 x z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (sin.f64 y)) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x z) (neg.f64 (sin.f64 y))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (sin.f64 y) y) (neg.f64 x)) (neg.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 z x) (/.f64 y (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (*.f64 x (/.f64 (sin.f64 y) y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) (*.f64 y (/.f64 z x)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 y) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 y) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sin.f64 y) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))) (*.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (*.f64 (cbrt.f64 (sin.f64 y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 1/6) (pow.f64 (/.f64 (sin.f64 y) y) 5/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 y)) (*.f64 (sqrt.f64 (sin.f64 y)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (sqrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 y)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (sin.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) 1) (/.f64 (cbrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 y)) 1) (/.f64 (sqrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (sin.f64 y) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 y)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (sin.f64 y)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/2) (/.f64 (sin.f64 y) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (sin.f64 y)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 5/6) (pow.f64 (/.f64 (sin.f64 y) y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) 1) (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)))) 2) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 y) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (sin.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 y (sin.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (/.f64 y (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sin.f64 y)) (/.f64 y (sqrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 y)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (neg.f64 (sin.f64 y))) (neg.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 y) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) (cbrt.f64 (sin.f64 y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 y) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (sin.f64 y)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 y) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (/.f64 (sin.f64 y) y))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 y (sin.f64 y)) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (sin.f64 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (sin.f64 y))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 3/2) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (/.f64 (sin.f64 y) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))) (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 y)) (/.f64 1 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (sin.f64 y) y) 1/6) (pow.f64 (/.f64 (sin.f64 y) y) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (cbrt.f64 (/.f64 y (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 y) (cbrt.f64 (sin.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (sin.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cbrt.f64 (neg.f64 (sin.f64 y))) (cbrt.f64 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cbrt.f64 (sin.f64 y))) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 y) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (sin.f64 y)) -3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 y) y) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (sin.f64 y)) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) (cbrt.f64 (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/6 (log.f64 (/.f64 (sin.f64 y) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 y) y) 2)))) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (sin.f64 y) y)) 1/3) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 y) y))) 1) 1))))))"]],"rules":[["egg-rr",41],["egg-rr",56],["egg-rr",57]],"stop":[["node limit",1]],"time":51.736083984375,"type":"rewrite"},{"count":[[198,175]],"egraph":[[5,7599,562,0.030152584000000003],[4,4209,562,0.0174165],[3,976,570,0.007362291],[2,328,572,0.002212291],[1,125,578,0.0008010410000000001],[0,50,582,0.000242791]],"inputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","1","(+.f64 1 (*.f64 -1/18 (pow.f64 y 2)))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (*.f64 -1/18 (pow.f64 y 2))))","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (+.f64 (*.f64 -53/1224720 (pow.f64 y 6)) (*.f64 -1/18 (pow.f64 y 2)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))","(fma.f64 -1/6 (*.f64 (/.f64 (*.f64 y y) z) x) (/.f64 x z))","(fma.f64 -1/6 (*.f64 x (/.f64 y (/.f64 z y))) (/.f64 x z))","(fma.f64 -1/6 (*.f64 (/.f64 x (/.f64 z y)) y) (/.f64 x z))","(fma.f64 -1/6 (*.f64 x (*.f64 (/.f64 y z) y)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (*.f64 (/.f64 (*.f64 y y) z) x) (/.f64 x z)))","(fma.f64 -1/6 (*.f64 x (/.f64 y (/.f64 z y))) (fma.f64 1/120 (*.f64 x (/.f64 (pow.f64 y 4) z)) (/.f64 x z)))","(fma.f64 -1/6 (*.f64 (/.f64 x (/.f64 z y)) y) (fma.f64 1/120 (*.f64 x (/.f64 (pow.f64 y 4) z)) (/.f64 x z)))","(+.f64 (/.f64 x z) (*.f64 (/.f64 x z) (*.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/120) -1/6))))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(fma.f64 -1/5040 (/.f64 (pow.f64 y 6) (/.f64 z x)) (fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))))","(fma.f64 -1/5040 (/.f64 (pow.f64 y 6) (/.f64 z x)) (fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (*.f64 (/.f64 (*.f64 y y) z) x) (/.f64 x z))))","(fma.f64 -1/5040 (*.f64 (/.f64 x z) (pow.f64 y 6)) (fma.f64 -1/6 (*.f64 x (/.f64 y (/.f64 z y))) (fma.f64 1/120 (*.f64 x (/.f64 (pow.f64 y 4) z)) (/.f64 x z))))","(fma.f64 -1/6 (*.f64 (/.f64 x (/.f64 z y)) y) (fma.f64 -1/5040 (*.f64 x (/.f64 (pow.f64 y 6) z)) (fma.f64 1/120 (*.f64 x (/.f64 (pow.f64 y 4) z)) (/.f64 x z))))","(+.f64 (/.f64 x z) (fma.f64 -1/5040 (*.f64 (/.f64 x z) (pow.f64 y 6)) (*.f64 (/.f64 x z) (*.f64 (*.f64 y y) (fma.f64 y (*.f64 y 1/120) -1/6)))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 y z)))","(*.f64 (sin.f64 y) (/.f64 x (*.f64 y z)))","1","(+.f64 1 (*.f64 -1/6 (pow.f64 y 2)))","(+.f64 1 (*.f64 -1/6 (*.f64 y y)))","(fma.f64 -1/6 (*.f64 y y) 1)","(fma.f64 y (*.f64 y -1/6) 1)","(+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4))))","(+.f64 1 (fma.f64 1/120 (pow.f64 y 4) (*.f64 y (*.f64 y -1/6))))","(fma.f64 y (*.f64 y -1/6) (fma.f64 1/120 (pow.f64 y 4) 1))","(+.f64 (*.f64 -1/5040 (pow.f64 y 6)) (+.f64 1 (+.f64 (*.f64 -1/6 (pow.f64 y 2)) (*.f64 1/120 (pow.f64 y 4)))))","(fma.f64 -1/5040 (pow.f64 y 6) (+.f64 1 (fma.f64 -1/6 (*.f64 y y) (*.f64 1/120 (pow.f64 y 4)))))","(+.f64 (fma.f64 1/120 (pow.f64 y 4) (*.f64 y (*.f64 y -1/6))) (fma.f64 -1/5040 (pow.f64 y 6) 1))","(fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 y (*.f64 y -1/6) (fma.f64 1/120 (pow.f64 y 4) 1)))","(fma.f64 y (*.f64 y -1/6) (fma.f64 -1/5040 (pow.f64 y 6) (fma.f64 1/120 (pow.f64 y 4) 1)))","1","(+.f64 1 (*.f64 -1/18 (pow.f64 y 2)))","(+.f64 1 (*.f64 (*.f64 y y) -1/18))","(fma.f64 (*.f64 y y) -1/18 1)","(fma.f64 y (*.f64 y -1/18) 1)","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (*.f64 -1/18 (pow.f64 y 2))))","(+.f64 1 (fma.f64 -1/3240 (pow.f64 y 4) (*.f64 (*.f64 y y) -1/18)))","(+.f64 1 (fma.f64 (pow.f64 y 4) -1/3240 (*.f64 y (*.f64 y -1/18))))","(fma.f64 y (*.f64 y -1/18) (fma.f64 (pow.f64 y 4) -1/3240 1))","(fma.f64 (*.f64 y y) (fma.f64 (*.f64 y y) -1/3240 -1/18) 1)","(+.f64 1 (+.f64 (*.f64 -1/3240 (pow.f64 y 4)) (+.f64 (*.f64 -53/1224720 (pow.f64 y 6)) (*.f64 -1/18 (pow.f64 y 2)))))","(+.f64 1 (fma.f64 -1/3240 (pow.f64 y 4) (fma.f64 -53/1224720 (pow.f64 y 6) (*.f64 (*.f64 y y) -1/18))))","(+.f64 (fma.f64 (pow.f64 y 4) -1/3240 (*.f64 (pow.f64 y 6) -53/1224720)) (fma.f64 (*.f64 y y) -1/18 1))","(+.f64 1 (fma.f64 y (*.f64 y -1/18) (fma.f64 (pow.f64 y 4) -1/3240 (*.f64 (pow.f64 y 6) -53/1224720))))","(fma.f64 (*.f64 y y) (fma.f64 (*.f64 y y) -1/3240 -1/18) (fma.f64 (pow.f64 y 6) -53/1224720 1))","(fma.f64 y (*.f64 y -1/18) (fma.f64 (pow.f64 y 6) -53/1224720 (fma.f64 (pow.f64 y 4) -1/3240 1)))"]],"stop":[["node limit",1]],"time":50.16796875,"type":"simplify"},{"compiler":[[3338,1371]],"time":32.534912109375,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (*.f64 (sin.f64 y) (/.f64 1 y))) z)","fresh",4.054493978608799],["(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","done",2.7999001465266304],["(*.f64 (/.f64 1 z) (/.f64 x (/.f64 y (sin.f64 y))))","fresh",4.307404883499021],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","next",2.867815818292834],["(/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))","fresh",3.4953782327407934],["(*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z))","fresh",3.1981597428421957],["(/.f64 (sin.f64 y) (*.f64 z (/.f64 y x)))","fresh",12.873767698115458]],"compiler":[[13,9],[14,10],[13,9],[11,7],[11,7],[13,9],[11,7],[13,9],[13,9],[11,7],[11,7],[13,9],[11,7]],"count":[[241,7]],"kept":[{"done":[0,0],"fresh":[6,4],"new":[234,2],"picked":[1,1]}],"min-error":[0],"time":80.828125,"type":"prune"},{"compiler":[[23,7]],"locations":[["(sin.f64 y)",0.0390625,false],["(/.f64 (sin.f64 y) y)",0.13671875,false],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))",2.715709764063301,true]],"time":5.365966796875,"type":"localize"},{"count":[[1,36]],"series":[["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","x","-inf",0.162109375],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","x","inf",0.175048828125],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","x","0",0.14990234375],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","z","-inf",0.18310546875],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","z","inf",0.1630859375],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","z","0",0.154052734375],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","y","-inf",0.18310546875],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","y","inf",0.16796875],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","y","0",0.259033203125]],"time":1.705078125,"type":"series"},{"count":[[1,66]],"egraph":[[2,2748,12,0.024691292],[1,178,12,0.003359792],[0,8,12,0.000182709]],"inputs":[["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) (*.f64 z y)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) (*.f64 z y))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 y) (*.f64 (/.f64 1 y) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) (pow.f64 (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) 2) (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) (sqrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (*.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (/.f64 (sin.f64 y) y)) (/.f64 1 (/.f64 (neg.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (*.f64 z y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) 1) (/.f64 (/.f64 1 y) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) 1) (/.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) 1) (/.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) z) (/.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 y)) 2) (/.f64 z x)) (/.f64 (cbrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 y)) (/.f64 z x)) (/.f64 (sqrt.f64 (sin.f64 y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) z) (/.f64 (/.f64 1 y) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 (/.f64 (sin.f64 y) y) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) z) (/.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 x -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (pow.f64 (cbrt.f64 (/.f64 z x)) 2)) (/.f64 (/.f64 1 y) (cbrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 z x)) -2) (/.f64 (/.f64 (sin.f64 y) y) (cbrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) (pow.f64 (cbrt.f64 (/.f64 z x)) 2)) (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (pow.f64 (cbrt.f64 (/.f64 z x)) 2)) (/.f64 (sqrt.f64 (/.f64 (sin.f64 y) y)) (cbrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 y) (sqrt.f64 (/.f64 z x))) (/.f64 (/.f64 1 y) (sqrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 z x) -1/2) (/.f64 (/.f64 (sin.f64 y) y) (sqrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) (sqrt.f64 (/.f64 z x))) (/.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (sqrt.f64 (/.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) 1) (/.f64 x z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 y) y) (neg.f64 z)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 y) (*.f64 z y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 y) (*.f64 z y)) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 y) (*.f64 z y)) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 z x) (/.f64 y (sin.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) (pow.f64 (/.f64 z x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y (/.f64 z x)) (sin.f64 y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (/.f64 z x) (/.f64 y (sin.f64 y))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))) 2)) (cbrt.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))) (sqrt.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (sin.f64 y) y) (/.f64 (neg.f64 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (/.f64 (sin.f64 y) (*.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 (sin.f64 y) y) 3) (pow.f64 (/.f64 z x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 z x) (/.f64 y (sin.f64 y)))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))) 1) 1))))))"]],"rules":[["egg-rr",66]],"stop":[["node limit",1]],"time":44.281005859375,"type":"rewrite"},{"count":[[102,74]],"egraph":[[6,6749,468,0.034450166000000004],[5,5940,468,0.022812999],[4,2620,472,0.012546916000000002],[3,580,478,0.00456975],[2,203,478,0.001379666],[1,75,478,0.0005430000000000001],[0,30,478,0.00015775]],"inputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))"]],"method":["egg-herbie"],"outputs":[["(/.f64 x z)","(+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))","(fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))","(fma.f64 -1/6 (/.f64 y (/.f64 (/.f64 z x) y)) (/.f64 x z))","(fma.f64 -1/6 (*.f64 (/.f64 x z) (*.f64 y y)) (/.f64 x z))","(fma.f64 -1/6 (*.f64 x (*.f64 (/.f64 y z) y)) (/.f64 x z))","(fma.f64 x (/.f64 y (/.f64 (/.f64 z -1/6) y)) (/.f64 x z))","(fma.f64 (/.f64 x z) (*.f64 -1/6 (*.f64 y y)) (/.f64 x z))","(+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z)))","(fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 y (/.f64 (/.f64 z x) y)) (/.f64 x z)))","(fma.f64 -1/6 (*.f64 (/.f64 x z) (*.f64 y y)) (fma.f64 1/120 (*.f64 (/.f64 x z) (pow.f64 y 4)) (/.f64 x z)))","(fma.f64 1/120 (*.f64 (/.f64 x z) (pow.f64 y 4)) (fma.f64 -1/6 (*.f64 x (*.f64 (/.f64 y z) y)) (/.f64 x z)))","(fma.f64 x (fma.f64 -1/6 (*.f64 (/.f64 y z) y) (*.f64 1/120 (/.f64 (pow.f64 y 4) z))) (/.f64 x z))","(fma.f64 x (*.f64 (*.f64 (/.f64 y z) y) (+.f64 -1/6 (*.f64 y (*.f64 y 1/120)))) (/.f64 x z))","(fma.f64 x (*.f64 (/.f64 (*.f64 y y) z) (+.f64 -1/6 (*.f64 y (*.f64 y 1/120)))) (/.f64 x z))","(+.f64 (*.f64 -1/5040 (/.f64 (*.f64 (pow.f64 y 6) x) z)) (+.f64 (*.f64 1/120 (/.f64 (*.f64 (pow.f64 y 4) x) z)) (+.f64 (*.f64 -1/6 (/.f64 (*.f64 (pow.f64 y 2) x) z)) (/.f64 x z))))","(fma.f64 -1/5040 (/.f64 (pow.f64 y 6) (/.f64 z x)) (fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 (*.f64 y y) (/.f64 z x)) (/.f64 x z))))","(fma.f64 -1/5040 (*.f64 (/.f64 (pow.f64 y 6) z) x) (fma.f64 1/120 (/.f64 (pow.f64 y 4) (/.f64 z x)) (fma.f64 -1/6 (/.f64 y (/.f64 (/.f64 z x) y)) (/.f64 x z))))","(fma.f64 -1/5040 (*.f64 x (/.f64 (pow.f64 y 6) z)) (fma.f64 -1/6 (*.f64 (/.f64 x z) (*.f64 y y)) (fma.f64 1/120 (*.f64 (/.f64 x z) (pow.f64 y 4)) (/.f64 x z))))","(fma.f64 -1/5040 (*.f64 (/.f64 x z) (pow.f64 y 6)) (fma.f64 1/120 (*.f64 (/.f64 x z) (pow.f64 y 4)) (fma.f64 -1/6 (*.f64 x (*.f64 (/.f64 y z) y)) (/.f64 x z))))","(fma.f64 x (fma.f64 -1/6 (*.f64 (/.f64 y z) y) (*.f64 (/.f64 -1/5040 z) (pow.f64 y 6))) (fma.f64 (*.f64 1/120 (/.f64 x z)) (pow.f64 y 4) (/.f64 x z)))","(+.f64 (/.f64 x z) (*.f64 (/.f64 x z) (+.f64 (*.f64 -1/6 (*.f64 y y)) (+.f64 (*.f64 1/120 (pow.f64 y 4)) (*.f64 -1/5040 (pow.f64 y 6))))))","(+.f64 (/.f64 x z) (*.f64 (/.f64 x z) (+.f64 (*.f64 -1/6 (*.f64 y y)) (*.f64 (pow.f64 y 4) (+.f64 (*.f64 (*.f64 y y) -1/5040) 1/120)))))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))","(/.f64 (*.f64 (sin.f64 y) x) (*.f64 y z))","(*.f64 (/.f64 (sin.f64 y) y) (/.f64 x z))","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z))","(*.f64 x (/.f64 (sin.f64 y) (*.f64 z y)))"]],"stop":[["node limit",1]],"time":52.96484375,"type":"simplify"},{"compiler":[[2345,870]],"time":21.18603515625,"type":"eval"},{"alts":[["(*.f64 (/.f64 1 z) (/.f64 x (/.f64 y (sin.f64 y))))","fresh",4.307404883499021],["(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","done",2.867815818292834],["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))","fresh",2.809997656295072],["(*.f64 (sin.f64 y) (*.f64 (/.f64 1 y) (/.f64 x z)))","fresh",9.732753759768443],["(/.f64 (*.f64 x (*.f64 (sin.f64 y) (/.f64 1 y))) z)","fresh",4.054493978608799],["(*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z))","fresh",3.1981597428421957]],"compiler":[[13,9],[11,7],[20,11],[13,9],[13,9],[13,9]],"count":[[177,6]],"kept":[{"done":[1,0],"fresh":[5,3],"new":[170,2],"picked":[1,1]}],"min-error":[0],"time":43.81689453125,"type":"prune"},{"accuracy":[0.146816259768442],"baseline":[2.668632519536884],"branch":[["x",0.150722509768442,3],["y",1.1477004651852925,2],["z",0.17806625976844204,3],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)",0.9186325195368841,2],["(*.f64 x (/.f64 (sin.f64 y) y))",0.146816259768442,3],["(/.f64 (sin.f64 y) y)",1.6241416332554086,3],["(/.f64 (sin.f64 y) y)",1.6241416332554086,3]],"compiler":[[4,3],[4,3],[4,3],[11,7],[9,6],[7,5],[7,5],[158,53]],"count":[[16,3]],"inputs":[["(*.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 2) (*.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) (/.f64 x z)))","(*.f64 (sin.f64 y) (*.f64 (/.f64 1 y) (/.f64 x z)))","(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","(/.f64 x (*.f64 z (/.f64 y (sin.f64 y))))","(*.f64 (/.f64 x z) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3))","(/.f64 (/.f64 (sin.f64 y) y) (/.f64 z x))","(/.f64 x (*.f64 (/.f64 y (sin.f64 y)) z))","(/.f64 (*.f64 x (*.f64 (sin.f64 y) (/.f64 1 y))) z)","(*.f64 (/.f64 x z) (/.f64 (sin.f64 y) y))","(*.f64 (/.f64 1 z) (/.f64 x (/.f64 y (sin.f64 y))))","(+.f64 0 (/.f64 x (*.f64 z (/.f64 y (sin.f64 y)))))","(/.f64 (*.f64 x (pow.f64 (cbrt.f64 (/.f64 (sin.f64 y) y)) 3)) z)","(pow.f64 (*.f64 (/.f64 y (sin.f64 y)) (/.f64 z x)) -1)","(*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z))","(/.f64 (sin.f64 y) (*.f64 z (/.f64 y x)))","(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)"]],"link":["."],"name":["Linear.Quaternion:$ctanh from linear-1.19.1.3"],"oracle":[19.08440066521261],"outputs":[["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)","(*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z))","(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)"]],"time":108.7861328125,"times":[["x",17.0009765625],["y",11.468994140625],["z",22.451171875],["(/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)",9.807861328125],["(*.f64 x (/.f64 (sin.f64 y) y))",15.515869140625],["(/.f64 (sin.f64 y) y)",14.9150390625],["(/.f64 (sin.f64 y) y)",14.72802734375]],"type":"regimes"},{"bstep":[[1.0478e-319,4.541761643601979e-301,0.032958984375],[-8.581279932091765e-285,-4.181801992125311e-287,0.101806640625]],"compiler":[[8,6],[9,6]],"method":["left-value","left-value"],"time":0.2509765625,"type":"bsearch"},{"compiler":[[45,15]],"egraph":[[1,24,64,7.1666e-5],[0,19,64,4.0416e-5]],"inputs":[["(if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) -6696928794914171/1339385758982834151185531311325002263201756014631917009304687985462938813906170153116497973519619822659493341146941433531483931607115392554498072196837321850491820971853028873177634325632796392734744272769130809372947742658424845944895692993259632864321399559710817770957553728956578048354650708508672) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z) (if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1265/6325070415853456823515479584966165845298645305129441198653167438357198111499854590373761990669910140474596183259900372230931523043306046152094168748148078435047419508642698792639590866940413010663742739952273283392562733857021646831815729864036236135650314266011211548510419206725953204130822734645187695728365866909171712) (*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z)) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) -6696928794914171/1339385758982834151185531311325002263201756014631917009304687985462938813906170153116497973519619822659493341146941433531483931607115392554498072196837321850491820971853028873177634325632796392734744272769130809372947742658424845944895692993259632864321399559710817770957553728956578048354650708508672) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z) (if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1265/6325070415853456823515479584966165845298645305129441198653167438357198111499854590373761990669910140474596183259900372230931523043306046152094168748148078435047419508642698792639590866940413010663742739952273283392562733857021646831815729864036236135650314266011211548510419206725953204130822734645187695728365866909171712) (*.f64 (/.f64 x 1) (/.f64 (/.f64 (sin.f64 y) y) z)) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)))","(if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) -6696928794914171/1339385758982834151185531311325002263201756014631917009304687985462938813906170153116497973519619822659493341146941433531483931607115392554498072196837321850491820971853028873177634325632796392734744272769130809372947742658424845944895692993259632864321399559710817770957553728956578048354650708508672) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z) (if (<=.f64 (*.f64 x (/.f64 (sin.f64 y) y)) 1265/6325070415853456823515479584966165845298645305129441198653167438357198111499854590373761990669910140474596183259900372230931523043306046152094168748148078435047419508642698792639590866940413010663742739952273283392562733857021646831815729864036236135650314266011211548510419206725953204130822734645187695728365866909171712) (*.f64 x (/.f64 (/.f64 (sin.f64 y) y) z)) (/.f64 (*.f64 x (/.f64 (sin.f64 y) y)) z)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.943115234375,"type":"simplify"},{"time":0.005859375,"type":"soundness"},{"compiler":[[45,15]],"remove-preprocessing":[[]],"time":10.31396484375,"type":"end"}]
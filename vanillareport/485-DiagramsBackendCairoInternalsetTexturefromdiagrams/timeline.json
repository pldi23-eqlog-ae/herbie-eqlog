[{"compiler":[[11,7]],"method":["search"],"sampling":[[12,0.38810280938764663,0.5421737739184209,0.06972341669393245],[11,0.25353449859494503,0.7059960653182316,0.04046943608682341],[10,0.19502653738072695,0.7645040265324496,0.04046943608682341],[9,0.1404191069141234,0.8425146414847404,0.017066251601136173],[8,0.031204245980916312,0.9673316254084057,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":99.7470703125,"type":"analyze"},{"outcomes":[["body",256,"invalid",35.764404296875,933],["body",256,"valid",314.235595703125,8256]],"time":359.35498046875,"type":"sample"},{"compiler":[[10,6]],"egraph":[[0,3,3,2.084e-6],[7,7041,40,0.036173458],[6,3565,40,0.023328333],[5,1099,40,0.00936625],[4,451,40,0.003030792],[3,209,40,0.00116175],[2,83,40,0.00048225000000000004],[1,35,40,0.00018187500000000002],[0,16,40,6.7792e-5]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x (-.f64 y z)) y)","(/.f64 (*.f64 y (-.f64 x z)) x)","(/.f64 (*.f64 z (-.f64 y x)) y)","(/.f64 (*.f64 x (-.f64 z y)) z)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x (-.f64 y z)) y)","(/.f64 x (/.f64 y (-.f64 y z)))","(*.f64 (/.f64 x y) (-.f64 y z))","(*.f64 (/.f64 (-.f64 y z) y) x)","(*.f64 (-.f64 y z) (/.f64 x y))","(-.f64 x (*.f64 z (/.f64 x y)))","(/.f64 (*.f64 y (-.f64 x z)) x)","(/.f64 y (/.f64 x (-.f64 x z)))","(*.f64 (/.f64 y x) (-.f64 x z))","(*.f64 (-.f64 x z) (/.f64 y x))","(/.f64 (-.f64 x z) (/.f64 x y))","(-.f64 y (/.f64 z (/.f64 x y)))","(-.f64 y (*.f64 y (/.f64 z x)))","(/.f64 (*.f64 z (-.f64 y x)) y)","(/.f64 z (/.f64 y (-.f64 y x)))","(*.f64 (/.f64 z y) (-.f64 y x))","(*.f64 (-.f64 y x) (/.f64 z y))","(*.f64 z (/.f64 (-.f64 y x) y))","(/.f64 (-.f64 y x) (/.f64 y z))","(-.f64 z (*.f64 z (/.f64 x y)))","(/.f64 (*.f64 x (-.f64 z y)) z)","(/.f64 x (/.f64 z (-.f64 z y)))","(*.f64 (/.f64 x z) (-.f64 z y))","(*.f64 (-.f64 z y) (/.f64 x z))","(-.f64 x (*.f64 x (/.f64 y z)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":59.26513671875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[8,6019,10,0.025882249],[7,1254,10,0.014242623999999999],[6,438,10,0.0037320820000000003],[5,240,10,0.001662124],[4,132,10,0.000878082],[3,60,10,0.00041154099999999997],[2,27,10,0.000190332],[1,12,10,8.9041e-5],[0,7,10,3.6958e-5]],"inputs":[["(/.f64 (*.f64 x (-.f64 y z)) y)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (-.f64 y z)) y)","(/.f64 x (/.f64 y (-.f64 y z)))","(*.f64 (/.f64 x y) (-.f64 y z))","(*.f64 (-.f64 y z) (/.f64 x y))","(*.f64 x (/.f64 (-.f64 y z) y))","(-.f64 x (*.f64 z (/.f64 x y)))"]],"stop":[["node limit",1]],"time":37.66796875,"type":"simplify"},{"compiler":[[17,9]],"time":0.306884765625,"type":"eval"},{"alts":[["(-.f64 x (*.f64 z (/.f64 x y)))","next",5.545568951075212],["(/.f64 (*.f64 x (-.f64 y z)) y)","fresh",10.02188919949729]],"compiler":[[10,6],[10,6],[10,6],[10,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0625],"time":1.13916015625,"type":"prune"},{"compiler":[[21,6]],"locations":[["(-.f64 x (*.f64 z (/.f64 x y)))",0.01171875,true],["(*.f64 z (/.f64 x y))",6.103386878261356,true]],"time":4.057861328125,"type":"localize"},{"count":[[2,72]],"series":[["(-.f64 x (*.f64 z (/.f64 x y)))","y","-inf",0.190185546875],["(-.f64 x (*.f64 z (/.f64 x y)))","y","inf",0.156982421875],["(-.f64 x (*.f64 z (/.f64 x y)))","y","0",0.1669921875],["(-.f64 x (*.f64 z (/.f64 x y)))","z","-inf",0.19091796875],["(-.f64 x (*.f64 z (/.f64 x y)))","z","inf",0.1689453125],["(-.f64 x (*.f64 z (/.f64 x y)))","z","0",0.19287109375],["(-.f64 x (*.f64 z (/.f64 x y)))","x","-inf",0.194091796875],["(-.f64 x (*.f64 z (/.f64 x y)))","x","inf",0.6630859375],["(-.f64 x (*.f64 z (/.f64 x y)))","x","0",0.177001953125],["(*.f64 z (/.f64 x y))","y","-inf",0.31103515625],["(*.f64 z (/.f64 x y))","y","inf",0.324951171875],["(*.f64 z (/.f64 x y))","y","0",0.390869140625],["(*.f64 z (/.f64 x y))","x","-inf",0.302978515625],["(*.f64 z (/.f64 x y))","x","inf",0.509033203125],["(*.f64 z (/.f64 x y))","x","0",0.4091796875],["(*.f64 z (/.f64 x y))","z","-inf",0.31103515625],["(*.f64 z (/.f64 x y))","z","inf",0.486083984375],["(*.f64 z (/.f64 x y))","z","0",0.5849609375]],"time":5.928955078125,"type":"series"},{"count":[[2,59]],"egraph":[[2,2408,17,0.021612500000000003],[1,160,17,0.0030912080000000002],[0,7,17,0.000167833]],"inputs":[["(*.f64 z (/.f64 x y))","(-.f64 x (*.f64 z (/.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) z) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 z (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 z (/.f64 x y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 z (/.f64 x y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 z (/.f64 x y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 z (/.f64 x y))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (*.f64 (neg.f64 z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 (*.f64 (neg.f64 z) x) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 z (/.f64 x y))) (fma.f64 (neg.f64 (/.f64 x y)) z (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 z (/.f64 x y))) (fma.f64 (neg.f64 z) (/.f64 x y) (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 z (/.f64 x y))) (fma.f64 (/.f64 (*.f64 (neg.f64 z) x) y) 1 (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 z (/.f64 x y))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 z (/.f64 x y)))) (pow.f64 (cbrt.f64 (*.f64 z (/.f64 x y))) 2) (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 z (/.f64 x y))) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 z (/.f64 x y)))) (sqrt.f64 (*.f64 z (/.f64 x y))) (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (*.f64 (neg.f64 z) x) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (*.f64 z (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))) (pow.f64 (cbrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))) 2) (cbrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))) (sqrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (/.f64 x y)) 3)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 z (/.f64 x y)) (+.f64 x (*.f64 z (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (/.f64 x y)) 2)) (/.f64 1 (+.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 z (/.f64 x y)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 z (/.f64 x y)) (+.f64 x (*.f64 z (/.f64 x y))))) (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (/.f64 x y)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (*.f64 z (/.f64 x y))) (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (/.f64 x y)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (/.f64 x y)) 3)) (fma.f64 x x (*.f64 (*.f64 z (/.f64 x y)) (+.f64 x (*.f64 z (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (/.f64 x y)) 2)) (+.f64 x (*.f64 z (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 z (/.f64 x y)) 3))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 z (/.f64 x y)) (+.f64 x (*.f64 z (/.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 z (/.f64 x y)) 2))) (neg.f64 (+.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (*.f64 (neg.f64 z) x) y) 3)) (+.f64 (*.f64 x x) (-.f64 (*.f64 (/.f64 (*.f64 (neg.f64 z) x) y) (/.f64 (*.f64 (neg.f64 z) x) y)) (*.f64 x (/.f64 (*.f64 (neg.f64 z) x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (*.f64 (neg.f64 z) x) y) (/.f64 (*.f64 (neg.f64 z) x) y))) (-.f64 x (/.f64 (*.f64 (neg.f64 z) x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (*.f64 z (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (*.f64 z (/.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 x (*.f64 z (/.f64 x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 x (*.f64 z (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 x (*.f64 z (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (*.f64 z (/.f64 x y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 x (*.f64 z (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (*.f64 (neg.f64 z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (/.f64 (*.f64 (neg.f64 z) x) y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (/.f64 (*.f64 (neg.f64 z) x) y))))))"]],"rules":[["egg-rr",38],["egg-rr",21]],"stop":[["node limit",1]],"time":43.047119140625,"type":"rewrite"},{"count":[[131,67]],"egraph":[[11,1412,582,0.020316459],[10,1407,582,0.017677834],[9,1393,582,0.015048750000000001],[8,1274,582,0.012322167000000002],[7,1079,582,0.009327542000000001],[6,803,582,0.006299375000000001],[5,410,582,0.0041049580000000006],[4,224,582,0.002083792],[3,116,582,0.0009897080000000002],[2,66,582,0.0005485830000000001],[1,35,582,0.000276042],[0,16,582,0.000117875]],"inputs":[["(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(/.f64 (*.f64 (neg.f64 z) x) y)","(*.f64 x (/.f64 (neg.f64 z) y))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(/.f64 (*.f64 (neg.f64 z) x) y)","(*.f64 x (/.f64 (neg.f64 z) y))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(/.f64 (*.f64 (neg.f64 z) x) y)","(*.f64 x (/.f64 (neg.f64 z) y))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))"]],"stop":[["saturated",1]],"time":44.80908203125,"type":"simplify"},{"compiler":[[895,246]],"time":7.65087890625,"type":"eval"},{"alts":[["(-.f64 x (*.f64 z (/.f64 x y)))","done",5.545568951075212],["(*.f64 (-.f64 1 (/.f64 z y)) x)","fresh",3.58984375],["(-.f64 x (/.f64 (*.f64 z x) y))","next",3.3422763704092318],["(-.f64 x (/.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y)))","fresh",3.52690395832521],["(-.f64 x (/.f64 1 (/.f64 y (*.f64 z x))))","fresh",3.3500888704092318],["(-.f64 x (/.f64 z (/.f64 y x)))","fresh",4.8954908180213375]],"compiler":[[10,6],[10,7],[10,6],[16,10],[12,8],[10,6],[10,7],[10,6],[16,10],[12,8],[10,6]],"count":[[69,6]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[67,5],"picked":[1,1]}],"min-error":[0.00390625],"time":12.77490234375,"type":"prune"},{"compiler":[[21,6]],"locations":[["(-.f64 x (/.f64 (*.f64 z x) y))",0.01171875,true],["(/.f64 (*.f64 z x) y)",4.349583536924708,true]],"time":4.076171875,"type":"localize"},{"count":[[2,36]],"series":[["(-.f64 x (/.f64 (*.f64 z x) y))","y","-inf",0.14501953125],["(-.f64 x (/.f64 (*.f64 z x) y))","y","inf",0.173828125],["(-.f64 x (/.f64 (*.f64 z x) y))","y","0",0.15087890625],["(-.f64 x (/.f64 (*.f64 z x) y))","z","-inf",0.14990234375],["(-.f64 x (/.f64 (*.f64 z x) y))","z","inf",0.174072265625],["(-.f64 x (/.f64 (*.f64 z x) y))","z","0",0.14501953125],["(-.f64 x (/.f64 (*.f64 z x) y))","x","-inf",0.178955078125],["(-.f64 x (/.f64 (*.f64 z x) y))","x","inf",0.144775390625],["(-.f64 x (/.f64 (*.f64 z x) y))","x","0",0.14697265625],["(/.f64 (*.f64 z x) y)","y","-inf",0.173095703125],["(/.f64 (*.f64 z x) y)","y","inf",0.143798828125],["(/.f64 (*.f64 z x) y)","y","0",0.14013671875],["(/.f64 (*.f64 z x) y)","x","-inf",0.177978515625],["(/.f64 (*.f64 z x) y)","x","inf",0.14990234375],["(/.f64 (*.f64 z x) y)","x","0",0.152099609375],["(/.f64 (*.f64 z x) y)","z","-inf",0.156005859375],["(/.f64 (*.f64 z x) y)","z","inf",0.166015625],["(/.f64 (*.f64 z x) y)","z","0",0.19482421875]],"time":3.044921875,"type":"series"},{"count":[[2,78]],"egraph":[[2,2400,17,0.021574916],[1,157,17,0.003045875],[0,7,17,0.000162625]],"inputs":[["(/.f64 (*.f64 z x) y)","(-.f64 x (/.f64 (*.f64 z x) y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 z y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (/.f64 1 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (*.f64 x (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (*.f64 z (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 z y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 z y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 2) (cbrt.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (*.f64 (cbrt.f64 (*.f64 z x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 z y) x)) (sqrt.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 z x)) (*.f64 (sqrt.f64 (*.f64 z x)) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z 1) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z y) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 z x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 z x)) 1) (/.f64 (sqrt.f64 (*.f64 z x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (pow.f64 (cbrt.f64 y) 2)) (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (*.f64 z x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 y)) (/.f64 z (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 y)) (/.f64 (*.f64 z x) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 z y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 z y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y x) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 z x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (/.f64 z y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 z y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 z y) x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (/.f64 (neg.f64 z) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (/.f64 (neg.f64 z) (/.f64 y x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 (/.f64 z y) x)) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 (/.f64 z y) x)) (fma.f64 (/.f64 (neg.f64 z) (/.f64 y x)) 1 (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 (/.f64 z y) x)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 (/.f64 z y) x))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 z y) x)) 2) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (*.f64 (/.f64 z y) x)) (fma.f64 (neg.f64 (sqrt.f64 (*.f64 (/.f64 z y) x))) (sqrt.f64 (*.f64 (/.f64 z y) x)) (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (neg.f64 z) (/.f64 y x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (*.f64 (/.f64 z y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))) (pow.f64 (cbrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))) 2) (cbrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))) (sqrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 z y) x) 3)) (/.f64 1 (fma.f64 x x (*.f64 (*.f64 (/.f64 z y) x) (+.f64 x (*.f64 (/.f64 z y) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (/.f64 z y) x) 2)) (/.f64 1 (+.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 z y) x))) (-.f64 (sqrt.f64 x) (sqrt.f64 (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (*.f64 (/.f64 z y) x) (+.f64 x (*.f64 (/.f64 z y) x)))) (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 z y) x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (*.f64 (/.f64 z y) x)) (-.f64 (*.f64 x x) (pow.f64 (*.f64 (/.f64 z y) x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 z y) x) 3)) (fma.f64 x x (*.f64 (*.f64 (/.f64 z y) x) (+.f64 x (*.f64 (/.f64 z y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (/.f64 z y) x) 2)) (+.f64 x (*.f64 (/.f64 z y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (pow.f64 (*.f64 (/.f64 z y) x) 3))) (neg.f64 (fma.f64 x x (*.f64 (*.f64 (/.f64 z y) x) (+.f64 x (*.f64 (/.f64 z y) x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (*.f64 (/.f64 z y) x) 2))) (neg.f64 (+.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (/.f64 (neg.f64 z) (/.f64 y x)) 3)) (+.f64 (*.f64 x x) (-.f64 (*.f64 (/.f64 (neg.f64 z) (/.f64 y x)) (/.f64 (neg.f64 z) (/.f64 y x))) (*.f64 x (/.f64 (neg.f64 z) (/.f64 y x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (*.f64 (/.f64 (neg.f64 z) (/.f64 y x)) (/.f64 (neg.f64 z) (/.f64 y x)))) (-.f64 x (/.f64 (neg.f64 z) (/.f64 y x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (*.f64 (/.f64 z y) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (*.f64 (/.f64 z y) x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 x (*.f64 (/.f64 z y) x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 x (*.f64 (/.f64 z y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 x (*.f64 (/.f64 z y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (*.f64 (/.f64 z y) x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 x (*.f64 (/.f64 z y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (/.f64 (neg.f64 z) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (/.f64 (neg.f64 z) (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (/.f64 (neg.f64 z) (/.f64 y x)))))))"]],"rules":[["egg-rr",37],["egg-rr",41]],"stop":[["node limit",1]],"time":43.87890625,"type":"rewrite"},{"count":[[114,85]],"egraph":[[11,1411,330,0.020120000000000002],[10,1406,330,0.017498125000000003],[9,1392,330,0.014868917000000002],[8,1273,330,0.012153834000000002],[7,1078,330,0.009177500000000002],[6,804,330,0.006140792000000001],[5,410,330,0.003943542],[4,224,330,0.001954667],[3,116,330,0.0008962919999999999],[2,66,330,0.000476875],[1,35,330,0.000233583],[0,16,330,9.8208e-5]],"inputs":[["(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 (/.f64 z y) (neg.f64 x))","(/.f64 x (/.f64 y (neg.f64 z)))","(/.f64 (*.f64 x (neg.f64 z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 (/.f64 z y) (neg.f64 x))","(/.f64 x (/.f64 y (neg.f64 z)))","(/.f64 (*.f64 x (neg.f64 z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 z (/.f64 y x)))","(/.f64 (neg.f64 z) (/.f64 y x))","(*.f64 (/.f64 z y) (neg.f64 x))","(/.f64 x (/.f64 y (neg.f64 z)))","(/.f64 (*.f64 x (neg.f64 z)) y)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(-.f64 x (*.f64 (/.f64 x y) z))","(-.f64 x (*.f64 (/.f64 z y) x))","(fma.f64 x (/.f64 (neg.f64 z) y) x)"]],"stop":[["saturated",1]],"time":38.754150390625,"type":"simplify"},{"compiler":[[1152,349]],"time":9.203857421875,"type":"eval"},{"alts":[["(-.f64 x (*.f64 z (/.f64 x y)))","done",5.545568951075212],["(-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y))))","next",3.0482789062950726],["(-.f64 x (*.f64 z (*.f64 x (/.f64 1 y))))","fresh",5.549475201075212],["(-.f64 x (*.f64 (/.f64 z y) x))","fresh",3.5859375],["(-.f64 x (/.f64 (*.f64 z x) y))","done",3.3422763704092318],["(-.f64 x (/.f64 1 (/.f64 y (*.f64 z x))))","fresh",3.3500888704092318]],"compiler":[[10,6],[16,10],[12,8],[10,6],[10,6],[12,8],[16,10],[12,8],[10,6],[12,8]],"count":[[91,6]],"kept":[{"done":[1,1],"fresh":[4,1],"new":[85,3],"picked":[1,1]}],"min-error":[0],"time":18.316162109375,"type":"prune"},{"compiler":[[47,20]],"locations":[["(/.f64 x (cbrt.f64 y))",0.2265625,true],["(/.f64 z (pow.f64 (cbrt.f64 y) 2))",0.26171875,true],["(pow.f64 (cbrt.f64 y) 2)",0.47884750976844204,true],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))",4.598577014412183,true]],"time":10.676025390625,"type":"localize"},{"count":[[4,60]],"series":[["(/.f64 x (cbrt.f64 y))","y","-inf",0.409912109375],["(/.f64 x (cbrt.f64 y))","y","inf",0.301025390625],["(/.f64 x (cbrt.f64 y))","y","0",0.31298828125],["(/.f64 x (cbrt.f64 y))","x","-inf",0.287109375],["(/.f64 x (cbrt.f64 y))","x","inf",0.261962890625],["(/.f64 x (cbrt.f64 y))","x","0",1.4189453125],["(/.f64 z (pow.f64 (cbrt.f64 y) 2))","y","-inf",0.444091796875],["(/.f64 z (pow.f64 (cbrt.f64 y) 2))","y","inf",0.30517578125],["(/.f64 z (pow.f64 (cbrt.f64 y) 2))","y","0",0.323974609375],["(/.f64 z (pow.f64 (cbrt.f64 y) 2))","z","-inf",0.2939453125],["(/.f64 z (pow.f64 (cbrt.f64 y) 2))","z","inf",0.35498046875],["(/.f64 z (pow.f64 (cbrt.f64 y) 2))","z","0",1.68408203125],["(pow.f64 (cbrt.f64 y) 2)","y","-inf",1.43798828125],["(pow.f64 (cbrt.f64 y) 2)","y","inf",0.386962890625],["(pow.f64 (cbrt.f64 y) 2)","y","0",0.470947265625],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","x","-inf",0.22705078125],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","x","inf",0.2451171875],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","x","0",0.962890625],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","y","-inf",1.637939453125],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","y","inf",0.448974609375],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","y","0",0.945068359375],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","z","-inf",0.248046875],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","z","inf",0.237060546875],["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","z","0",1.380859375]],"time":15.31201171875,"type":"series"},{"count":[[4,191]],"egraph":[[2,2928,28,0.026731083000000003],[1,218,28,0.003860167],[0,10,28,0.00026525]],"inputs":[["(*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))","(pow.f64 (cbrt.f64 y) 2)","(/.f64 z (pow.f64 (cbrt.f64 y) 2))","(/.f64 x (cbrt.f64 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 z x) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 z x) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 z x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 z x) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 z x) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (*.f64 z x) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (*.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 (cbrt.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (*.f64 (/.f64 (cbrt.f64 y) x) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2)) (/.f64 (cbrt.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (*.f64 (cbrt.f64 y) (/.f64 (pow.f64 (cbrt.f64 y) 2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 x (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 y) 2) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) z) (/.f64 (cbrt.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 (cbrt.f64 y) x) (/.f64 (pow.f64 (cbrt.f64 y) 2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 (*.f64 z x) (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 y) (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 x) (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) z) (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 z) (*.f64 (/.f64 (cbrt.f64 y) x) (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 z x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 z x) (cbrt.f64 y))) (neg.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2))) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) 1) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (cbrt.f64 y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 1) (*.f64 (neg.f64 (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 y) 2) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) x) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z (neg.f64 x)) (*.f64 (pow.f64 (cbrt.f64 y) 2) (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (neg.f64 x)) (*.f64 (neg.f64 (pow.f64 (cbrt.f64 y) 2)) (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) z) (*.f64 (neg.f64 (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 z)) (*.f64 (cbrt.f64 y) (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (neg.f64 z)) (*.f64 (neg.f64 (cbrt.f64 y)) (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (cbrt.f64 y)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) 1) (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2)) 1) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2)) (pow.f64 y 1/6)) (pow.f64 y 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) (/.f64 x (cbrt.f64 y))) (neg.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) (*.f64 z (pow.f64 (cbrt.f64 y) -2))) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2)) (neg.f64 x)) (neg.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (neg.f64 z)) (neg.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 z x) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 z x) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 z x) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 z x) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 z x) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) z) (/.f64 (cbrt.f64 y) x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (cbrt.f64 y) x) (/.f64 (pow.f64 (cbrt.f64 y) 2) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 z x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 (*.f64 z x) (cbrt.f64 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (*.f64 z x) y))) 2)) (cbrt.f64 (log.f64 (/.f64 (*.f64 z x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (*.f64 z x) y)))) (sqrt.f64 (log.f64 (/.f64 (*.f64 z x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 z x) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 z x) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 z x) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (*.f64 z x) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 z x) y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (*.f64 z x) y))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (*.f64 z x) y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (*.f64 z x) y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (*.f64 z x) y)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 y) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 y) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (pow.f64 y 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y 1/6) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 5) (cbrt.f64 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 y (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 y) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 y y)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (*.f64 2/3 (log.f64 y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 y) 1) 2/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 y) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (cbrt.f64 y)) 1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (*.f64 2/3 (log.f64 y)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 z (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (pow.f64 (cbrt.f64 y) -2))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 z) (pow.f64 (cbrt.f64 y) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (pow.f64 (cbrt.f64 y) -2)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 z) (pow.f64 (cbrt.f64 y) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 z (pow.f64 (cbrt.f64 y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 z (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z z)) (*.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2))) (cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 4)) (cbrt.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 z) (*.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) (/.f64 (sqrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 z) (/.f64 1 (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 y)) (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) z)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) (cbrt.f64 y)) (/.f64 (cbrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) 1) (/.f64 (cbrt.f64 z) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) 1) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2) -2) (/.f64 z (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 z z)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)) (cbrt.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 4)) (/.f64 (sqrt.f64 z) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 z 3) (*.f64 y y)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) z) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y)))) 2)) (cbrt.f64 (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y))))) (sqrt.f64 (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 z (neg.f64 (pow.f64 (cbrt.f64 y) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 z) (pow.f64 (cbrt.f64 y) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 6))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 z 3) (*.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y)) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 z (pow.f64 (cbrt.f64 y) -2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sqrt.f64 z) (cbrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (*.f64 2/3 (log.f64 y)) (log.f64 z)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (-.f64 (log.f64 z) (*.f64 2/3 (log.f64 y))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 x (cbrt.f64 y)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 x (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (cbrt.f64 y))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (cbrt.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (cbrt.f64 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 x (/.f64 1 (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (/.f64 1 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) (pow.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) 2) (cbrt.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (/.f64 1 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (cbrt.f64 y))) (sqrt.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 x) (/.f64 1 (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x x)) 1) (/.f64 (cbrt.f64 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) 1) (/.f64 (sqrt.f64 x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 y)) -2) (/.f64 x (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x x)) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (cbrt.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 x) (pow.f64 (cbrt.f64 (cbrt.f64 y)) 2)) (/.f64 (sqrt.f64 x) (cbrt.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/6) (/.f64 x (pow.f64 y 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 x x)) (pow.f64 y 1/6)) (/.f64 (cbrt.f64 x) (pow.f64 y 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (cbrt.f64 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (cbrt.f64 y)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (cbrt.f64 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (cbrt.f64 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 y) x) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 x 3) y) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cbrt.f64 y) x) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 x (cbrt.f64 y)))) 2)) (cbrt.f64 (log.f64 (/.f64 x (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 x (cbrt.f64 y))))) (sqrt.f64 (log.f64 (/.f64 x (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 x (neg.f64 (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (cbrt.f64 y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (cbrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 x (cbrt.f64 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 x 3) y))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (cbrt.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (cbrt.f64 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 x (cbrt.f64 y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 x (cbrt.f64 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 x (cbrt.f64 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (cbrt.f64 y) x)) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 x (cbrt.f64 y))) 1) 1))))))"]],"rules":[["egg-rr",47],["egg-rr",47],["egg-rr",27],["egg-rr",70]],"stop":[["node limit",1]],"time":56.077880859375,"type":"rewrite"},{"count":[[251,196]],"egraph":[[12,7223,504,0.05943741600000001],[11,6435,504,0.048292707000000004],[10,5887,504,0.03860916600000001],[9,5517,504,0.030565416000000005],[8,5216,504,0.023874124000000004],[7,4329,504,0.017795666],[6,2116,504,0.011138416000000002],[5,993,504,0.005485833000000001],[4,305,504,0.00249525],[3,122,504,0.001063375],[2,60,504,0.000541208],[1,35,504,0.00028129100000000003],[0,16,504,0.00011925]],"inputs":[["(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(/.f64 (*.f64 z x) y)","(/.f64 z (/.f64 y x))","(*.f64 (/.f64 z y) x)","(*.f64 z (/.f64 x y))","(*.f64 x (/.f64 z y))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 (pow.f64 y 2)) 1/3) z)","(*.f64 z (cbrt.f64 (/.f64 1 (*.f64 y y))))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))","(*.f64 (pow.f64 (/.f64 1 y) 1/3) x)","(*.f64 x (cbrt.f64 (/.f64 1 y)))"]],"stop":[["node limit",1]],"time":85.885009765625,"type":"simplify"},{"compiler":[[3153,1403]],"time":28.77294921875,"type":"eval"},{"alts":[["(-.f64 x (*.f64 x (/.f64 z y)))","fresh",3.5859375],["(-.f64 x (*.f64 z (/.f64 x y)))","done",5.545568951075212],["(-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y))))","done",3.0482789062950726],["(-.f64 x (*.f64 z (*.f64 x (/.f64 1 y))))","fresh",5.549475201075212],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","next",3.3500888704092318],["(-.f64 x (/.f64 (*.f64 z x) y))","done",3.3422763704092318]],"compiler":[[10,6],[10,6],[16,10],[12,8],[12,8],[10,6],[10,6],[12,8],[12,8]],"count":[[202,6]],"kept":[{"done":[2,2],"fresh":[3,1],"new":[196,2],"picked":[1,1]}],"min-error":[0],"time":63.093017578125,"type":"prune"},{"compiler":[[31,11]],"locations":[["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))",0.01171875,true],["(pow.f64 (/.f64 y (*.f64 z x)) -1)",0.7334613748230825,true],["(/.f64 y (*.f64 z x))",4.186398974117403,true]],"time":6.110107421875,"type":"localize"},{"count":[[3,72]],"series":[["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","z","-inf",0.18798828125],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","z","inf",0.158935546875],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","z","0",0.156982421875],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","y","-inf",0.177978515625],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","y","inf",0.1689453125],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","y","0",0.184814453125],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","x","-inf",0.1689453125],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","x","inf",0.18994140625],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","x","0",0.166015625],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","x","-inf",0.403076171875],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","x","inf",0.294921875],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","x","0",0.33203125],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","z","-inf",0.406005859375],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","z","inf",0.299072265625],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","z","0",2.510009765625],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","y","-inf",0.41015625],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","y","inf",0.306884765625],["(pow.f64 (/.f64 y (*.f64 z x)) -1)","y","0",0.431884765625],["(/.f64 y (*.f64 z x))","x","-inf",0.29296875],["(/.f64 y (*.f64 z x))","x","inf",0.261962890625],["(/.f64 y (*.f64 z x))","x","0",0.3330078125],["(/.f64 y (*.f64 z x))","z","-inf",0.2861328125],["(/.f64 y (*.f64 z x))","z","inf",0.26611328125],["(/.f64 y (*.f64 z x))","z","0",0.343017578125],["(/.f64 y (*.f64 z x))","y","-inf",0.3740234375],["(/.f64 y (*.f64 z x))","y","inf",0.35107421875],["(/.f64 y (*.f64 z x))","y","0",0.435791015625]],"time":10.173828125,"type":"series"},{"count":[[3,279]],"egraph":[[2,2836,24,0.025368751000000002],[1,199,24,0.0038887089999999997],[0,9,30,0.000252792]],"inputs":[["(/.f64 y (*.f64 z x))","(pow.f64 (/.f64 y (*.f64 z x)) -1)","(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (/.f64 y z) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (/.f64 y z) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (/.f64 y z) x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (/.f64 y z) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (/.f64 y z) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 (/.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (/.f64 (/.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) 2) (cbrt.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 (/.f64 1 z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (/.f64 y z) x)) (sqrt.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (*.f64 x (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 1 z) x) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y z) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (*.f64 z x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) z) (/.f64 (sqrt.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) z) (/.f64 (cbrt.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) x) (/.f64 (sqrt.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) x) (/.f64 (cbrt.f64 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) -2) (/.f64 y (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 (*.f64 z x)) 2)) (cbrt.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (*.f64 z x)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 z x) -1/2) (/.f64 y (sqrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 (*.f64 z x))) (/.f64 (cbrt.f64 y) (sqrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (/.f64 y z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 y z) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 y z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) -3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (/.f64 y z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (/.f64 y z) x) -3) -1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 x (/.f64 y z))) -2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) (pow.f64 (*.f64 z x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x (/.f64 y z)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (*.f64 x (neg.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (/.f64 y z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (/.f64 y z) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 y z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) (pow.f64 (*.f64 z x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (/.f64 y z) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y z))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (/.f64 y z) x))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (/.f64 y z) x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (/.f64 y z) x))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 x (/.f64 y z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (/.f64 y z))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 x (/.f64 y z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 z x) (/.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 x (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (cbrt.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 x (/.f64 y z))) (sqrt.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2) (cbrt.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z 1) (/.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x 1) (/.f64 z y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (/.f64 (cbrt.f64 (*.f64 z x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 z x)) 1) (/.f64 (sqrt.f64 (*.f64 z x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (cbrt.f64 (*.f64 y y))) (/.f64 x (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (cbrt.f64 (*.f64 y y))) (/.f64 z (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) -2) (/.f64 (*.f64 z x) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 z (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 x (sqrt.f64 y)) (/.f64 z (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1/2) (/.f64 (*.f64 z x) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (*.f64 z x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 y)) (*.f64 x (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (/.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 z (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 x (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 z x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 y z) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (/.f64 y z) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (/.f64 y (cbrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (*.f64 z x)) (/.f64 y (sqrt.f64 (*.f64 z x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 x (/.f64 y z))) (sqrt.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2) (cbrt.f64 (/.f64 (/.f64 y z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 y) (/.f64 (/.f64 1 z) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 z x) (cbrt.f64 (*.f64 y y))) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (/.f64 y z) x) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (/.f64 y z) x) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 z x) 3) (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2 (log.f64 (/.f64 (/.f64 y z) x))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 x (/.f64 y z)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 x (/.f64 y z)))) 2))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (neg.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (/.f64 1 y)) (*.f64 z x) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 -1 (/.f64 x (/.f64 y z)) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2)) (cbrt.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (*.f64 x (neg.f64 z)) (/.f64 1 y) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (/.f64 x (sqrt.f64 y))) (/.f64 z (sqrt.f64 y)) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (/.f64 z (sqrt.f64 y))) (/.f64 x (sqrt.f64 y)) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (sqrt.f64 y))) (/.f64 (sqrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 x (/.f64 y z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 x (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2) (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2) (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2) (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2) (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2) (*.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) (pow.f64 (cbrt.f64 (/.f64 (/.f64 y z) x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 x y) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 x y)) (/.f64 z 1) (*.f64 (/.f64 x y) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 x y) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 x y)) (/.f64 z 1) (*.f64 (/.f64 x y) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 x y) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 x y)) (/.f64 z 1) (*.f64 (/.f64 x y) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 x y) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 x y)) (/.f64 z 1) (*.f64 (/.f64 x y) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 x y) (/.f64 z 1)))) (fma.f64 (neg.f64 (/.f64 x y)) (/.f64 z 1) (*.f64 (/.f64 x y) (/.f64 z 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 z y) (/.f64 x 1)))) (fma.f64 (neg.f64 (/.f64 z y)) (/.f64 x 1) (*.f64 (/.f64 z y) (/.f64 x 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1)))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) y) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y)) (/.f64 (sqrt.f64 (*.f64 z x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y)) (/.f64 (sqrt.f64 (*.f64 z x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y)) (/.f64 (sqrt.f64 (*.f64 z x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y)) (/.f64 (sqrt.f64 (*.f64 z x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1)))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y)) (/.f64 (sqrt.f64 (*.f64 z x)) 1) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) y) (/.f64 (sqrt.f64 (*.f64 z x)) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 z (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 z (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 z (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 z (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 x (cbrt.f64 y))) (/.f64 z (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 x (cbrt.f64 y)) (/.f64 z (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 z (cbrt.f64 y))) (/.f64 x (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 z (cbrt.f64 y)) (/.f64 x (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (cbrt.f64 y))) (pow.f64 (cbrt.f64 y) -2) (*.f64 (/.f64 (*.f64 z x) (cbrt.f64 y)) (pow.f64 (cbrt.f64 y) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y)))))) (fma.f64 (neg.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y))) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))) (*.f64 (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 y)) (/.f64 (sqrt.f64 (*.f64 z x)) (cbrt.f64 (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2)))) (fma.f64 (neg.f64 (/.f64 (*.f64 z x) (sqrt.f64 y))) (pow.f64 y -1/2) (*.f64 (/.f64 (*.f64 z x) (sqrt.f64 y)) (pow.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y))))) (fma.f64 (neg.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y))) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)) (*.f64 (/.f64 (cbrt.f64 (*.f64 z x)) (sqrt.f64 y)) (/.f64 (pow.f64 (cbrt.f64 (*.f64 z x)) 2) (sqrt.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y))))) (fma.f64 (neg.f64 (*.f64 x (neg.f64 z))) (/.f64 1 (neg.f64 y)) (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y))))) (fma.f64 (neg.f64 (*.f64 x (neg.f64 z))) (/.f64 1 (neg.f64 y)) (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y))))) (fma.f64 (neg.f64 (*.f64 x (neg.f64 z))) (/.f64 1 (neg.f64 y)) (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y))))) (fma.f64 (neg.f64 (*.f64 x (neg.f64 z))) (/.f64 1 (neg.f64 y)) (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y))))) (fma.f64 (neg.f64 (*.f64 x (neg.f64 z))) (/.f64 1 (neg.f64 y)) (*.f64 (*.f64 x (neg.f64 z)) (/.f64 1 (neg.f64 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x 1 (neg.f64 (*.f64 x (/.f64 1 (/.f64 y z))))) (fma.f64 (neg.f64 x) (/.f64 1 (/.f64 y z)) (*.f64 x (/.f64 1 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 x (neg.f64 (*.f64 x (/.f64 1 (/.f64 y z))))) (fma.f64 (neg.f64 x) (/.f64 1 (/.f64 y z)) (*.f64 x (/.f64 1 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (*.f64 x (/.f64 1 (/.f64 y z))))) (fma.f64 (neg.f64 x) (/.f64 1 (/.f64 y z)) (*.f64 x (/.f64 1 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (*.f64 x (/.f64 1 (/.f64 y z))))) (fma.f64 (neg.f64 x) (/.f64 1 (/.f64 y z)) (*.f64 x (/.f64 1 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (*.f64 x (/.f64 1 (/.f64 y z))))) (fma.f64 (neg.f64 x) (/.f64 1 (/.f64 y z)) (*.f64 x (/.f64 1 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 x (/.f64 x (/.f64 y z))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 x (/.f64 x (/.f64 y z)))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 x (/.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 x (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2) (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3)) (/.f64 1 (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2)) (/.f64 1 (+.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z))))) (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (/.f64 x (/.f64 y z))) (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3)) (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2)) (+.f64 x (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3))) (neg.f64 (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2))) (neg.f64 (+.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 x 3) (pow.f64 (neg.f64 (/.f64 x (/.f64 y z))) 3)) (fma.f64 x x (-.f64 (pow.f64 (neg.f64 (/.f64 x (/.f64 y z))) 2) (*.f64 x (neg.f64 (/.f64 x (/.f64 y z)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 x x) (pow.f64 (neg.f64 (/.f64 x (/.f64 y z))) 2)) (-.f64 x (neg.f64 (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 x (/.f64 x (/.f64 y z))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (/.f64 x (/.f64 y z))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 x (/.f64 x (/.f64 y z))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z))))) (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x (/.f64 x (/.f64 y z))) (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 x (/.f64 x (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 x (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 x) (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 x)) (+.f64 1 (expm1.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (exp.f64 (neg.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 x)) (/.f64 1 (exp.f64 (/.f64 x (/.f64 y z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (/.f64 x (/.f64 y z)))) (exp.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (/.f64 x (/.f64 y z)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (/.f64 x (/.f64 y z)))) (+.f64 1 (expm1.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 x (/.f64 x (/.f64 y z))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 x (/.f64 x (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (-.f64 x (/.f64 x (/.f64 y z))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (neg.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x 1 (*.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 x (/.f64 y z)) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (/.f64 x (/.f64 y z))) 1 (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (/.f64 x (/.f64 y z))) 1 (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 x (/.f64 x (/.f64 y z))) 1 (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (neg.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 x (*.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (/.f64 x (/.f64 y z))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 x (/.f64 x (/.f64 y z))) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (/.f64 x (/.f64 y z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2) (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2) (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) 2) (cbrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (neg.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 x) (pow.f64 (cbrt.f64 x) 2) (*.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (neg.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 x) 2) (cbrt.f64 x) (*.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (sqrt.f64 (-.f64 x (/.f64 x (/.f64 y z)))) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (neg.f64 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (sqrt.f64 x) (*.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3)) (/.f64 1 (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z)))))) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3)) (/.f64 1 (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z)))))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 x 3) (pow.f64 (/.f64 (/.f64 y z) x) -3)) (/.f64 1 (fma.f64 x x (*.f64 (/.f64 x (/.f64 y z)) (+.f64 x (/.f64 x (/.f64 y z)))))) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2)) (/.f64 1 (+.f64 x (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2)) (/.f64 1 (+.f64 x (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (*.f64 x x) (pow.f64 (/.f64 (/.f64 y z) x) -2)) (/.f64 1 (+.f64 x (/.f64 x (/.f64 y z)))) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x (/.f64 y z))) (neg.f64 (sqrt.f64 (/.f64 x (/.f64 y z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (/.f64 x (/.f64 y z)))) 2) (cbrt.f64 (neg.f64 (/.f64 x (/.f64 y z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (/.f64 x (/.f64 y z)))) (sqrt.f64 (neg.f64 (/.f64 x (/.f64 y z)))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (/.f64 x (/.f64 y z)))) (sqrt.f64 (/.f64 x (/.f64 y z))) x)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (/.f64 x (/.f64 y z))) 1 (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 x (/.f64 y z)))) (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))) (-.f64 (sqrt.f64 x) (sqrt.f64 (/.f64 x (/.f64 y z)))) (+.f64 (neg.f64 (/.f64 x (/.f64 y z))) (/.f64 x (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (/.f64 x (/.f64 y z))) 2)) (cbrt.f64 (/.f64 x (/.f64 y z))) x)))))"]],"rules":[["egg-rr",170],["egg-rr",56],["egg-rr",53]],"stop":[["node limit",1]],"time":66.59716796875,"type":"rewrite"},{"count":[[351,287]],"egraph":[[11,1412,582,0.020473959],[10,1407,582,0.017821709],[9,1393,582,0.015175126],[8,1274,582,0.012413417],[7,1079,582,0.009387875],[6,803,582,0.006328500000000001],[5,410,582,0.0041105000000000004],[4,224,582,0.0020847500000000002],[3,116,582,0.0009884160000000002],[2,66,582,0.0005438330000000001],[1,35,582,0.000275],[0,16,582,0.00011675]],"inputs":[["(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(/.f64 (*.f64 z x) y)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 -1 (/.f64 (*.f64 z x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(/.f64 (*.f64 z x) y)","(*.f64 (/.f64 z y) x)","(*.f64 x (/.f64 z y))","(*.f64 z (/.f64 x y))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 (+.f64 1 (*.f64 -1 (/.f64 z y))) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(/.f64 (*.f64 (neg.f64 z) x) y)","(*.f64 x (/.f64 (neg.f64 z) y))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","x","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(/.f64 (*.f64 (neg.f64 z) x) y)","(*.f64 x (/.f64 (neg.f64 z) y))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(*.f64 -1 (/.f64 (*.f64 z x) y))","(neg.f64 (/.f64 (*.f64 z x) y))","(/.f64 (*.f64 (neg.f64 z) x) y)","(*.f64 x (/.f64 (neg.f64 z) y))","(*.f64 z (/.f64 (neg.f64 x) y))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 z x) y)) x)","(*.f64 x (-.f64 1 (/.f64 z y)))","(fma.f64 x (/.f64 (neg.f64 z) y) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 z (/.f64 x y)))"]],"stop":[["saturated",1]],"time":48.4609375,"type":"simplify"},{"compiler":[[6591,1861]],"time":43.218017578125,"type":"eval"},{"alts":[["(-.f64 x (*.f64 x (/.f64 z y)))","fresh",3.5859375],["(-.f64 x (*.f64 z (/.f64 x y)))","done",5.545568951075212],["(-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y))))","done",3.0482789062950726],["(-.f64 x (*.f64 z (*.f64 x (/.f64 1 y))))","fresh",5.549475201075212],["(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","done",3.3500888704092318],["(-.f64 x (/.f64 (*.f64 z x) y))","done",3.3422763704092318]],"compiler":[[10,6],[10,6],[16,10],[12,8],[12,8],[10,6]],"count":[[293,6]],"kept":[{"done":[3,3],"fresh":[2,2],"new":[287,0],"picked":[1,1]}],"min-error":[0],"time":100.3798828125,"type":"prune"},{"accuracy":[0.9385338379159783],"baseline":[3.0482789062950726],"branch":[["x",1.830557620409232,2],["y",3.0482789062950726,1],["z",1.8016160965791692,2],["(/.f64 (*.f64 x (-.f64 y z)) y)",0.9385338379159783,4]],"compiler":[[4,3],[4,3],[4,3],[10,6],[105,47]],"count":[[12,4]],"inputs":[["(-.f64 x (*.f64 x (/.f64 z y)))","(-.f64 x (pow.f64 (/.f64 y (*.f64 z x)) -1))","(-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y))))","(-.f64 x (*.f64 z (*.f64 x (/.f64 1 y))))","(-.f64 x (*.f64 (/.f64 z y) x))","(*.f64 (-.f64 1 (/.f64 z y)) x)","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (/.f64 (/.f64 (*.f64 z x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y)))","(-.f64 x (/.f64 1 (/.f64 y (*.f64 z x))))","(-.f64 x (/.f64 z (/.f64 y x)))","(-.f64 x (*.f64 z (/.f64 x y)))","(/.f64 (*.f64 x (-.f64 y z)) y)"]],"link":["."],"name":["Diagrams.Backend.Cairo.Internal:setTexture from diagrams-cairo-1.3.0.3"],"oracle":[19.1494978525263],"outputs":[["(-.f64 x (/.f64 z (/.f64 y x)))","(-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y))))","(-.f64 x (/.f64 (*.f64 z x) y))","(-.f64 x (*.f64 x (/.f64 z y)))"]],"time":51.399169921875,"times":[["x",17.489013671875],["y",5.131103515625],["z",9.868896484375],["(/.f64 (*.f64 x (-.f64 y z)) y)",16.755126953125]],"type":"regimes"},{"bstep":[[5.107082205445891e+291,2.7553808457307142e+293,0.02880859375],[0.0,8.821172818267438e-303,0.014892578125],[-4.432933770819681e+244,-8.791112770493863e+243,0.11083984375]],"compiler":[[6,5],[10,6]],"method":["left-value","left-value","left-value"],"time":0.2919921875,"type":"bsearch"},{"compiler":[[67,31]],"egraph":[[5,129,95,0.000754293],[4,126,95,0.000596084],[3,113,95,0.000433],[2,87,95,0.00028375],[1,53,95,0.00015179199999999999],[0,33,95,5.5417e-5]],"inputs":[["(if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -40000000000000002986023025993267830985311812004784623726521376004804618285431969451685978132299973122979161252805197687658703713382973633053438580540263602646031545549964753416721480781088915477799249620779385862645868902359563384333415575715840) (-.f64 x (/.f64 z (/.f64 y x))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 0) (-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 10000000000000000132565989783574162680686561089586460035632031477942492726904253214615979418039362499727374638565892090988122974650007025784551738302746731685907395315255274646861058187558214617579496201832662352585538835573636597522107561710941518560028749376834095178551288964115055725510656) (-.f64 x (/.f64 (*.f64 z x) y)) (-.f64 x (*.f64 x (/.f64 z y))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -40000000000000002986023025993267830985311812004784623726521376004804618285431969451685978132299973122979161252805197687658703713382973633053438580540263602646031545549964753416721480781088915477799249620779385862645868902359563384333415575715840) (-.f64 x (/.f64 z (/.f64 y x))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 0) (-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 10000000000000000132565989783574162680686561089586460035632031477942492726904253214615979418039362499727374638565892090988122974650007025784551738302746731685907395315255274646861058187558214617579496201832662352585538835573636597522107561710941518560028749376834095178551288964115055725510656) (-.f64 x (/.f64 (*.f64 z x) y)) (-.f64 x (*.f64 x (/.f64 z y))))))","(if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) -40000000000000002986023025993267830985311812004784623726521376004804618285431969451685978132299973122979161252805197687658703713382973633053438580540263602646031545549964753416721480781088915477799249620779385862645868902359563384333415575715840) (-.f64 x (/.f64 z (/.f64 y x))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 0) (-.f64 x (*.f64 (/.f64 z (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)))) (if (<=.f64 (/.f64 (*.f64 x (-.f64 y z)) y) 10000000000000000132565989783574162680686561089586460035632031477942492726904253214615979418039362499727374638565892090988122974650007025784551738302746731685907395315255274646861058187558214617579496201832662352585538835573636597522107561710941518560028749376834095178551288964115055725510656) (-.f64 x (/.f64 (*.f64 x z) y)) (-.f64 x (*.f64 x (/.f64 z y))))))"]],"stop":[["fuel",1],["saturated",1]],"time":10.764892578125,"type":"simplify"},{"time":0.028076171875,"type":"soundness"},{"compiler":[[67,31]],"remove-preprocessing":[[]],"time":16.296875,"type":"end"}]
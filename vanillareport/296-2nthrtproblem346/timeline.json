[{"compiler":[[16,12]],"method":["search"],"sampling":[[12,0.3073168534319848,0.24975591897964478,0.44292722758837044],[11,0.30341441719792783,0.2653656639158726,0.4312199188861996],[10,0.28878028132021427,0.3239022074267268,0.3873175112530589],[9,0.2809754088521004,0.35902413353323936,0.36000045761466026],[8,0.2653656639158726,0.45268260315060616,0.28195173293352127],[7,0.24975591897964478,0.49951183795928955,0.2507322430610657],[6,0.21853642910718918,0.5931703075766563,0.18829326331615448],[5,0.18731693923473358,0.6868287771940231,0.1258542835712433],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":161.4951171875,"type":"analyze"},{"outcomes":[["body",512,"invalid",273.589111328125,1031],["body",2048,"invalid",5.109130859375,5],["body",256,"invalid",246.0185546875,2414],["body",1024,"valid",917.297119140625,2752],["body",1024,"invalid",871.906982421875,1698],["body",512,"valid",258.535400390625,1251],["body",256,"valid",228.073486328125,2422],["body",2048,"valid",839.34716796875,1831]],"time":3652.965087890625,"type":"sample"},{"compiler":[[15,11]],"egraph":[[0,2,2,2e-6],[6,6793,38,0.026390543000000002],[5,2258,38,0.014363543000000001],[4,662,38,0.004604043],[3,195,38,0.001470418],[2,76,38,0.000510251],[1,33,38,0.000188709],[0,14,38,7.1584e-5]],"inputs":[["0","1"],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","(-.f64 (pow.f64 (+.f64 n 1) (/.f64 1 x)) (pow.f64 n (/.f64 1 x)))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","(-.f64 (pow.f64 (+.f64 n 1) (/.f64 1 x)) (pow.f64 n (/.f64 1 x)))","(-.f64 (pow.f64 (+.f64 1 n) (/.f64 1 x)) (pow.f64 n (/.f64 1 x)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":50.7919921875,"type":"preprocess"},{"count":[[1,1]],"egraph":[[7,6556,19,0.069187999],[6,3419,19,0.042246624],[5,1130,19,0.007454291],[4,341,19,0.00245275],[3,104,19,0.000841084],[2,42,19,0.000320209],[1,20,19,0.000125417],[0,9,19,5.1875e-5]],"inputs":[["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))"]],"method":["egg-herbie"],"outputs":[["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))"]],"stop":[["node limit",1]],"time":80.890869140625,"type":"simplify"},{"compiler":[[15,11]],"time":0.445068359375,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","next",33.20623557247954]],"compiler":[[15,11],[15,11]],"count":[[2,1]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[1,1],"picked":[0,0]}],"min-error":[33.20623557247954],"time":1.158935546875,"type":"prune"},{"compiler":[[36,24]],"locations":[["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))",2.757686462220715,true]],"time":10.8271484375,"type":"localize"},{"count":[[1,24]],"series":[["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","n","-inf",0.701904296875],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","n","inf",1.069091796875],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","n","0",0.510009765625],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","x","-inf",1.14208984375],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","x","inf",1.488037109375],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))","x","0",0.883056640625]],"time":6.0,"type":"series"},{"count":[[1,115]],"egraph":[[2,2853,17,0.026098167],[1,207,17,0.003916042],[0,9,19,0.000260958]],"inputs":[["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (fma.f64 -1 (pow.f64 x (/.f64 1 n)) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2)) (cbrt.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (fma.f64 (neg.f64 (pow.f64 (sqrt.f64 x) (/.f64 1 n))) (pow.f64 (sqrt.f64 x) (/.f64 1 n)) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 1 (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 1 (/.f64 1 n)) (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 2 (/.f64 1 n))) (pow.f64 (cbrt.f64 (+.f64 x 1)) (/.f64 1 n)) (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (neg.f64 (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 1 (/.f64 1 n)) (*.f64 (pow.f64 x (/.f64 1 n)) (pow.f64 1 (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 1 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 1 (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 1 (/.f64 1 n)) (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 2 (/.f64 1 n))) (pow.f64 (cbrt.f64 (+.f64 x 1)) (/.f64 1 n)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (neg.f64 (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n))))) (fma.f64 (neg.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n))) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)) (*.f64 (pow.f64 (cbrt.f64 x) (/.f64 1 n)) (pow.f64 (cbrt.f64 (*.f64 x x)) (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))) (log.f64 (sqrt.f64 (exp.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2) (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3))) (/.f64 1 (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n)))) (/.f64 1 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (-.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2)) (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3))) (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n)))) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3)))) (neg.f64 (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n))))) (neg.f64 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 3)) (+.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (-.f64 (pow.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 2) (*.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (/.f64 1 n)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 2)) (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2)) (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (exp.f64 (/.f64 (log1p.f64 x) n)))) (exp.f64 (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (+.f64 1 (expm1.f64 (pow.f64 x (/.f64 1 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (exp.f64 (/.f64 (log1p.f64 x) n)))) (+.f64 1 (expm1.f64 (pow.f64 x (/.f64 1 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (exp.f64 (/.f64 (log1p.f64 x) n)))) (exp.f64 (neg.f64 (pow.f64 x (/.f64 1 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (exp.f64 (/.f64 (log1p.f64 x) n)))) (/.f64 1 (exp.f64 (pow.f64 x (/.f64 1 n))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (pow.f64 x (/.f64 1 n)))) (exp.f64 (exp.f64 (/.f64 (log1p.f64 x) n)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (neg.f64 (pow.f64 x (/.f64 1 n)))) (+.f64 1 (expm1.f64 (exp.f64 (/.f64 (log1p.f64 x) n))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (exp.f64 (pow.f64 x (/.f64 1 n)))) (+.f64 1 (expm1.f64 (exp.f64 (/.f64 (log1p.f64 x) n))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (exp.f64 (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (neg.f64 (pow.f64 x (/.f64 1 n))) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 1 (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 1 (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 1 (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 1 (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 1 (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2) (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2) (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) 2) (cbrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) 2) (cbrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (sqrt.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (pow.f64 x (/.f64 1 n)) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3))) (/.f64 1 (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3))) (/.f64 1 (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 3) (pow.f64 x (*.f64 (/.f64 1 n) 3))) (/.f64 1 (fma.f64 (pow.f64 x (/.f64 1 n)) (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2))) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n)))) (/.f64 1 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n)))) (/.f64 1 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) 2) (pow.f64 x (*.f64 2 (/.f64 1 n)))) (/.f64 1 (+.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n)))) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 x (/.f64 1 n))) (neg.f64 (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (neg.f64 (pow.f64 x (/.f64 1 n)))) 2) (cbrt.f64 (neg.f64 (pow.f64 x (/.f64 1 n)))) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (neg.f64 (pow.f64 x (/.f64 1 n)))) (sqrt.f64 (neg.f64 (pow.f64 x (/.f64 1 n)))) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (sqrt.f64 (pow.f64 x (/.f64 1 n))) (exp.f64 (/.f64 (log1p.f64 x) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 (/.f64 1 n)) (exp.f64 (/.f64 (log1p.f64 x) n)) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 (/.f64 1 n)) (exp.f64 (/.f64 (log1p.f64 x) n)) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 2 (/.f64 1 n))) (pow.f64 (cbrt.f64 (+.f64 x 1)) (/.f64 1 n)) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 x 1)) (*.f64 2 (/.f64 1 n))) (pow.f64 (cbrt.f64 (+.f64 x 1)) (/.f64 1 n)) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (neg.f64 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (pow.f64 (sqrt.f64 (+.f64 x 1)) (/.f64 1 n)) (*.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (-.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) 1 (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (-.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (fma.f64 (neg.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n)))) (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (-.f64 (sqrt.f64 (exp.f64 (/.f64 (log1p.f64 x) n))) (sqrt.f64 (pow.f64 x (/.f64 1 n)))) (+.f64 (neg.f64 (pow.f64 x (/.f64 1 n))) (pow.f64 x (/.f64 1 n))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (pow.f64 x (/.f64 1 n))) 2)) (cbrt.f64 (pow.f64 x (/.f64 1 n))) (exp.f64 (/.f64 (log1p.f64 x) n)))))))"]],"rules":[["egg-rr",115]],"stop":[["node limit",1]],"time":55.48583984375,"type":"rewrite"},{"count":[[139,154]],"egraph":[[2,1647,1207,0.016038751],[1,470,1293,0.0035734589999999998],[0,151,1366,0.000855584]],"inputs":[["(-.f64 1 (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (+.f64 (/.f64 x n) 1) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (+.f64 (/.f64 x n) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n))) (pow.f64 x 2)))) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2)))) (pow.f64 x 3)) (+.f64 (/.f64 x n) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n))) (pow.f64 x 2))))) (exp.f64 (/.f64 (log.f64 x) n)))","(/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))) (pow.f64 x 3)) (/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x))))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))) (pow.f64 x 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x)) (/.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/24 (/.f64 1 (pow.f64 n 4))) (*.f64 11/24 (/.f64 1 (pow.f64 n 2)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/4 (/.f64 1 n)))) (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n)))) (pow.f64 x 4)))))","(/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x))","(+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3))))) (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3))))) (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (+.f64 (*.f64 1/24 (/.f64 1 (pow.f64 n 4))) (*.f64 11/24 (/.f64 1 (pow.f64 n 2)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/4 (/.f64 1 n))))) (pow.f64 x 4)) (/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x)))))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(/.f64 (-.f64 (log.f64 (+.f64 1 x)) (log.f64 x)) n)","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (/.f64 (log.f64 (+.f64 1 x)) n)) (+.f64 (/.f64 (log.f64 x) n) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2)))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 n 3))) (/.f64 (log.f64 (+.f64 1 x)) n))) (+.f64 (/.f64 (log.f64 x) n) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 4) (pow.f64 n 4))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 n 3))) (/.f64 (log.f64 (+.f64 1 x)) n)))) (+.f64 (/.f64 (log.f64 x) n) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))))))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n))) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1/6 (pow.f64 (log.f64 (+.f64 1 x)) 3)) (*.f64 -1/6 (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))) (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n)))) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 4) (pow.f64 n 4))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1/6 (pow.f64 (log.f64 (+.f64 1 x)) 3)) (*.f64 -1/6 (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))) (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n))))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))) (*.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4)))))"]],"method":["egg-herbie"],"outputs":[["(-.f64 1 (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (+.f64 (/.f64 x n) 1) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (+.f64 1 (/.f64 x n)) (exp.f64 (/.f64 (log.f64 x) n)))","(+.f64 1 (-.f64 (/.f64 x n) (exp.f64 (/.f64 (log.f64 x) n))))","(-.f64 (+.f64 (/.f64 x n) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n))) (pow.f64 x 2)))) (exp.f64 (/.f64 (log.f64 x) n)))","(+.f64 (/.f64 x n) (-.f64 (+.f64 1 (*.f64 (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n)) (*.f64 x x))) (exp.f64 (/.f64 (log.f64 x) n))))","(+.f64 (fma.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (*.f64 x x) 1) (-.f64 (/.f64 x n) (exp.f64 (/.f64 (log.f64 x) n))))","(+.f64 1 (-.f64 (fma.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (*.f64 x x) (/.f64 x n)) (exp.f64 (/.f64 (log.f64 x) n))))","(-.f64 (+.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2)))) (pow.f64 x 3)) (+.f64 (/.f64 x n) (+.f64 1 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n))) (pow.f64 x 2))))) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (fma.f64 (+.f64 (/.f64 1/3 n) (-.f64 (/.f64 1/6 (pow.f64 n 3)) (/.f64 1/2 (*.f64 n n)))) (pow.f64 x 3) (+.f64 (/.f64 x n) (+.f64 1 (*.f64 (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n)) (*.f64 x x))))) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (+.f64 (fma.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (*.f64 x x) 1) (fma.f64 (+.f64 (/.f64 1/3 n) (+.f64 (/.f64 1/6 (pow.f64 n 3)) (/.f64 -1/2 (*.f64 n n)))) (pow.f64 x 3) (/.f64 x n))) (exp.f64 (/.f64 (log.f64 x) n)))","(+.f64 (fma.f64 x (*.f64 x (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n))) 1) (-.f64 (fma.f64 (+.f64 (/.f64 1/6 (pow.f64 n 3)) (+.f64 (/.f64 1/3 n) (/.f64 (/.f64 -1/2 n) n))) (pow.f64 x 3) (/.f64 x n)) (exp.f64 (/.f64 (log.f64 x) n))))","(/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x))","(/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (*.f64 x n))","(/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x)))","(+.f64 (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (*.f64 x n)) (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (/.f64 (*.f64 x x) (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n)))))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)) (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n))))","(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))) (pow.f64 x 3)) (/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x))))","(+.f64 (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (/.f64 (*.f64 x x) (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n)))) (+.f64 (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (*.f64 x n)) (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (/.f64 (pow.f64 x 3) (+.f64 (/.f64 1/3 n) (-.f64 (/.f64 1/6 (pow.f64 n 3)) (/.f64 1/2 (*.f64 n n))))))))","(+.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)) (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)))) (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (pow.f64 x 3)) (+.f64 (/.f64 1/3 n) (+.f64 (/.f64 1/6 (pow.f64 n 3)) (/.f64 -1/2 (*.f64 n n))))))","(+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)) (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (+.f64 (/.f64 1/6 (pow.f64 n 3)) (+.f64 (/.f64 1/3 n) (/.f64 (/.f64 -1/2 n) n))) x))))","(+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (-.f64 (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3)))) (*.f64 1/2 (/.f64 1 (pow.f64 n 2))))) (pow.f64 x 3)) (+.f64 (/.f64 (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n))) (*.f64 n x)) (/.f64 (*.f64 (-.f64 (+.f64 (*.f64 1/24 (/.f64 1 (pow.f64 n 4))) (*.f64 11/24 (/.f64 1 (pow.f64 n 2)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/4 (/.f64 1 n)))) (exp.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 1 x)) n)))) (pow.f64 x 4)))))","(+.f64 (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (/.f64 (*.f64 x x) (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n)))) (+.f64 (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (/.f64 (pow.f64 x 3) (+.f64 (/.f64 1/3 n) (-.f64 (/.f64 1/6 (pow.f64 n 3)) (/.f64 1/2 (*.f64 n n)))))) (+.f64 (/.f64 (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))) (*.f64 x n)) (/.f64 (+.f64 (/.f64 1/24 (pow.f64 n 4)) (-.f64 (/.f64 11/24 (*.f64 n n)) (+.f64 (/.f64 1/4 (pow.f64 n 3)) (/.f64 1/4 n)))) (/.f64 (pow.f64 x 4) (exp.f64 (neg.f64 (/.f64 (neg.f64 (log.f64 x)) n))))))))","(+.f64 (+.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)) (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)))) (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (pow.f64 x 3)) (+.f64 (/.f64 1/3 n) (+.f64 (/.f64 1/6 (pow.f64 n 3)) (/.f64 -1/2 (*.f64 n n)))))) (*.f64 (/.f64 (+.f64 (/.f64 1/24 (pow.f64 n 4)) (-.f64 (/.f64 11/24 (*.f64 n n)) (+.f64 (/.f64 1/4 (pow.f64 n 3)) (/.f64 1/4 n)))) (pow.f64 x 4)) (exp.f64 (/.f64 (log.f64 x) n))))","(+.f64 (fma.f64 (/.f64 (+.f64 (/.f64 -1/4 n) (+.f64 (/.f64 -1/4 (pow.f64 n 3)) (+.f64 (/.f64 1/24 (pow.f64 n 4)) (/.f64 (/.f64 11/24 n) n)))) (pow.f64 x 4)) (exp.f64 (/.f64 (log.f64 x) n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))) (*.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (+.f64 (/.f64 1/6 (pow.f64 n 3)) (+.f64 (/.f64 1/3 n) (/.f64 (/.f64 -1/2 n) n))) x))))","(/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x))","(/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (*.f64 x n))","(/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x n))","(+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x)))","(+.f64 (/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (*.f64 x n)) (/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (/.f64 (*.f64 x x) (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n)))))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x n)) (*.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) x)))","(fma.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x n)))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3))))) (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x))))","(fma.f64 -1 (/.f64 (-.f64 (/.f64 1/2 (*.f64 n n)) (+.f64 (/.f64 1/3 n) (/.f64 1/6 (pow.f64 n 3)))) (/.f64 (pow.f64 x 3) (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)))) (+.f64 (/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (*.f64 x n)) (/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (/.f64 (*.f64 x x) (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n))))))","(-.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x n)) (*.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) x))) (*.f64 (/.f64 (-.f64 (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/6 (pow.f64 n 3))) (/.f64 1/3 n)) (pow.f64 x 3)) (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n))))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x n)) (fma.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) x) (*.f64 (/.f64 (+.f64 (/.f64 1/6 (pow.f64 n 3)) (+.f64 (/.f64 1/3 n) (/.f64 (/.f64 -1/2 n) n))) (pow.f64 x 3)) (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (+.f64 (*.f64 1/3 (/.f64 1 n)) (*.f64 1/6 (/.f64 1 (pow.f64 n 3))))) (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (*.f64 1/2 (/.f64 1 (pow.f64 n 2))) (*.f64 1/2 (/.f64 1 n)))) (pow.f64 x 2)) (+.f64 (/.f64 (*.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (-.f64 (+.f64 (*.f64 1/24 (/.f64 1 (pow.f64 n 4))) (*.f64 11/24 (/.f64 1 (pow.f64 n 2)))) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 n 3))) (*.f64 1/4 (/.f64 1 n))))) (pow.f64 x 4)) (/.f64 (exp.f64 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n)) (*.f64 n x)))))","(fma.f64 -1 (/.f64 (-.f64 (/.f64 1/2 (*.f64 n n)) (+.f64 (/.f64 1/3 n) (/.f64 1/6 (pow.f64 n 3)))) (/.f64 (pow.f64 x 3) (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)))) (+.f64 (/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (/.f64 (*.f64 x x) (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/2 n)))) (+.f64 (/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (*.f64 x n)) (/.f64 (exp.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) n)) (/.f64 (pow.f64 x 4) (+.f64 (/.f64 1/24 (pow.f64 n 4)) (-.f64 (/.f64 11/24 (*.f64 n n)) (+.f64 (/.f64 1/4 (pow.f64 n 3)) (/.f64 1/4 n)))))))))","(+.f64 (-.f64 (+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x n)) (*.f64 (/.f64 (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) x) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) x))) (*.f64 (/.f64 (-.f64 (-.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 1/6 (pow.f64 n 3))) (/.f64 1/3 n)) (pow.f64 x 3)) (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)))) (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (/.f64 (pow.f64 x 4) (+.f64 (/.f64 1/24 (pow.f64 n 4)) (-.f64 (/.f64 11/24 (*.f64 n n)) (+.f64 (/.f64 1/4 (pow.f64 n 3)) (/.f64 1/4 n)))))))","(+.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x n)) (+.f64 (*.f64 (/.f64 (+.f64 (/.f64 1/6 (pow.f64 n 3)) (+.f64 (/.f64 1/3 n) (/.f64 (/.f64 -1/2 n) n))) (pow.f64 x 3)) (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n))) (*.f64 (/.f64 (exp.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n)) (*.f64 x x)) (+.f64 (/.f64 (+.f64 (/.f64 -1/4 n) (+.f64 (/.f64 -1/4 (pow.f64 n 3)) (+.f64 (/.f64 1/24 (pow.f64 n 4)) (/.f64 (/.f64 11/24 n) n)))) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n))))))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log.f64 (+.f64 1 x)) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (exp.f64 (/.f64 (log.f64 x) n)))","(/.f64 (-.f64 (log.f64 (+.f64 1 x)) (log.f64 x)) n)","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (/.f64 (log.f64 (+.f64 1 x)) n)) (+.f64 (/.f64 (log.f64 x) n) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2)))))","(-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (/.f64 (log1p.f64 x) n)) (+.f64 (/.f64 (log.f64 x) n) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n)))))","(fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (-.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 1/2 (/.f64 (*.f64 n n) (pow.f64 (log.f64 x) 2)))))","(+.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 n 3))) (/.f64 (log.f64 (+.f64 1 x)) n))) (+.f64 (/.f64 (log.f64 x) n) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))))","(-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (fma.f64 1/6 (/.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 n 3)) (/.f64 (log1p.f64 x) n))) (+.f64 (/.f64 (log.f64 x) n) (fma.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n)) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))))","(-.f64 (+.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (/.f64 (*.f64 1/6 (pow.f64 (log1p.f64 x) 3)) (pow.f64 n 3))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)) (fma.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)) (/.f64 1/2 (/.f64 (*.f64 n n) (pow.f64 (log.f64 x) 2)))))","(+.f64 (fma.f64 1/6 (pow.f64 (/.f64 (log1p.f64 x) n) 3) (/.f64 (log1p.f64 x) n)) (-.f64 (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))) (fma.f64 1/6 (pow.f64 (/.f64 (log.f64 x) n) 3) (/.f64 (log.f64 x) n))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 4) (pow.f64 n 4))) (+.f64 (*.f64 1/6 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 n 3))) (/.f64 (log.f64 (+.f64 1 x)) n)))) (+.f64 (/.f64 (log.f64 x) n) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))))))","(-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (fma.f64 1/24 (/.f64 (pow.f64 (log1p.f64 x) 4) (pow.f64 n 4)) (fma.f64 1/6 (/.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 n 3)) (/.f64 (log1p.f64 x) n)))) (+.f64 (/.f64 (log.f64 x) n) (fma.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n)) (fma.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4)) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))))))","(-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (fma.f64 1/24 (/.f64 (pow.f64 (log1p.f64 x) 4) (pow.f64 n 4)) (fma.f64 1/6 (/.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 n 3)) (/.f64 (log1p.f64 x) n)))) (+.f64 (/.f64 (log.f64 x) n) (fma.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n)) (fma.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4)) (/.f64 1/6 (/.f64 (pow.f64 n 3) (pow.f64 (log.f64 x) 3)))))))","(-.f64 (+.f64 (fma.f64 1/6 (pow.f64 (/.f64 (log1p.f64 x) n) 3) (/.f64 (*.f64 1/24 (pow.f64 (log1p.f64 x) 4)) (pow.f64 n 4))) (+.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))) (fma.f64 1/6 (pow.f64 (/.f64 (log.f64 x) n) 3) (*.f64 (/.f64 1/24 (pow.f64 n 4)) (pow.f64 (log.f64 x) 4))))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n))","(/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n)","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n))) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))))","(-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (/.f64 (log1p.f64 x) n)) (+.f64 (/.f64 (log.f64 x) n) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n)))))","(fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (-.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 1/2 (/.f64 (*.f64 n n) (pow.f64 (log.f64 x) 2)))))","(+.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1/6 (pow.f64 (log.f64 (+.f64 1 x)) 3)) (*.f64 -1/6 (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))) (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n)))) (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))))","(+.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (*.f64 -1 (+.f64 (/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3)) (/.f64 (*.f64 -1 (-.f64 (log1p.f64 x) (log.f64 x))) n)))) (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n))))","(+.f64 (-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (/.f64 (*.f64 1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))) (/.f64 (fma.f64 -1 (log1p.f64 x) (log.f64 x)) n)) (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n)) -1/2))","(+.f64 (-.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(-.f64 (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 n 2))) (+.f64 (*.f64 1/24 (/.f64 (pow.f64 (log.f64 (+.f64 1 x)) 4) (pow.f64 n 4))) (+.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1/6 (pow.f64 (log.f64 (+.f64 1 x)) 3)) (*.f64 -1/6 (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))) (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (log.f64 (+.f64 1 x))) (*.f64 -1 (log.f64 x))) n))))) (+.f64 (*.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 2))) (*.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4)))))","(-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (fma.f64 1/24 (/.f64 (pow.f64 (log1p.f64 x) 4) (pow.f64 n 4)) (*.f64 -1 (+.f64 (/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3)) (/.f64 (*.f64 -1 (-.f64 (log1p.f64 x) (log.f64 x))) n))))) (fma.f64 1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 n n)) (*.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4)))))","(-.f64 (fma.f64 1/2 (/.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 n n)) (-.f64 (fma.f64 1/24 (/.f64 (pow.f64 (log1p.f64 x) 4) (pow.f64 n 4)) (/.f64 (*.f64 1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))) (/.f64 (fma.f64 -1 (log1p.f64 x) (log.f64 x)) n))) (fma.f64 1/24 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4)) (/.f64 1/2 (/.f64 (*.f64 n n) (pow.f64 (log.f64 x) 2)))))","(+.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (+.f64 (fma.f64 1/24 (/.f64 (pow.f64 (log1p.f64 x) 4) (pow.f64 n 4)) (/.f64 1/6 (/.f64 (pow.f64 n 3) (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))) (+.f64 (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))) (*.f64 (/.f64 (pow.f64 (log.f64 x) 4) (pow.f64 n 4)) -1/24))))"]],"stop":[["node limit",1]],"time":39.2080078125,"type":"simplify"},{"compiler":[[5229,3066]],"time":54.071044921875,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)","fresh",33.203308671580395],["(+.f64 (-.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","next",25.16419161673865],["(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","fresh",36.3610101769632]],"compiler":[[17,13],[43,28],[30,16],[17,13],[43,28],[30,16]],"count":[[155,3]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[154,3],"picked":[1,0]}],"min-error":[0.414128896669326],"time":34.98291015625,"type":"prune"},{"compiler":[[181,97]],"locations":[["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))",2.8724244573953905,true],["(-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))",3.0463279001216614,true],["(-.f64 (log1p.f64 x) (log.f64 x))",3.1158808390532924,true],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))",6.584097004431934,true]],"time":47.302001953125,"type":"localize"},{"count":[[4,72]],"series":[["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))","n","-inf",0.579833984375],["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))","n","inf",6.864990234375],["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))","n","0",0.748779296875],["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))","x","-inf",0.73193359375],["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))","x","inf",0.612060546875],["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))","x","0",0.404052734375],["(-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))","x","-inf",1.074951171875],["(-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))","x","inf",0.818115234375],["(-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))","x","0",0.704833984375],["(-.f64 (log1p.f64 x) (log.f64 x))","x","-inf",0.239990234375],["(-.f64 (log1p.f64 x) (log.f64 x))","x","inf",0.278076171875],["(-.f64 (log1p.f64 x) (log.f64 x))","x","0",0.295166015625],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))","n","-inf",0.344970703125],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))","n","inf",0.489013671875],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))","n","0",36.76513671875],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))","x","-inf",2.6650390625],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))","x","inf",2.324951171875],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))","x","0",0.8310546875]],"time":57.4921875,"type":"series"},{"count":[[4,198]],"egraph":[[2,6922,62,0.044026749000000004],[1,483,62,0.009926041],[0,20,62,0.000612958]],"inputs":[["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))","(-.f64 (log1p.f64 x) (log.f64 x))","(-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))","(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 n 3)) -1/6) (neg.f64 (*.f64 (pow.f64 (log.f64 x) 3) (/.f64 -1/6 (pow.f64 n 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (/.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 n 3)) -1/6) (*.f64 (pow.f64 (log.f64 x) 3) (/.f64 -1/6 (pow.f64 n 3))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2) (*.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (/.f64 -1/6 (pow.f64 n 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 n (cbrt.f64 -6))) (pow.f64 (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 n (cbrt.f64 -6))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 n (cbrt.f64 -6))) 2) (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 n (cbrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (/.f64 -1/6 (pow.f64 n 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))) (sqrt.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (/.f64 1 (*.f64 (pow.f64 n 3) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (/.f64 -1/6 (pow.f64 n 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 -1/6 (pow.f64 n 3)) (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)) -1/6)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2) 1) (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 (pow.f64 n 3) -6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 1) (/.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 (pow.f64 n 3) -6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3)) (/.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) 1) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (pow.f64 n 3) -6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 n 3)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (*.f64 n (cbrt.f64 -6)) 2)) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (*.f64 n (cbrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (*.f64 (pow.f64 n 3/2) (sqrt.f64 -6))) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (*.f64 (pow.f64 n 3/2) (sqrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2) (pow.f64 n 3)) (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (pow.f64 n 3)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) -6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2) (pow.f64 (*.f64 n (cbrt.f64 -6)) 2)) (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 n (cbrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 (*.f64 n (cbrt.f64 -6)) 2)) (/.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 n (cbrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (pow.f64 (*.f64 n (cbrt.f64 -6)) 2)) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 n (cbrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2) (*.f64 (pow.f64 n 3/2) (sqrt.f64 -6))) (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 (pow.f64 n 3/2) (sqrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (*.f64 (pow.f64 n 3/2) (sqrt.f64 -6))) (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (*.f64 (pow.f64 n 3/2) (sqrt.f64 -6))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) 1) (/.f64 -1/6 (pow.f64 n 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (neg.f64 (pow.f64 n 3))) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (*.f64 n (cbrt.f64 -6))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (pow.f64 n 3) -6) (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (*.f64 (pow.f64 n 3) 6)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (/.f64 -1/6 (pow.f64 n 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) 3) (pow.f64 (*.f64 (pow.f64 n 3) -6) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 -1/6 (pow.f64 n 3)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 x) (*.f64 (neg.f64 (log.f64 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (neg.f64 (log.f64 x)) 1 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (neg.f64 (cbrt.f64 (log.f64 x))) (pow.f64 (cbrt.f64 (log.f64 x)) 2) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (fma.f64 (neg.f64 (sqrt.f64 (log.f64 x))) (sqrt.f64 (log.f64 x)) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (log.f64 x)) (log1p.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 2) (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) (/.f64 1 (+.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log.f64 x))) (-.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (log1p.f64 x) (log.f64 x)) (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2) (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) (+.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 (log.f64 x) 6)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2))) (neg.f64 (+.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (neg.f64 (log.f64 x)) 3)) (+.f64 (pow.f64 (log1p.f64 x) 2) (-.f64 (*.f64 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 x))) (*.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (neg.f64 (log.f64 x)) (neg.f64 (log.f64 x)))) (-.f64 (log1p.f64 x) (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 x 1) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (-.f64 (/.f64 (+.f64 x 1) x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 (+.f64 x 1) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (log1p.f64 x) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (log1p.f64 x)) 2) (cbrt.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (log1p.f64 x)) (sqrt.f64 (log1p.f64 x)) (neg.f64 (log.f64 x)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log1p.f64 x) 3) (neg.f64 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (pow.f64 (log1p.f64 x) 3) (*.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (fma.f64 (neg.f64 (pow.f64 (log.f64 x) 2)) (log.f64 x) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (fma.f64 (neg.f64 (log.f64 x)) (pow.f64 (log.f64 x) 2) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (fma.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) 1 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (fma.f64 (neg.f64 (pow.f64 (log.f64 x) 3/2)) (pow.f64 (log.f64 x) 3/2) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) (pow.f64 (log1p.f64 x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (log1p.f64 x) (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x))))) (*.f64 (neg.f64 (log.f64 x)) (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (log1p.f64 x)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (neg.f64 (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 x) (log.f64 x)) (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2) (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 (log.f64 x) 6)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (log1p.f64 x) 3/2) (pow.f64 (log.f64 x) 3/2)) (-.f64 (pow.f64 (log1p.f64 x) 3/2) (pow.f64 (log.f64 x) 3/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) 1) (-.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 2)) (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x)))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3))) (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (-.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 (log.f64 x) 6))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9)) (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 (log.f64 x) 6)) (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 (log.f64 x) 6))) (neg.f64 (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) 3)) (+.f64 (pow.f64 (log1p.f64 x) 6) (-.f64 (*.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) (neg.f64 (pow.f64 (log.f64 x) 3))) (*.f64 (pow.f64 (log1p.f64 x) 3) (neg.f64 (pow.f64 (log.f64 x) 3))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 6) (*.f64 (neg.f64 (pow.f64 (log.f64 x) 3)) (neg.f64 (pow.f64 (log.f64 x) 3)))) (-.f64 (pow.f64 (log1p.f64 x) 3) (neg.f64 (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2))) (+.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (log1p.f64 x) (pow.f64 (log1p.f64 x) 2) (neg.f64 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log1p.f64 x) 2) (log1p.f64 x) (neg.f64 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (pow.f64 (log1p.f64 x) 3) (neg.f64 (pow.f64 (log.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log1p.f64 x) 3/2) (pow.f64 (log1p.f64 x) 3/2) (neg.f64 (pow.f64 (log.f64 x) 3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (*.f64 (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) (fma.f64 (neg.f64 (/.f64 1 n)) (pow.f64 (log.f64 x) 2) (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) (fma.f64 (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)) 1 (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) (fma.f64 (neg.f64 (cbrt.f64 (/.f64 (pow.f64 (log.f64 x) 2) n))) (cbrt.f64 (/.f64 (pow.f64 (log.f64 x) 4) (*.f64 n n))) (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) (fma.f64 (neg.f64 (/.f64 (log.f64 x) (sqrt.f64 n))) (/.f64 (log.f64 x) (sqrt.f64 n)) (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)) (/.f64 (pow.f64 (log1p.f64 x) 2) n))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)) (pow.f64 (cbrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)) 2) (cbrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)) (sqrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 n (pow.f64 (log1p.f64 x) 2)) (*.f64 n (pow.f64 (log.f64 x) 2))) (/.f64 1 (*.f64 n n)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) (/.f64 1 n))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 n 3)) (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 n 3))) (/.f64 1 (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) n) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 n) (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) 4) (*.f64 n n))) (/.f64 1 (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (log1p.f64 x) (sqrt.f64 n)) (/.f64 (log.f64 x) (sqrt.f64 n))) (-.f64 (/.f64 (log1p.f64 x) (sqrt.f64 n)) (/.f64 (log.f64 x) (sqrt.f64 n))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 n n) (-.f64 (*.f64 n (pow.f64 (log1p.f64 x) 2)) (*.f64 n (pow.f64 (log.f64 x) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 n (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) n) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 n 3)) (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 n 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) 4) (*.f64 n n)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 n (pow.f64 (log1p.f64 x) 2)) (*.f64 n (pow.f64 (log.f64 x) 2))) (*.f64 n n))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 n 3)) (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 n 3))) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) n) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) 4) (*.f64 n n))) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 n (pow.f64 (log1p.f64 x) 2)) (*.f64 n (pow.f64 (log.f64 x) 2)))) (neg.f64 (*.f64 n n)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2))) (neg.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 n 3)) (/.f64 (pow.f64 (log.f64 x) 6) (pow.f64 n 3)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) n) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (/.f64 (pow.f64 (log.f64 x) 4) (*.f64 n n)))) (neg.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 n (*.f64 (/.f64 n (pow.f64 (log1p.f64 x) 2)) (pow.f64 (log.f64 x) 2))) (*.f64 (/.f64 n (pow.f64 (log1p.f64 x) 2)) n))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 x) 2)) n) (*.f64 (neg.f64 n) (pow.f64 (log.f64 x) 2))) (*.f64 (neg.f64 n) n))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) 2) (/.f64 n (pow.f64 (log.f64 x) 2))) n) (*.f64 n (/.f64 n (pow.f64 (log.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 n (pow.f64 (log.f64 x) 2)) (*.f64 (/.f64 n (pow.f64 (log1p.f64 x) 2)) 1)) (*.f64 (/.f64 n (pow.f64 (log1p.f64 x) 2)) (/.f64 n (pow.f64 (log.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 x) 2)) (/.f64 n (pow.f64 (log.f64 x) 2))) (*.f64 (neg.f64 n) 1)) (*.f64 (neg.f64 n) (/.f64 n (pow.f64 (log.f64 x) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (log1p.f64 x) 2) (neg.f64 n)) (*.f64 n (neg.f64 (pow.f64 (log.f64 x) 2)))) (*.f64 n (neg.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 n) (*.f64 (/.f64 n (pow.f64 (log1p.f64 x) 2)) (neg.f64 (pow.f64 (log.f64 x) 2)))) (*.f64 (/.f64 n (pow.f64 (log1p.f64 x) 2)) (neg.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (neg.f64 (pow.f64 (log1p.f64 x) 2)) (neg.f64 n)) (*.f64 (neg.f64 n) (neg.f64 (pow.f64 (log.f64 x) 2)))) (*.f64 (neg.f64 n) (neg.f64 n)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (neg.f64 (pow.f64 (log1p.f64 x) 2)) (neg.f64 (pow.f64 (log.f64 x) 2))) (neg.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 n 3)) (pow.f64 (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)) 3)) (+.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (-.f64 (*.f64 (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n))) (*.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 4) (*.f64 n n)) (*.f64 (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)))) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (*.f64 n (pow.f64 (log1p.f64 x) 2)) (*.f64 n (pow.f64 (log.f64 x) 2))) n) n)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) 1) n)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) (pow.f64 (cbrt.f64 n) 2)) (cbrt.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) (sqrt.f64 n)) (sqrt.f64 n))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (log1p.f64 x) 2) (/.f64 1 n) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n)) 2) (cbrt.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (log1p.f64 x) (sqrt.f64 n)) (/.f64 (log1p.f64 x) (sqrt.f64 n)) (neg.f64 (/.f64 (pow.f64 (log.f64 x) 2) n)))))))"]],"rules":[["egg-rr",61],["egg-rr",48],["egg-rr",42],["egg-rr",47]],"stop":[["node limit",1]],"time":85.012939453125,"type":"rewrite"},{"count":[[270,288]],"egraph":[[2,4765,3379,0.024380583],[1,1119,3668,0.008974124],[0,342,3937,0.001846833]],"inputs":[["(*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))","(+.f64 (*.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3))) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3))) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3))) (+.f64 (*.f64 -7/24 (/.f64 (pow.f64 x 5) (pow.f64 n 3))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))))","(*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x)))","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x))) (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 n 3))))) (pow.f64 x 2))))","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 n 3))) (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3)))))) (pow.f64 x 3))) (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 n 3))))) (pow.f64 x 2)))))","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 n 3))) (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3)))))) (pow.f64 x 3))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 n 3))))) (pow.f64 x 2))) (*.f64 -1/6 (/.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 11/12 (*.f64 1/2 (log.f64 (/.f64 1 x)))) (log.f64 (/.f64 1 x))) (pow.f64 n 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (log.f64 (/.f64 1 x))) (pow.f64 n 3))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (*.f64 -4/3 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3)))))) (/.f64 1 (pow.f64 n 3))) (pow.f64 x 4))))))","(*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x)))","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 n 3)) (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))) (pow.f64 x 2))) (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x))))","(+.f64 (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 n 3)) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))))) (pow.f64 x 3))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 n 3)) (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))) (pow.f64 x 2))) (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x)))))","(+.f64 (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 n 3)) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))))) (pow.f64 x 3))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 n 3)) (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))) (pow.f64 x 2))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))) (+.f64 (*.f64 2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (/.f64 (*.f64 (+.f64 11/12 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 n 3)))))) (pow.f64 x 4))) (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x))))))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1 (log.f64 x))","(+.f64 x (*.f64 -1 (log.f64 x)))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x))))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(*.f64 -1 (pow.f64 (log.f64 x) 3))","(+.f64 (pow.f64 x 3) (*.f64 -1 (pow.f64 (log.f64 x) 3)))","(+.f64 (*.f64 -3/2 (pow.f64 x 4)) (+.f64 (pow.f64 x 3) (*.f64 -1 (pow.f64 (log.f64 x) 3))))","(+.f64 (*.f64 -3/2 (pow.f64 x 4)) (+.f64 (*.f64 7/4 (pow.f64 x 5)) (+.f64 (pow.f64 x 3) (*.f64 -1 (pow.f64 (log.f64 x) 3)))))","(/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) x)","(+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 x 2))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2))) (+.f64 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x) (*.f64 2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 x 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 x 2))) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (*.f64 2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2))) (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)))))))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 x 3))) (+.f64 (*.f64 -4/3 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 4))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 x 2))) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (*.f64 2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (log.f64 (/.f64 1 x))) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 11/12 (*.f64 1/2 (log.f64 (/.f64 1 x)))) (log.f64 (/.f64 1 x))) (pow.f64 x 4))) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 4))) (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))))))))) (/.f64 1 (pow.f64 x 4)))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x))","(+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 x 2)) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 2))))))","(+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 x 2)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (+.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1/3 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)))))) (pow.f64 x 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 2)))))))","(+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (+.f64 (/.f64 (*.f64 (+.f64 11/12 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 x 4)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 x 2)) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (+.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1/3 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)))))) (pow.f64 x 3))) (+.f64 (*.f64 2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 4))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 2))))))))))))","(*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n))","(+.f64 (/.f64 (pow.f64 x 2) n) (*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n)))","(+.f64 (/.f64 (pow.f64 x 2) n) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) n)) (*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (/.f64 (pow.f64 x 2) n) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) n)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n)) (*.f64 11/12 (/.f64 (pow.f64 x 4) n)))))","(*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x)))","(+.f64 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 2))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x))) (/.f64 1 (*.f64 n (pow.f64 x 2)))))","(-.f64 (+.f64 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 2))) (+.f64 (*.f64 -2/3 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 3)))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x))) (/.f64 1 (*.f64 n (pow.f64 x 2)))))) (/.f64 1 (*.f64 n (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 11/12 (/.f64 1 (*.f64 n (pow.f64 x 4)))) (+.f64 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 2))) (+.f64 (*.f64 -2/3 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 3)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 4)))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x))) (/.f64 1 (*.f64 n (pow.f64 x 2)))))))) (/.f64 1 (*.f64 n (pow.f64 x 3))))","(*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x)))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 2)))) (+.f64 (/.f64 1 (*.f64 n (pow.f64 x 2))) (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x)))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 n) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 2)))) (+.f64 (/.f64 1 (*.f64 n (pow.f64 x 2))) (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x))))))","(+.f64 (*.f64 11/12 (/.f64 1 (*.f64 n (pow.f64 x 4)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 n) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 2)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 4)))) (+.f64 (/.f64 1 (*.f64 n (pow.f64 x 2))) (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x))))))))","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))","(/.f64 1/6 (/.f64 (pow.f64 n 3) (pow.f64 (log.f64 x) 3)))","(+.f64 (*.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))","(fma.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3)) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))","(fma.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3)) (/.f64 1/6 (/.f64 (pow.f64 n 3) (pow.f64 (log.f64 x) 3))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3))) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))))","(fma.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3)) (fma.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3)) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3)))))","(fma.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3)) (fma.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3)) (/.f64 1/6 (/.f64 (pow.f64 n 3) (pow.f64 (log.f64 x) 3)))))","(+.f64 (*.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3))) (+.f64 (*.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3))) (+.f64 (*.f64 -7/24 (/.f64 (pow.f64 x 5) (pow.f64 n 3))) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))))","(fma.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3)) (fma.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3)) (fma.f64 -7/24 (/.f64 (pow.f64 x 5) (pow.f64 n 3)) (*.f64 1/6 (/.f64 (pow.f64 (log.f64 x) 3) (pow.f64 n 3))))))","(fma.f64 1/4 (/.f64 (pow.f64 x 4) (pow.f64 n 3)) (fma.f64 -1/6 (/.f64 (pow.f64 x 3) (pow.f64 n 3)) (fma.f64 -7/24 (/.f64 (pow.f64 x 5) (pow.f64 n 3)) (/.f64 1/6 (/.f64 (pow.f64 n 3) (pow.f64 (log.f64 x) 3))))))","(*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x)))","(*.f64 -1/6 (/.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 x)) 2)) (*.f64 x (pow.f64 n 3))))","(/.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3))) x)","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x))) (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 n 3))))) (pow.f64 x 2))))","(*.f64 -1/6 (+.f64 (/.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 x)) 2)) (*.f64 x (pow.f64 n 3))) (/.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 n 3)) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (neg.f64 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (pow.f64 n 3) (+.f64 1 (neg.f64 (log.f64 x)))))))) (*.f64 x x))))","(fma.f64 -1/6 (/.f64 (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) (/.f64 (*.f64 2 (log.f64 x)) (pow.f64 n 3))) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 1 (log.f64 x)))) (*.f64 x x)) (/.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3))) x))","(*.f64 (/.f64 -1/6 x) (+.f64 (/.f64 3 (/.f64 (pow.f64 n 3) (pow.f64 (log.f64 x) 2))) (/.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 -2 (-.f64 1 (log.f64 x))))) x)))","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 n 3))) (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3)))))) (pow.f64 x 3))) (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 n 3))))) (pow.f64 x 2)))))","(fma.f64 -1/6 (/.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 x)) 2)) (*.f64 x (pow.f64 n 3))) (*.f64 -1/6 (+.f64 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (fma.f64 1/3 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 n 3)) (fma.f64 -1 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (pow.f64 n 3) (fma.f64 -2/3 (neg.f64 (log.f64 x)) -1))) (*.f64 2 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)))))) (pow.f64 x 3)) (/.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 n 3)) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (neg.f64 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (pow.f64 n 3) (+.f64 1 (neg.f64 (log.f64 x)))))))) (*.f64 x x)))))","(fma.f64 -1/6 (+.f64 (/.f64 (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) (/.f64 (*.f64 2 (log.f64 x)) (pow.f64 n 3))) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 1 (log.f64 x)))) (*.f64 x x)) (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) 1/3 (-.f64 (/.f64 (*.f64 -2 (log.f64 x)) (pow.f64 n 3)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (fma.f64 (neg.f64 (log.f64 x)) -2/3 -1))))) (pow.f64 x 3))) (/.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3))) x))","(fma.f64 -1/6 (+.f64 (/.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 -2 (-.f64 1 (log.f64 x))))) (*.f64 x x)) (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) 1/3 (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 2 (fma.f64 (log.f64 x) 2/3 -1))))) (pow.f64 x 3))) (/.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3))) x))","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) (*.f64 (pow.f64 n 3) x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 n 3))) (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3)))))) (pow.f64 x 3))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3))) (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 n 3))))) (pow.f64 x 2))) (*.f64 -1/6 (/.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 11/12 (*.f64 1/2 (log.f64 (/.f64 1 x)))) (log.f64 (/.f64 1 x))) (pow.f64 n 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (log.f64 (/.f64 1 x))) (pow.f64 n 3))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 n 3))) (*.f64 -4/3 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 n 3)))))) (/.f64 1 (pow.f64 n 3))) (pow.f64 x 4))))))","(fma.f64 -1/6 (/.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 x)) 2)) (*.f64 x (pow.f64 n 3))) (fma.f64 -1/6 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (fma.f64 1/3 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 n 3)) (fma.f64 -1 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (pow.f64 n 3) (fma.f64 -2/3 (neg.f64 (log.f64 x)) -1))) (*.f64 2 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)))))) (pow.f64 x 3)) (*.f64 -1/6 (+.f64 (/.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 n 3)) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (neg.f64 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (pow.f64 n 3) (+.f64 1 (neg.f64 (log.f64 x)))))))) (*.f64 x x)) (/.f64 (-.f64 (fma.f64 -1 (/.f64 (+.f64 11/12 (*.f64 (neg.f64 (log.f64 x)) 1/2)) (/.f64 (pow.f64 n 3) (neg.f64 (log.f64 x)))) (fma.f64 -1/2 (/.f64 (+.f64 1 (neg.f64 (log.f64 x))) (pow.f64 n 3)) (fma.f64 -1/4 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 n 3)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) -4/3)))) (/.f64 1 (pow.f64 n 3))) (pow.f64 x 4))))))","(+.f64 (/.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3))) x) (*.f64 -1/6 (+.f64 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) 1/3 (-.f64 (/.f64 (*.f64 -2 (log.f64 x)) (pow.f64 n 3)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (fma.f64 (neg.f64 (log.f64 x)) -2/3 -1))))) (pow.f64 x 3)) (+.f64 (/.f64 (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) (/.f64 (*.f64 2 (log.f64 x)) (pow.f64 n 3))) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 1 (log.f64 x)))) (*.f64 x x)) (/.f64 (+.f64 (-.f64 (fma.f64 -1/2 (/.f64 (-.f64 1 (log.f64 x)) (pow.f64 n 3)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) -1/4 (/.f64 (*.f64 4/3 (log.f64 x)) (pow.f64 n 3)))) (*.f64 (/.f64 (fma.f64 (neg.f64 (log.f64 x)) 1/2 11/12) (pow.f64 n 3)) (neg.f64 (log.f64 x)))) (/.f64 -1 (pow.f64 n 3))) (pow.f64 x 4))))))","(+.f64 (/.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3))) x) (*.f64 -1/6 (+.f64 (/.f64 (+.f64 (/.f64 1 (pow.f64 n 3)) (fma.f64 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) 1/3 (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 2 (fma.f64 (log.f64 x) 2/3 -1))))) (pow.f64 x 3)) (+.f64 (/.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 n 3)) (-.f64 -2 (-.f64 1 (log.f64 x))))) (*.f64 x x)) (/.f64 (+.f64 (/.f64 (log.f64 x) (/.f64 (pow.f64 n 3) (-.f64 11/12 (*.f64 1/2 (log.f64 x))))) (+.f64 (fma.f64 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 n 3)) -1/4 (/.f64 (*.f64 4/3 (log.f64 x)) (pow.f64 n 3))) (fma.f64 -1/2 (/.f64 (-.f64 1 (log.f64 x)) (pow.f64 n 3)) (/.f64 -1 (pow.f64 n 3))))) (pow.f64 x 4))))))","(*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x)))","(/.f64 (*.f64 1/6 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3)) (*.f64 x (pow.f64 n 3)))","(*.f64 1/6 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) x) (/.f64 -3 (pow.f64 n 3))))","(+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 n 3)) (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))) (pow.f64 x 2))) (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x))))","(fma.f64 -1/6 (/.f64 (+.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (/.f64 (pow.f64 n 3) (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))))) (fma.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (pow.f64 n 3)) (*.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (pow.f64 n 3))))) (*.f64 x x)) (/.f64 (*.f64 1/6 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3)) (*.f64 x (pow.f64 n 3))))","(fma.f64 -1/6 (/.f64 (+.f64 (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (/.f64 (*.f64 -1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (pow.f64 n 3)))) (*.f64 x x)) (*.f64 1/6 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) x) (/.f64 -3 (pow.f64 n 3)))))","(fma.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 -1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (pow.f64 n 3)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (+.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 x x)) (*.f64 1/6 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) x) (/.f64 -3 (pow.f64 n 3)))))","(+.f64 (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 n 3)) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))))) (pow.f64 x 3))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 n 3)) (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))) (pow.f64 x 2))) (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x)))))","(fma.f64 1/6 (/.f64 (fma.f64 -1 (/.f64 (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (pow.f64 n 3)) (+.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (fma.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3)) (+.f64 (/.f64 (+.f64 1 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (/.f64 (pow.f64 n 3) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (*.f64 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (pow.f64 n 3)) -1/3))))) (pow.f64 x 3)) (fma.f64 -1/6 (/.f64 (+.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (/.f64 (pow.f64 n 3) (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))))) (fma.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (pow.f64 n 3)) (*.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (pow.f64 n 3))))) (*.f64 x x)) (/.f64 (*.f64 1/6 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3)) (*.f64 x (pow.f64 n 3)))))","(fma.f64 1/6 (/.f64 (+.f64 (/.f64 (+.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (pow.f64 n 3)) (+.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 n 3)) -1/3 (*.f64 (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 n 3)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (-.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3))))) (pow.f64 x 3)) (fma.f64 -1/6 (/.f64 (+.f64 (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (/.f64 (*.f64 -1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (pow.f64 n 3)))) (*.f64 x x)) (*.f64 1/6 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) x) (/.f64 -3 (pow.f64 n 3))))))","(fma.f64 1/6 (/.f64 (+.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (+.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 n 3)) -1/3 (*.f64 (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 n 3)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (/.f64 (+.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (pow.f64 n 3)))) (pow.f64 x 3)) (fma.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 -1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (pow.f64 n 3)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (+.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 x x)) (*.f64 1/6 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) x) (/.f64 -3 (pow.f64 n 3))))))","(+.f64 (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (+.f64 (*.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3))) (+.f64 (/.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 n 3)) (*.f64 -1/3 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))))) (pow.f64 x 3))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 n 3)) (+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))))) (pow.f64 x 2))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 n 3))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 n 3))) (+.f64 (*.f64 2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3))) (/.f64 (*.f64 (+.f64 11/12 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 n 3)))))) (pow.f64 x 4))) (*.f64 1/6 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 (pow.f64 n 3) x))))))","(fma.f64 1/6 (/.f64 (fma.f64 -1 (/.f64 (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (pow.f64 n 3)) (+.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (fma.f64 -1 (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3)) (+.f64 (/.f64 (+.f64 1 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (/.f64 (pow.f64 n 3) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (*.f64 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (pow.f64 n 3)) -1/3))))) (pow.f64 x 3)) (fma.f64 -1/6 (/.f64 (+.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (/.f64 (pow.f64 n 3) (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))))) (fma.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (pow.f64 n 3)) (*.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (pow.f64 n 3))))) (*.f64 x x)) (fma.f64 -1/6 (/.f64 (fma.f64 -1 (/.f64 (+.f64 1 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (pow.f64 n 3)) (fma.f64 -1/2 (/.f64 (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (pow.f64 n 3)) (fma.f64 -1/4 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (pow.f64 n 3)) (fma.f64 2/3 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (pow.f64 n 3)) (/.f64 (+.f64 11/12 (*.f64 -1/2 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (/.f64 (pow.f64 n 3) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))))))) (pow.f64 x 4)) (/.f64 (*.f64 1/6 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3)) (*.f64 x (pow.f64 n 3))))))","(fma.f64 1/6 (/.f64 (+.f64 (/.f64 (+.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (pow.f64 n 3)) (+.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 n 3)) -1/3 (*.f64 (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 n 3)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (-.f64 (/.f64 (log.f64 -1) (pow.f64 n 3)) (/.f64 (log.f64 (/.f64 -1 x)) (pow.f64 n 3))))) (pow.f64 x 3)) (fma.f64 -1/6 (/.f64 (+.f64 (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (/.f64 (*.f64 -1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (pow.f64 n 3)))) (*.f64 x x)) (fma.f64 -1/6 (/.f64 (-.f64 (fma.f64 -1/2 (/.f64 (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (pow.f64 n 3)) (fma.f64 -1/4 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 n 3)) (fma.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) 2/3 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (/.f64 (pow.f64 n 3) (fma.f64 -1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 11/12)))))) (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 n 3))) (pow.f64 x 4)) (*.f64 1/6 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) x) (/.f64 -3 (pow.f64 n 3)))))))","(+.f64 (*.f64 -1/6 (+.f64 (/.f64 (+.f64 (/.f64 (*.f64 -1/2 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) (pow.f64 n 3)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (+.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) (*.f64 x x)) (/.f64 (-.f64 (fma.f64 -1/2 (/.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 n 3)) (fma.f64 -1/4 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 n 3)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 n n)) (+.f64 (/.f64 2/3 n) (/.f64 (fma.f64 -1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 11/12) n))))) (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 n 3))) (pow.f64 x 4)))) (*.f64 1/6 (+.f64 (*.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) x) (/.f64 -3 (pow.f64 n 3))) (/.f64 (+.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 n 3)) (+.f64 (fma.f64 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 n 3)) -1/3 (*.f64 (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 n 3)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (/.f64 (+.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (pow.f64 n 3)))) (pow.f64 x 3)))))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(/.f64 (*.f64 -1/6 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))) (pow.f64 n 3))","(*.f64 -1/6 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (pow.f64 n 3)))","(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 x (*.f64 -1 (log.f64 x)))","(+.f64 x (neg.f64 (log.f64 x)))","(-.f64 x (log.f64 x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x))))","(fma.f64 -1/2 (*.f64 x x) (+.f64 x (neg.f64 (log.f64 x))))","(-.f64 (fma.f64 -1/2 (*.f64 x x) x) (log.f64 x))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x)))))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 -1/2 (*.f64 x x) (+.f64 x (neg.f64 (log.f64 x)))))","(fma.f64 (pow.f64 x 3) 1/3 (-.f64 (fma.f64 -1/2 (*.f64 x x) x) (log.f64 x)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 -1/2 (*.f64 x x))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 1/4 (pow.f64 x 4)))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 1/4 (pow.f64 x 4)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 -1/2 (*.f64 x x))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 1/4 (pow.f64 x 4)))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 1/4 (pow.f64 x 4)))))","(*.f64 -1 (pow.f64 (log.f64 x) 3))","(neg.f64 (pow.f64 (log.f64 x) 3))","(pow.f64 (neg.f64 (log.f64 x)) 3)","(+.f64 (pow.f64 x 3) (*.f64 -1 (pow.f64 (log.f64 x) 3)))","(+.f64 (pow.f64 x 3) (neg.f64 (pow.f64 (log.f64 x) 3)))","(-.f64 (pow.f64 x 3) (pow.f64 (log.f64 x) 3))","(+.f64 (*.f64 -3/2 (pow.f64 x 4)) (+.f64 (pow.f64 x 3) (*.f64 -1 (pow.f64 (log.f64 x) 3))))","(fma.f64 -3/2 (pow.f64 x 4) (+.f64 (pow.f64 x 3) (neg.f64 (pow.f64 (log.f64 x) 3))))","(-.f64 (fma.f64 (pow.f64 x 4) -3/2 (pow.f64 x 3)) (pow.f64 (log.f64 x) 3))","(+.f64 (*.f64 -3/2 (pow.f64 x 4)) (+.f64 (*.f64 7/4 (pow.f64 x 5)) (+.f64 (pow.f64 x 3) (*.f64 -1 (pow.f64 (log.f64 x) 3)))))","(fma.f64 -3/2 (pow.f64 x 4) (fma.f64 7/4 (pow.f64 x 5) (+.f64 (pow.f64 x 3) (neg.f64 (pow.f64 (log.f64 x) 3)))))","(fma.f64 (pow.f64 x 4) -3/2 (-.f64 (fma.f64 (pow.f64 x 5) 7/4 (pow.f64 x 3)) (pow.f64 (log.f64 x) 3)))","(/.f64 (+.f64 (*.f64 2 (pow.f64 (log.f64 (/.f64 1 x)) 2)) (pow.f64 (log.f64 (/.f64 1 x)) 2)) x)","(/.f64 (*.f64 3 (pow.f64 (neg.f64 (log.f64 x)) 2)) x)","(*.f64 3 (/.f64 (pow.f64 (log.f64 x) 2) x))","(+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 x 2))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2))) (+.f64 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x) (*.f64 2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))","(fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (fma.f64 -1 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (*.f64 x x) (+.f64 1 (neg.f64 (log.f64 x))))) (fma.f64 -1/2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (*.f64 x x)) (*.f64 3 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) x)))))","(+.f64 (fma.f64 3 (/.f64 (pow.f64 (log.f64 x) 2) x) (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (log.f64 x) 2) x))) (-.f64 (/.f64 (*.f64 2 (log.f64 x)) (*.f64 x x)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (-.f64 1 (log.f64 x)))))","(+.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) x) (+.f64 (/.f64 -1/2 x) 3)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (-.f64 -2 (-.f64 1 (log.f64 x)))))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 x 3))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 x 2))) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (*.f64 2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2))) (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)))))))))","(fma.f64 -1 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (pow.f64 x 3) (fma.f64 -2/3 (neg.f64 (log.f64 x)) -1))) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (fma.f64 -1 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (*.f64 x x) (+.f64 1 (neg.f64 (log.f64 x))))) (+.f64 (/.f64 1 (pow.f64 x 3)) (fma.f64 2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) x) (fma.f64 2 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 x 3)) (fma.f64 1/3 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 x 3)) (fma.f64 -1/2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (*.f64 x x)) (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) x)))))))))","(-.f64 (+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (+.f64 (/.f64 (*.f64 -2 (log.f64 x)) (pow.f64 x 3)) (/.f64 (*.f64 (pow.f64 (log.f64 x) 2) 1/3) (pow.f64 x 3))) (fma.f64 3 (/.f64 (pow.f64 (log.f64 x) 2) x) (*.f64 (/.f64 -1/2 x) (/.f64 (pow.f64 (log.f64 x) 2) x))))) (-.f64 (/.f64 (*.f64 2 (log.f64 x)) (*.f64 x x)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (-.f64 1 (log.f64 x))))) (/.f64 (fma.f64 (neg.f64 (log.f64 x)) -2/3 -1) (/.f64 (pow.f64 x 3) (neg.f64 (log.f64 x)))))","(+.f64 (/.f64 (log.f64 x) (/.f64 (pow.f64 x 3) (fma.f64 (log.f64 x) 2/3 -1))) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (+.f64 (/.f64 (*.f64 (log.f64 x) -2) (pow.f64 x 3)) (/.f64 (*.f64 (pow.f64 (log.f64 x) 2) 1/3) (pow.f64 x 3))) (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) x) (+.f64 (/.f64 -1/2 x) 3)))) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (-.f64 -2 (-.f64 1 (log.f64 x))))))","(-.f64 (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (-.f64 (*.f64 -2/3 (log.f64 (/.f64 1 x))) 1)) (pow.f64 x 3))) (+.f64 (*.f64 -4/3 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 4))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (log.f64 (/.f64 1 x)) (+.f64 1 (log.f64 (/.f64 1 x)))) (pow.f64 x 2))) (+.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 (*.f64 2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x)) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (log.f64 (/.f64 1 x))) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (*.f64 (+.f64 11/12 (*.f64 1/2 (log.f64 (/.f64 1 x)))) (log.f64 (/.f64 1 x))) (pow.f64 x 4))) (+.f64 (*.f64 2 (/.f64 (log.f64 (/.f64 1 x)) (pow.f64 x 3))) (+.f64 (*.f64 1/3 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 3))) (+.f64 (*.f64 -1/2 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) (pow.f64 x 4))) (/.f64 (pow.f64 (log.f64 (/.f64 1 x)) 2) x))))))))))))) (/.f64 1 (pow.f64 x 4)))","(-.f64 (fma.f64 -1 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (pow.f64 x 3) (fma.f64 -2/3 (neg.f64 (log.f64 x)) -1))) (fma.f64 -4/3 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 x 4)) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (fma.f64 -1 (/.f64 (neg.f64 (log.f64 x)) (/.f64 (*.f64 x x) (+.f64 1 (neg.f64 (log.f64 x))))) (+.f64 (/.f64 1 (pow.f64 x 3)) (fma.f64 2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) x) (fma.f64 -1/2 (/.f64 (+.f64 1 (neg.f64 (log.f64 x))) (pow.f64 x 4)) (fma.f64 -1 (/.f64 (+.f64 11/12 (*.f64 (neg.f64 (log.f64 x)) 1/2)) (/.f64 (pow.f64 x 4) (neg.f64 (log.f64 x)))) (fma.f64 2 (/.f64 (neg.f64 (log.f64 x)) (pow.f64 x 3)) (fma.f64 1/3 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 x 3)) (fma.f64 -1/2 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) (pow.f64 x 4)) (/.f64 (pow.f64 (neg.f64 (log.f64 x)) 2) x))))))))))))) (/.f64 1 (pow.f64 x 4)))","(+.f64 (-.f64 (+.f64 (/.f64 (*.f64 4/3 (log.f64 x)) (pow.f64 x 4)) (+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (fma.f64 2 (/.f64 (pow.f64 (log.f64 x) 2) x) (fma.f64 -1/2 (/.f64 (-.f64 1 (log.f64 x)) (pow.f64 x 4)) (-.f64 (+.f64 (/.f64 (*.f64 -2 (log.f64 x)) (pow.f64 x 3)) (fma.f64 1/3 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 x 3)) (fma.f64 -1/2 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 x 4)) (/.f64 (pow.f64 (log.f64 x) 2) x))))) (*.f64 (/.f64 (fma.f64 (neg.f64 (log.f64 x)) 1/2 11/12) (pow.f64 x 4)) (neg.f64 (log.f64 x))))))) (-.f64 (/.f64 (*.f64 2 (log.f64 x)) (*.f64 x x)) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (-.f64 1 (log.f64 x)))))) (/.f64 (fma.f64 (neg.f64 (log.f64 x)) -2/3 -1) (/.f64 (pow.f64 x 3) (neg.f64 (log.f64 x))))) (/.f64 -1 (pow.f64 x 4)))","(+.f64 (/.f64 (log.f64 x) (/.f64 (pow.f64 x 3) (fma.f64 (log.f64 x) 2/3 -1))) (+.f64 (/.f64 (*.f64 4/3 (log.f64 x)) (pow.f64 x 4)) (+.f64 (+.f64 (+.f64 (/.f64 1 (pow.f64 x 3)) (fma.f64 2 (/.f64 (pow.f64 (log.f64 x) 2) x) (+.f64 (+.f64 (*.f64 (/.f64 (pow.f64 (log.f64 x) 2) (*.f64 x x)) (+.f64 -1/2 (/.f64 1/3 x))) (+.f64 (fma.f64 -1/4 (/.f64 (pow.f64 (log.f64 x) 2) (pow.f64 x 4)) (/.f64 (pow.f64 (log.f64 x) 2) x)) (/.f64 (*.f64 (log.f64 x) -2) (pow.f64 x 3)))) (fma.f64 -1/2 (/.f64 (-.f64 1 (log.f64 x)) (pow.f64 x 4)) (*.f64 (/.f64 (-.f64 11/12 (*.f64 1/2 (log.f64 x))) (pow.f64 x 4)) (log.f64 x)))))) (*.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x x)) (-.f64 -2 (-.f64 1 (log.f64 x))))) (/.f64 -1 (pow.f64 x 4)))))","(*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x))","(neg.f64 (/.f64 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3) x))","(/.f64 (*.f64 (neg.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) -3) x)","(/.f64 (*.f64 3 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) x)","(+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 x 2)) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 2))))))","(fma.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 x x)) (fma.f64 -1 (/.f64 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3) x) (+.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (/.f64 (*.f64 x x) (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))))) (*.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (*.f64 x x))))))","(fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (*.f64 x x)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (/.f64 x -3))))","(+.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (*.f64 x x)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) x) (/.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))) (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (/.f64 (*.f64 3 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) x)))","(+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 2))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 x 2)) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (+.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1/3 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)))))) (pow.f64 x 3))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 2)))))))","(fma.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 x x)) (fma.f64 -1 (/.f64 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3) x) (+.f64 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (/.f64 (*.f64 x x) (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))))) (fma.f64 -1 (/.f64 (+.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (fma.f64 -1 (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (fma.f64 (+.f64 1 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -1/3)))) (pow.f64 x 3)) (*.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (*.f64 x x)))))))","(fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (+.f64 (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (*.f64 x x)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (/.f64 x -3))) (/.f64 (neg.f64 (+.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (+.f64 (+.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (*.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) -1/3))))) (pow.f64 x 3))))","(+.f64 (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (*.f64 x x)) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) x) (/.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) x))) (/.f64 (+.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) -1/3) (+.f64 -1 (*.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (+.f64 1 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1)))))) (pow.f64 x 3))) (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (/.f64 (*.f64 3 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) x)))","(+.f64 (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 2))) (+.f64 (*.f64 -1/4 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)) (*.f64 -2 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2))) x)) (+.f64 (/.f64 (*.f64 (+.f64 11/12 (*.f64 -1/2 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (pow.f64 x 4)) (+.f64 (/.f64 (*.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (pow.f64 x 2)) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (pow.f64 x 4))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (+.f64 (log.f64 -1) (+.f64 (*.f64 -1 (+.f64 1 (*.f64 -1 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))))) (+.f64 (*.f64 (+.f64 1 (*.f64 -2/3 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)))) (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1))) (*.f64 -1/3 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2)))))) (pow.f64 x 3))) (+.f64 (*.f64 2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 4))) (*.f64 -1/2 (/.f64 (pow.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) 2) (pow.f64 x 2))))))))))))","(fma.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (pow.f64 x 4)) (fma.f64 -1 (/.f64 (+.f64 1 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (pow.f64 x 4)) (fma.f64 -1 (/.f64 (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -3) x) (+.f64 (+.f64 (/.f64 (+.f64 11/12 (*.f64 -1/2 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (/.f64 (pow.f64 x 4) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (/.f64 (*.f64 x x) (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))))))) (fma.f64 -1/2 (/.f64 (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (pow.f64 x 4)) (fma.f64 -1 (/.f64 (+.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (fma.f64 -1 (+.f64 1 (neg.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (fma.f64 (+.f64 1 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)))) (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) -1/3)))) (pow.f64 x 3)) (fma.f64 2/3 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (pow.f64 x 4)) (*.f64 -1/2 (/.f64 (pow.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) 2) (*.f64 x x)))))))))))","(fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 x 4)) (-.f64 (-.f64 (+.f64 (fma.f64 -1/2 (/.f64 (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (pow.f64 x 4)) (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (*.f64 x x)) (*.f64 2/3 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 x 4)))) (/.f64 (+.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (+.f64 (+.f64 -1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))) (fma.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (*.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) -1/3)))) (pow.f64 x 3)))) (+.f64 (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (-.f64 1 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))))) (*.f64 (/.f64 (fma.f64 -1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 11/12) (pow.f64 x 4)) (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x)))))) (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (/.f64 x -3))) (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 x 4)))))","(fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (fma.f64 -1/4 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (pow.f64 x 4)) (+.f64 (+.f64 (fma.f64 -1/2 (/.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (pow.f64 x 4)) (-.f64 (fma.f64 -1/2 (/.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) (*.f64 x x)) (*.f64 2/3 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (pow.f64 x 4)))) (/.f64 (+.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (+.f64 (*.f64 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2) -1/3) (+.f64 -1 (*.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (+.f64 1 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1)))))) (pow.f64 x 3)))) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x x)) (+.f64 (-.f64 (+.f64 1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (/.f64 (fma.f64 -1/2 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 11/12) (*.f64 x x))))) (-.f64 (/.f64 (*.f64 3 (pow.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 2)) x) (/.f64 (fma.f64 -2/3 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) 1) (pow.f64 x 4))))))","(*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n))","(/.f64 (neg.f64 (pow.f64 (log.f64 x) 2)) n)","(+.f64 (/.f64 (pow.f64 x 2) n) (*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n)))","(+.f64 (/.f64 (neg.f64 (pow.f64 (log.f64 x) 2)) n) (/.f64 (*.f64 x x) n))","(-.f64 (/.f64 x (/.f64 n x)) (/.f64 (pow.f64 (log.f64 x) 2) n))","(+.f64 (/.f64 (pow.f64 x 2) n) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) n)) (*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (/.f64 (*.f64 x x) n) (fma.f64 -1 (/.f64 (pow.f64 x 3) n) (/.f64 (neg.f64 (pow.f64 (log.f64 x) 2)) n)))","(-.f64 (-.f64 (/.f64 x (/.f64 n x)) (/.f64 (pow.f64 x 3) n)) (/.f64 (pow.f64 (log.f64 x) 2) n))","(+.f64 (/.f64 (pow.f64 x 2) n) (+.f64 (*.f64 -1 (/.f64 (pow.f64 x 3) n)) (+.f64 (*.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n)) (*.f64 11/12 (/.f64 (pow.f64 x 4) n)))))","(+.f64 (/.f64 (*.f64 x x) n) (fma.f64 -1 (/.f64 (pow.f64 x 3) n) (fma.f64 -1 (/.f64 (pow.f64 (log.f64 x) 2) n) (*.f64 11/12 (/.f64 (pow.f64 x 4) n)))))","(+.f64 (-.f64 (-.f64 (/.f64 x (/.f64 n x)) (/.f64 (pow.f64 x 3) n)) (/.f64 (pow.f64 (log.f64 x) 2) n)) (*.f64 11/12 (/.f64 (pow.f64 x 4) n)))","(*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x)))","(*.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x n)))","(/.f64 (*.f64 2 (log.f64 x)) (*.f64 x n))","(/.f64 (*.f64 (log.f64 x) 2) (*.f64 x n))","(+.f64 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 2))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x))) (/.f64 1 (*.f64 n (pow.f64 x 2)))))","(+.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 n (*.f64 x x))) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x n)) (/.f64 1 (*.f64 n (*.f64 x x)))))","(+.f64 (+.f64 (/.f64 (/.f64 (neg.f64 (log.f64 x)) n) (*.f64 x x)) (/.f64 1 (*.f64 n (*.f64 x x)))) (/.f64 (*.f64 2 (log.f64 x)) (*.f64 x n)))","(+.f64 (/.f64 (*.f64 (log.f64 x) 2) (*.f64 x n)) (-.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (/.f64 (log.f64 x) (*.f64 n (*.f64 x x)))))","(-.f64 (+.f64 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 2))) (+.f64 (*.f64 -2/3 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 3)))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x))) (/.f64 1 (*.f64 n (pow.f64 x 2)))))) (/.f64 1 (*.f64 n (pow.f64 x 3))))","(-.f64 (+.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 n (*.f64 x x))) (fma.f64 -2/3 (/.f64 (neg.f64 (log.f64 x)) (*.f64 n (pow.f64 x 3))) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x n)) (/.f64 1 (*.f64 n (*.f64 x x)))))) (/.f64 1 (*.f64 n (pow.f64 x 3))))","(+.f64 (+.f64 (+.f64 (+.f64 (/.f64 (/.f64 (neg.f64 (log.f64 x)) n) (*.f64 x x)) (/.f64 1 (*.f64 n (*.f64 x x)))) (/.f64 (*.f64 2 (log.f64 x)) (*.f64 x n))) (/.f64 (*.f64 (log.f64 x) 2/3) (*.f64 n (pow.f64 x 3)))) (/.f64 -1 (*.f64 n (pow.f64 x 3))))","(+.f64 (+.f64 (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (+.f64 (/.f64 -2 x) (/.f64 -2/3 (pow.f64 x 3)))) (-.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (/.f64 (log.f64 x) (*.f64 n (*.f64 x x))))) (/.f64 (/.f64 -1 n) (pow.f64 x 3)))","(-.f64 (+.f64 (*.f64 11/12 (/.f64 1 (*.f64 n (pow.f64 x 4)))) (+.f64 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 2))) (+.f64 (*.f64 -2/3 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 3)))) (+.f64 (*.f64 1/2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n (pow.f64 x 4)))) (+.f64 (*.f64 -2 (/.f64 (log.f64 (/.f64 1 x)) (*.f64 n x))) (/.f64 1 (*.f64 n (pow.f64 x 2)))))))) (/.f64 1 (*.f64 n (pow.f64 x 3))))","(+.f64 (/.f64 11/12 (*.f64 n (pow.f64 x 4))) (-.f64 (+.f64 (/.f64 (neg.f64 (log.f64 x)) (*.f64 n (*.f64 x x))) (fma.f64 -2/3 (/.f64 (neg.f64 (log.f64 x)) (*.f64 n (pow.f64 x 3))) (fma.f64 1/2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 n (pow.f64 x 4))) (fma.f64 -2 (/.f64 (neg.f64 (log.f64 x)) (*.f64 x n)) (/.f64 1 (*.f64 n (*.f64 x x))))))) (/.f64 1 (*.f64 n (pow.f64 x 3)))))","(+.f64 (/.f64 11/12 (*.f64 n (pow.f64 x 4))) (+.f64 (+.f64 (/.f64 (*.f64 (log.f64 x) 2/3) (*.f64 n (pow.f64 x 3))) (+.f64 (+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (+.f64 (/.f64 (*.f64 2 (log.f64 x)) (*.f64 x n)) (/.f64 (*.f64 (log.f64 x) -1/2) (*.f64 n (pow.f64 x 4))))) (/.f64 (/.f64 (neg.f64 (log.f64 x)) n) (*.f64 x x)))) (/.f64 -1 (*.f64 n (pow.f64 x 3)))))","(+.f64 (/.f64 11/12 (*.f64 n (pow.f64 x 4))) (+.f64 (+.f64 (/.f64 (*.f64 (log.f64 x) 2/3) (*.f64 n (pow.f64 x 3))) (-.f64 (+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (*.f64 (/.f64 (neg.f64 (log.f64 x)) n) (+.f64 (/.f64 -2 x) (/.f64 1/2 (pow.f64 x 4))))) (/.f64 (log.f64 x) (*.f64 n (*.f64 x x))))) (/.f64 (/.f64 -1 n) (pow.f64 x 3))))","(*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x)))","(*.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 x n)))","(*.f64 (/.f64 2 x) (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 2)))) (+.f64 (/.f64 1 (*.f64 n (pow.f64 x 2))) (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x)))))","(fma.f64 -1 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 n (*.f64 x x))) (+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (*.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 x n)))))","(-.f64 (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x n)) (/.f64 1 (*.f64 n (*.f64 x x)))) (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 n (*.f64 x x))))","(+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n) (+.f64 (/.f64 2 x) (/.f64 -1 (*.f64 x x)))))","(+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 n) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 2)))) (+.f64 (/.f64 1 (*.f64 n (pow.f64 x 2))) (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x))))))","(fma.f64 -1 (/.f64 (+.f64 (/.f64 1 n) (/.f64 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) n)) (pow.f64 x 3)) (fma.f64 -1 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 n (*.f64 x x))) (+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (*.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 x n))))))","(-.f64 (-.f64 (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x n)) (/.f64 1 (*.f64 n (*.f64 x x)))) (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 n (*.f64 x x)))) (/.f64 (fma.f64 -2/3 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n) (/.f64 1 n)) (pow.f64 x 3)))","(-.f64 (+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n) (+.f64 (/.f64 2 x) (/.f64 -1 (*.f64 x x))))) (/.f64 (fma.f64 -2/3 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n) (/.f64 1 n)) (pow.f64 x 3)))","(+.f64 (*.f64 11/12 (/.f64 1 (*.f64 n (pow.f64 x 4)))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (/.f64 1 n) (*.f64 -2/3 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) n))) (pow.f64 x 3))) (+.f64 (*.f64 -1 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 2)))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n (pow.f64 x 4)))) (+.f64 (/.f64 1 (*.f64 n (pow.f64 x 2))) (*.f64 2 (/.f64 (+.f64 (*.f64 -1 (log.f64 (/.f64 -1 x))) (log.f64 -1)) (*.f64 n x))))))))","(+.f64 (/.f64 11/12 (*.f64 n (pow.f64 x 4))) (fma.f64 -1 (/.f64 (+.f64 (/.f64 1 n) (/.f64 (*.f64 -2/3 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1))) n)) (pow.f64 x 3)) (fma.f64 -1 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 n (*.f64 x x))) (fma.f64 -1/2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 n (pow.f64 x 4))) (+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (*.f64 2 (/.f64 (fma.f64 -1 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 x n))))))))","(+.f64 (-.f64 (fma.f64 -1/2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 n (pow.f64 x 4))) (fma.f64 2 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 x n)) (/.f64 1 (*.f64 n (*.f64 x x))))) (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) (*.f64 n (*.f64 x x)))) (-.f64 (/.f64 11/12 (*.f64 n (pow.f64 x 4))) (/.f64 (fma.f64 -2/3 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n) (/.f64 1 n)) (pow.f64 x 3))))","(+.f64 (/.f64 11/12 (*.f64 n (pow.f64 x 4))) (+.f64 (/.f64 (-.f64 (log.f64 (/.f64 -1 x)) (log.f64 -1)) (*.f64 n (*.f64 x x))) (-.f64 (+.f64 (/.f64 1 (*.f64 n (*.f64 x x))) (*.f64 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n) (+.f64 (/.f64 2 x) (/.f64 -1/2 (pow.f64 x 4))))) (/.f64 (fma.f64 -2/3 (/.f64 (-.f64 (log.f64 -1) (log.f64 (/.f64 -1 x))) n) (/.f64 1 n)) (pow.f64 x 3)))))","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log.f64 (+.f64 1 x)) 2) (pow.f64 (log.f64 x) 2)) n)","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 (pow.f64 (log.f64 (+.f64 1 x)) 2)) (*.f64 -1 (pow.f64 (log.f64 x) 2))) n))","(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 2) (pow.f64 (log.f64 x) 2)) n)"]],"stop":[["node limit",1]],"time":66.593017578125,"type":"simplify"},{"compiler":[[17221,10490]],"time":174.3828125,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)","fresh",33.203308671580395],["(+.f64 (-.f64 (/.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",41.28441969944665],["(+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 (log.f64 x) 6)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.283347093106233],["(+.f64 (-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.258117089530785],["(+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3))))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.263963427013074],["(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","fresh",36.3610101769632],["(+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","next",25.098533507234215],["(+.f64 (-.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 3) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.368720523033723]],"compiler":[[17,13],[47,33],[71,44],[63,40],[79,48],[30,16],[44,31],[46,31],[17,13],[47,33],[71,44],[63,40],[79,48],[30,16],[44,31],[46,31]],"count":[[291,8]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[288,6],"picked":[1,0]}],"min-error":[0.0859375],"time":93.47802734375,"type":"prune"},{"compiler":[[194,120]],"locations":[["(-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))",2.8724244573953905,false],["(log.f64 (/.f64 (+.f64 x 1) x))",3.0114113597534695,true],["(-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))",3.0463279001216614,false],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))",6.584097004431934,false]],"time":51.444091796875,"type":"localize"},{"count":[[1,12]],"series":[["(log.f64 (/.f64 (+.f64 x 1) x))","x","-inf",0.297119140625],["(log.f64 (/.f64 (+.f64 x 1) x))","x","inf",0.260009765625],["(log.f64 (/.f64 (+.f64 x 1) x))","x","0",0.26708984375]],"time":0.8759765625,"type":"series"},{"count":[[1,25]],"egraph":[[2,1707,8,0.017017251],[1,127,8,0.0022893759999999997],[0,6,9,0.000180667]],"inputs":[["(log.f64 (/.f64 (+.f64 x 1) x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (-.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log1p.f64 x) (neg.f64 (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2)) (log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (/.f64 (+.f64 x 1) x))) (log.f64 (sqrt.f64 (/.f64 (+.f64 x 1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (-.f64 (log.f64 x) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 x) (log.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (-.f64 (log1p.f64 x) (log.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (+.f64 (neg.f64 x) -1)) (log.f64 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 2) (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (+.f64 (*.f64 (log1p.f64 x) (log1p.f64 x)) (+.f64 (*.f64 (log.f64 x) (log.f64 x)) (*.f64 (log1p.f64 x) (log.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (log1p.f64 x) (log1p.f64 x)) (*.f64 (log.f64 x) (log.f64 x))) (+.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (-.f64 (log.f64 x) (log1p.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (/.f64 (+.f64 x 1) x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (log1p.f64 x) (log.f64 x))))))))"]],"rules":[["egg-rr",25]],"stop":[["node limit",1]],"time":34.85791015625,"type":"rewrite"},{"count":[[37,40]],"egraph":[[4,2095,181,0.016556459],[3,647,181,0.004719959],[2,224,184,0.001624625],[1,88,184,0.000603417],[0,33,190,0.0001835]],"inputs":[["(*.f64 -1 (log.f64 x))","(+.f64 x (*.f64 -1 (log.f64 x)))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x))))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1 (log.f64 x))","(neg.f64 (log.f64 x))","(+.f64 x (*.f64 -1 (log.f64 x)))","(+.f64 x (neg.f64 (log.f64 x)))","(-.f64 x (log.f64 x))","(+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x))))","(fma.f64 -1/2 (*.f64 x x) (+.f64 x (neg.f64 (log.f64 x))))","(fma.f64 -1/2 (*.f64 x x) (-.f64 x (log.f64 x)))","(-.f64 (fma.f64 x (*.f64 x -1/2) x) (log.f64 x))","(+.f64 (*.f64 1/3 (pow.f64 x 3)) (+.f64 (*.f64 -1/2 (pow.f64 x 2)) (+.f64 x (*.f64 -1 (log.f64 x)))))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 -1/2 (*.f64 x x) (+.f64 x (neg.f64 (log.f64 x)))))","(fma.f64 1/3 (pow.f64 x 3) (fma.f64 -1/2 (*.f64 x x) (-.f64 x (log.f64 x))))","(-.f64 (fma.f64 1/3 (pow.f64 x 3) (fma.f64 x (*.f64 x -1/2) x)) (log.f64 x))","(fma.f64 (*.f64 x x) (fma.f64 x 1/3 -1/2) (-.f64 x (log.f64 x)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 1/2 (*.f64 x x))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) (/.f64 1/3 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 -1/3 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 1/4 (pow.f64 x 4)))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 -1/4 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (+.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 -1/4 (pow.f64 x 4)))))","(+.f64 (-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 -1/3 (pow.f64 x 3)))) (/.f64 -1/4 (pow.f64 x 4)))","(/.f64 1 x)","(-.f64 (/.f64 1 x) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x)))","(+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (*.f64 1/2 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (/.f64 1/2 (*.f64 x x))))","(+.f64 (/.f64 1 x) (-.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 1/2 (*.f64 x x))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) (/.f64 1/3 (pow.f64 x 3)))","(-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 -1/3 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 3))) (/.f64 1 x)) (+.f64 (*.f64 1/4 (/.f64 1 (pow.f64 x 4))) (*.f64 1/2 (/.f64 1 (pow.f64 x 2)))))","(+.f64 (/.f64 1/3 (pow.f64 x 3)) (-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 1/4 (pow.f64 x 4)))))","(+.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (/.f64 -1/4 (pow.f64 x 4))))","(+.f64 (/.f64 1 x) (+.f64 (/.f64 1/3 (pow.f64 x 3)) (+.f64 (/.f64 -1/2 (*.f64 x x)) (/.f64 -1/4 (pow.f64 x 4)))))","(+.f64 (-.f64 (/.f64 1 x) (+.f64 (/.f64 1/2 (*.f64 x x)) (/.f64 -1/3 (pow.f64 x 3)))) (/.f64 -1/4 (pow.f64 x 4)))"]],"stop":[["node limit",1]],"time":30.468017578125,"type":"simplify"},{"compiler":[[16435,11094]],"time":169.531005859375,"type":"eval"},{"alts":[["(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)","fresh",33.203308671580395],["(+.f64 (-.f64 (/.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2)) (log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","next",25.16312414072882],["(+.f64 (-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.258117089530785],["(+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3))))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.263963427013074],["(+.f64 (-.f64 (/.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",41.28441969944665],["(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","fresh",36.3610101769632],["(+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","done",25.098533507234215],["(+.f64 (-.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 3) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.368720523033723]],"compiler":[[17,13],[55,40],[63,40],[79,48],[47,33],[30,16],[44,31],[46,31],[17,13],[55,40],[63,40],[79,48],[47,33],[30,16],[46,31]],"count":[[279,8]],"kept":[{"done":[0,0],"fresh":[7,5],"new":[271,2],"picked":[1,1]}],"min-error":[0.0859375],"time":83.31298828125,"type":"prune"},{"compiler":[[268,178]],"locations":[["(log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2))",3.0200133265343156,true],["(log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))",3.03867693018603,true],["(-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3))",3.0463279001216614,false],["(/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))",6.584097004431934,false]],"time":75.384033203125,"type":"localize"},{"count":[[2,16]],"series":[["(log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2))","x","-inf",1.22607421875],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2))","x","inf",0.359130859375],["(log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2))","x","0",0.64208984375],["(log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))","x","-inf",1.390869140625],["(log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))","x","inf",0.4169921875],["(log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))","x","0",0.707763671875]],"time":4.8701171875,"type":"series"},{"count":[[2,45]],"egraph":[[2,2495,25,0.021553166000000002],[1,207,25,0.003738291],[0,10,25,0.000303041]],"inputs":[["(log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))","(log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (/.f64 (+.f64 x 1) x) 1/6)) (log.f64 (pow.f64 (/.f64 (+.f64 x 1) x) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x))) 2)) (log.f64 (cbrt.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (cbrt.f64 (+.f64 x 1))) (log.f64 (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) (pow.f64 (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 2) (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) (sqrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/3 (-.f64 (log1p.f64 x) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 4))) (log.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 2 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)) (cbrt.f64 (*.f64 4 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 4 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))) (cbrt.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 2) (*.f64 (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)) (sqrt.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) (*.f64 (sqrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (pow.f64 (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)) 2)) (cbrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 2 (sqrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3))) (sqrt.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 4 (pow.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (-.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2)))))))"]],"rules":[["egg-rr",24],["egg-rr",21]],"stop":[["node limit",1]],"time":42.412841796875,"type":"rewrite"},{"count":[[61,75]],"egraph":[[4,7225,515,0.034466207],[3,3853,517,0.02095554],[2,1089,533,0.008834749],[1,370,562,0.002575499],[0,130,628,0.000680833]],"inputs":[["(/.f64 1/3 x)","(-.f64 (*.f64 1/3 (/.f64 1 x)) (*.f64 1/6 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 (pow.f64 x 3))) (*.f64 1/3 (/.f64 1 x))) (*.f64 1/6 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 (pow.f64 x 3))) (*.f64 1/3 (/.f64 1 x))) (+.f64 (*.f64 1/6 (/.f64 1 (pow.f64 x 2))) (*.f64 1/12 (/.f64 1 (pow.f64 x 4)))))","(log.f64 (pow.f64 (cbrt.f64 -1) 2))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 -1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3))) (pow.f64 x 2)))))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) (*.f64 2 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))))) (pow.f64 x 3))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 -1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3))) (pow.f64 x 2))))))","(/.f64 2/3 x)","(-.f64 (*.f64 2/3 (/.f64 1 x)) (*.f64 1/3 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 2/9 (/.f64 1 (pow.f64 x 3))) (*.f64 2/3 (/.f64 1 x))) (*.f64 1/3 (/.f64 1 (pow.f64 x 2))))","(-.f64 (+.f64 (*.f64 2/9 (/.f64 1 (pow.f64 x 3))) (*.f64 2/3 (/.f64 1 x))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 2))) (*.f64 1/6 (/.f64 1 (pow.f64 x 4)))))","(log.f64 (pow.f64 (cbrt.f64 -1) 4))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 4)) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 4)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -4/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))) (pow.f64 (cbrt.f64 -1) 4)))) (pow.f64 x 2)))))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 4)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 6 (/.f64 (+.f64 (*.f64 -2/3 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (cbrt.f64 -1))))) (pow.f64 (cbrt.f64 -1) 4))) (+.f64 (*.f64 16/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (*.f64 -4 (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 17)) 1/3))))) (pow.f64 x 3))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -4/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))) (pow.f64 (cbrt.f64 -1) 4)))) (pow.f64 x 2))))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/3 x)","(-.f64 (*.f64 1/3 (/.f64 1 x)) (*.f64 1/6 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 1/3 x) (/.f64 1/6 (*.f64 x x)))","(+.f64 (/.f64 1/3 x) (/.f64 -1/6 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 (pow.f64 x 3))) (*.f64 1/3 (/.f64 1 x))) (*.f64 1/6 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 1/9 (pow.f64 x 3)) (-.f64 (/.f64 1/3 x) (/.f64 1/6 (*.f64 x x))))","(+.f64 (/.f64 1/3 x) (-.f64 (/.f64 1/9 (pow.f64 x 3)) (/.f64 1/6 (*.f64 x x))))","(+.f64 (/.f64 1/3 x) (+.f64 (/.f64 1/9 (pow.f64 x 3)) (/.f64 -1/6 (*.f64 x x))))","(-.f64 (/.f64 1/3 x) (-.f64 (/.f64 1/6 (*.f64 x x)) (/.f64 1/9 (pow.f64 x 3))))","(-.f64 (+.f64 (*.f64 1/9 (/.f64 1 (pow.f64 x 3))) (*.f64 1/3 (/.f64 1 x))) (+.f64 (*.f64 1/6 (/.f64 1 (pow.f64 x 2))) (*.f64 1/12 (/.f64 1 (pow.f64 x 4)))))","(-.f64 (+.f64 (/.f64 1/9 (pow.f64 x 3)) (-.f64 (/.f64 1/3 x) (/.f64 1/6 (*.f64 x x)))) (/.f64 1/12 (pow.f64 x 4)))","(+.f64 (/.f64 1/3 x) (-.f64 (/.f64 1/9 (pow.f64 x 3)) (+.f64 (/.f64 1/6 (*.f64 x x)) (/.f64 1/12 (pow.f64 x 4)))))","(+.f64 (/.f64 1/3 x) (+.f64 (+.f64 (/.f64 1/9 (pow.f64 x 3)) (/.f64 -1/6 (*.f64 x x))) (/.f64 -1/12 (pow.f64 x 4))))","(+.f64 (/.f64 1/3 x) (+.f64 (/.f64 1/9 (pow.f64 x 3)) (+.f64 (/.f64 -1/6 (*.f64 x x)) (/.f64 -1/12 (pow.f64 x 4)))))","(log.f64 (pow.f64 (cbrt.f64 -1) 2))","(*.f64 2 (log.f64 (cbrt.f64 -1)))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))))","(+.f64 (*.f64 2 (log.f64 (cbrt.f64 -1))) (*.f64 -1/3 (*.f64 (/.f64 1 x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))))))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (*.f64 -1/3 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x)))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 -1/3 x)))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 -1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3))) (pow.f64 x 2)))))","(+.f64 (*.f64 2 (log.f64 (cbrt.f64 -1))) (fma.f64 -1/3 (*.f64 (/.f64 1 x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) (*.f64 1/2 (/.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) -1/3) (*.f64 x x)))))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (fma.f64 -1/3 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x) (*.f64 1/2 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) x) (/.f64 -1/3 x)))))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (fma.f64 -1/3 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x) (/.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) -1/6) (*.f64 x x))))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (*.f64 (/.f64 -1/3 x) (+.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)))) x))))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 2)) (+.f64 (*.f64 -1/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (+.f64 (*.f64 2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) (*.f64 2 (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)))))))) (pow.f64 x 3))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 -1/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3))) (pow.f64 x 2))))))","(+.f64 (*.f64 2 (log.f64 (cbrt.f64 -1))) (fma.f64 -1/3 (*.f64 (/.f64 1 x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) (fma.f64 -1/6 (/.f64 (+.f64 (/.f64 2/27 (pow.f64 (cbrt.f64 -1) 5)) (fma.f64 2/9 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) (*.f64 2 (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))))) (pow.f64 x 3)) (*.f64 1/2 (/.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) -1/3) (*.f64 x x))))))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (fma.f64 -1/3 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x) (fma.f64 1/2 (*.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) x) (/.f64 -1/3 x)) (*.f64 -1/6 (/.f64 (+.f64 (*.f64 2 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) -5/27)) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 8/27)) (pow.f64 x 3))))))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (fma.f64 -1/3 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x) (fma.f64 -1/6 (/.f64 (fma.f64 2 (/.f64 -5/27 (pow.f64 (cbrt.f64 -1) 2)) (/.f64 8/27 (pow.f64 (cbrt.f64 -1) 5))) (pow.f64 x 3)) (/.f64 (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) -1/6) (*.f64 x x)))))","(fma.f64 2 (log.f64 (cbrt.f64 -1)) (fma.f64 -1/6 (/.f64 (fma.f64 2 (/.f64 -5/27 (pow.f64 (cbrt.f64 -1) 2)) (/.f64 8/27 (pow.f64 (cbrt.f64 -1) 5))) (pow.f64 x 3)) (*.f64 (/.f64 -1/3 x) (+.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 (*.f64 1/2 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)))) x)))))","(/.f64 2/3 x)","(-.f64 (*.f64 2/3 (/.f64 1 x)) (*.f64 1/3 (/.f64 1 (pow.f64 x 2))))","(-.f64 (/.f64 2/3 x) (/.f64 1/3 (*.f64 x x)))","(+.f64 (/.f64 2/3 x) (/.f64 -1/3 (*.f64 x x)))","(-.f64 (+.f64 (*.f64 2/9 (/.f64 1 (pow.f64 x 3))) (*.f64 2/3 (/.f64 1 x))) (*.f64 1/3 (/.f64 1 (pow.f64 x 2))))","(+.f64 (/.f64 2/9 (pow.f64 x 3)) (-.f64 (/.f64 2/3 x) (/.f64 1/3 (*.f64 x x))))","(+.f64 (/.f64 2/3 x) (-.f64 (/.f64 2/9 (pow.f64 x 3)) (/.f64 1/3 (*.f64 x x))))","(+.f64 (+.f64 (/.f64 2/3 x) (/.f64 2/9 (pow.f64 x 3))) (/.f64 -1/3 (*.f64 x x)))","(+.f64 (/.f64 2/3 x) (+.f64 (/.f64 2/9 (pow.f64 x 3)) (/.f64 -1/3 (*.f64 x x))))","(-.f64 (+.f64 (*.f64 2/9 (/.f64 1 (pow.f64 x 3))) (*.f64 2/3 (/.f64 1 x))) (+.f64 (*.f64 1/3 (/.f64 1 (pow.f64 x 2))) (*.f64 1/6 (/.f64 1 (pow.f64 x 4)))))","(+.f64 (/.f64 2/9 (pow.f64 x 3)) (-.f64 (/.f64 2/3 x) (+.f64 (/.f64 1/3 (*.f64 x x)) (/.f64 1/6 (pow.f64 x 4)))))","(-.f64 (+.f64 (/.f64 2/3 x) (/.f64 2/9 (pow.f64 x 3))) (+.f64 (/.f64 1/3 (*.f64 x x)) (/.f64 1/6 (pow.f64 x 4))))","(+.f64 (/.f64 2/3 x) (+.f64 (/.f64 2/9 (pow.f64 x 3)) (+.f64 (/.f64 -1/3 (*.f64 x x)) (/.f64 -1/6 (pow.f64 x 4)))))","(+.f64 (/.f64 2/3 x) (+.f64 (/.f64 -1/3 (*.f64 x x)) (+.f64 (/.f64 2/9 (pow.f64 x 3)) (/.f64 -1/6 (pow.f64 x 4)))))","(+.f64 (/.f64 2/3 x) (fma.f64 (/.f64 1 (pow.f64 x 3)) (+.f64 2/9 (/.f64 -1/6 x)) (/.f64 -1/3 (*.f64 x x))))","(log.f64 (pow.f64 (cbrt.f64 -1) 4))","(*.f64 4 (log.f64 (cbrt.f64 -1)))","(log.f64 (neg.f64 (cbrt.f64 -1)))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 4)) (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))))","(+.f64 (*.f64 4 (log.f64 (cbrt.f64 -1))) (*.f64 (*.f64 (/.f64 1 x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) -2/3))","(fma.f64 4 (log.f64 (cbrt.f64 -1)) (*.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x) -2/3))","(fma.f64 4 (log.f64 (cbrt.f64 -1)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 -2/3 x)))","(fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 -2/3 x) (log.f64 (neg.f64 (cbrt.f64 -1))))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 4)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -4/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))) (pow.f64 (cbrt.f64 -1) 4)))) (pow.f64 x 2)))))","(+.f64 (*.f64 4 (log.f64 (cbrt.f64 -1))) (fma.f64 -2/3 (*.f64 (/.f64 1 x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) (*.f64 1/2 (/.f64 (fma.f64 -4/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) (*.f64 2 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) -1/9) (pow.f64 (cbrt.f64 -1) 4)))) (*.f64 x x)))))","(fma.f64 4 (log.f64 (cbrt.f64 -1)) (fma.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x) -2/3 (*.f64 1/2 (/.f64 (fma.f64 2 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (pow.f64 (cbrt.f64 -1) 4) -1/9)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) -4/9)) (*.f64 x x)))))","(fma.f64 4 (log.f64 (cbrt.f64 -1)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 -2/3 x) (/.f64 (+.f64 (*.f64 -2/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)))) (*.f64 1 (*.f64 1/9 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) (cbrt.f64 -1))))) (*.f64 x x))))","(fma.f64 4 (log.f64 (cbrt.f64 -1)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 -2/3 x) (/.f64 (+.f64 (*.f64 -2/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)))) (*.f64 1/9 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) (cbrt.f64 -1)))) (*.f64 x x))))","(+.f64 (log.f64 (pow.f64 (cbrt.f64 -1) 4)) (+.f64 (*.f64 -2/3 (*.f64 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)) 1/3) (/.f64 1 x))) (+.f64 (*.f64 -1/6 (/.f64 (+.f64 (*.f64 6 (/.f64 (+.f64 (*.f64 -2/3 (*.f64 (cbrt.f64 -1) (+.f64 (*.f64 1/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))) (*.f64 -2/9 (*.f64 (pow.f64 1 1/3) (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))))) (*.f64 -2/27 (*.f64 (pow.f64 1 1/3) (/.f64 1 (cbrt.f64 -1))))) (pow.f64 (cbrt.f64 -1) 4))) (+.f64 (*.f64 16/27 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (*.f64 -4 (*.f64 (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))) (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 17)) 1/3))))) (pow.f64 x 3))) (*.f64 1/2 (/.f64 (+.f64 (*.f64 -4/9 (pow.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)) 1/3)) (*.f64 2 (/.f64 (+.f64 (*.f64 -2/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3)) (*.f64 1/9 (pow.f64 (*.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 1/3))) (pow.f64 (cbrt.f64 -1) 4)))) (pow.f64 x 2))))))","(+.f64 (*.f64 4 (log.f64 (cbrt.f64 -1))) (fma.f64 -2/3 (*.f64 (/.f64 1 x) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5)))) (fma.f64 -1/6 (/.f64 (fma.f64 6 (/.f64 (fma.f64 -2/3 (*.f64 (cbrt.f64 -1) (+.f64 (/.f64 1/27 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -2/9 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2))))) (*.f64 -2/27 (/.f64 1 (cbrt.f64 -1)))) (pow.f64 (cbrt.f64 -1) 4)) (+.f64 (/.f64 16/27 (pow.f64 (cbrt.f64 -1) 5)) (*.f64 (*.f64 -4 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) -1/9)) (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 17)))))) (pow.f64 x 3)) (*.f64 1/2 (/.f64 (fma.f64 -4/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) (*.f64 2 (/.f64 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) -1/9) (pow.f64 (cbrt.f64 -1) 4)))) (*.f64 x x))))))","(fma.f64 4 (log.f64 (cbrt.f64 -1)) (fma.f64 (/.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) x) -2/3 (fma.f64 1/2 (/.f64 (fma.f64 2 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) (/.f64 (pow.f64 (cbrt.f64 -1) 4) -1/9)) (*.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10))) -4/9)) (*.f64 x x)) (*.f64 -1/6 (/.f64 (fma.f64 6 (/.f64 (fma.f64 (*.f64 (cbrt.f64 -1) -2/3) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) -5/27) (/.f64 -2/27 (cbrt.f64 -1))) (pow.f64 (cbrt.f64 -1) 4)) (fma.f64 -4 (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) (*.f64 -1/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 17))))) (/.f64 16/27 (pow.f64 (cbrt.f64 -1) 5)))) (pow.f64 x 3))))))","(fma.f64 4 (log.f64 (cbrt.f64 -1)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 -2/3 x) (fma.f64 -1/6 (/.f64 (+.f64 (*.f64 (/.f64 (fma.f64 (cbrt.f64 -1) (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 2)) 10/81) (/.f64 -2/27 (cbrt.f64 -1))) (cbrt.f64 -1)) -6) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 17))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) 4/9) (/.f64 16/27 (pow.f64 (cbrt.f64 -1) 5)))) (pow.f64 x 3)) (/.f64 (+.f64 (*.f64 -2/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)))) (*.f64 1 (*.f64 1/9 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) (cbrt.f64 -1))))) (*.f64 x x)))))","(+.f64 (/.f64 (+.f64 (*.f64 -2/9 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 10)))) (*.f64 1/9 (/.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) (cbrt.f64 -1)))) (*.f64 x x)) (fma.f64 4 (log.f64 (cbrt.f64 -1)) (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 5))) (/.f64 -2/3 x) (/.f64 (fma.f64 -1/6 (fma.f64 (cbrt.f64 (/.f64 1 (pow.f64 (cbrt.f64 -1) 17))) (*.f64 (cbrt.f64 (pow.f64 (cbrt.f64 -1) 2)) 4/9) (/.f64 16/27 (pow.f64 (cbrt.f64 -1) 5))) (*.f64 1 (/.f64 (+.f64 (*.f64 (/.f64 1 (cbrt.f64 -1)) 10/81) (/.f64 -2/27 (cbrt.f64 -1))) (cbrt.f64 -1)))) (pow.f64 x 3)))))"]],"stop":[["node limit",1]],"time":53.6240234375,"type":"simplify"},{"compiler":[[16295,11582]],"time":171.89013671875,"type":"eval"},{"alts":[["(+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","done",25.098533507234215],["(+.f64 (-.f64 (/.f64 (+.f64 (exp.f64 (log.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))) (log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.33782282508088],["(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)","fresh",33.203308671580395],["(+.f64 (-.f64 (/.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2)) (log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","done",25.16312414072882],["(+.f64 (-.f64 (/.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2)) (expm1.f64 (log1p.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.229314746171568],["(+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3))))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.263963427013074],["(+.f64 (-.f64 (/.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",41.28441969944665],["(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","fresh",36.3610101769632],["(+.f64 (-.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 3) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","fresh",25.368720523033723]],"compiler":[[44,31],[57,40],[17,13],[55,40],[57,40],[79,48],[47,33],[30,16],[46,31]],"count":[[227,9]],"kept":[{"done":[1,1],"fresh":[6,5],"new":[219,2],"picked":[1,1]}],"min-error":[0.078125],"time":60.591064453125,"type":"prune"},{"accuracy":[8.80405634149075],"baseline":[25.098533507234215],"branch":[["x",10.792828277049017,5],["n",8.804056341490753,6],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))",17.819622976085316,2],["(/.f64 1 n)",8.80405634149075,6]],"compiler":[[3,2],[3,2],[15,11],[5,4],[645,391]],"count":[[14,6]],"inputs":[["(+.f64 (-.f64 (/.f64 (+.f64 (exp.f64 (log.f64 (*.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3) 2))) (log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2)) (expm1.f64 (log1p.f64 (*.f64 (-.f64 (log1p.f64 x) (log.f64 x)) 1/3)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)) 2)) (log.f64 (cbrt.f64 (/.f64 (+.f64 x 1) x)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (+.f64 (/.f64 1 x) (/.f64 -1/2 (*.f64 x x))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 6) (pow.f64 (log.f64 x) 6)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (*.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 1 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 9) (pow.f64 (log.f64 x) 9)) (*.f64 (+.f64 (pow.f64 (log1p.f64 x) 2) (*.f64 (log.f64 x) (+.f64 (log1p.f64 x) (log.f64 x)))) (+.f64 (pow.f64 (log1p.f64 x) 6) (+.f64 (pow.f64 (log.f64 x) 6) (pow.f64 (*.f64 (log1p.f64 x) (log.f64 x)) 3))))) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(+.f64 (-.f64 (/.f64 (pow.f64 (cbrt.f64 (-.f64 (log1p.f64 x) (log.f64 x))) 3) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)","(+.f64 (-.f64 (/.f64 (-.f64 (log1p.f64 x) (log.f64 x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))"]],"link":["."],"name":["2nthrt (problem 3.4.6)"],"oracle":[51.70988890713836],"outputs":[["(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)","(+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","(+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n))))","(fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n)))","(pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3)"]],"time":107.337890625,"times":[["x",30.76708984375],["n",30.694091796875],["(-.f64 (pow.f64 (+.f64 x 1) (/.f64 1 n)) (pow.f64 x (/.f64 1 n)))",3.393798828125],["(/.f64 1 n)",30.910888671875]],"type":"regimes"},{"bstep":[[0.0020832474953637286,169392.59551403398,0.02587890625],[6.181729108943438e-28,9.658052483189525e-23,0.02685546875],[5.213100397924891e-151,1.639762392217583e-149,0.029052734375],[7.173729166360666e-207,3.33740076569464e-202,0.06201171875],[-2.1740681255191004e-9,-2.0287768180697856e-9,0.10595703125]],"compiler":[[13,9],[5,4]],"method":["left-value","left-value","left-value","left-value","left-value"],"time":0.52490234375,"type":"bsearch"},{"compiler":[[202,120]],"egraph":[[6,151,4294967295,0.001112125],[5,150,4294967295,0.000929458],[4,136,4294967295,0.000741208],[3,113,4294967295,0.000517083],[2,97,4294967295,0.000357042],[1,80,4294967295,0.000194083],[0,65,4294967295,9.0166e-5]],"inputs":[["(if (<=.f64 (/.f64 1 n) -5077488442381443/2417851639229258349412352) (pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3) (if (<=.f64 (/.f64 1 n) 7229475734293037/722947573429303679218971863604384733017946601434003846318950894300849620572466815975903723774778879224549853567560703123999563997664868082592397590652658203246283799419575326866593810558132103097281884026581639773628137472) (+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))) (if (<=.f64 (/.f64 1 n) 7371020360979573/7371020360979572953596786290992712677572111758625860211672277930167234692172165726730716260112614780354430419981960634569864423105321860610471551272329484460252725248) (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))) (if (<=.f64 (/.f64 1 n) 348449143727041/348449143727040986586495598010130648530944) (+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))) (if (<=.f64 (/.f64 1 n) 1152921504606847/288230376151711744) (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))) (pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3))))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 1 n) -5077488442381443/2417851639229258349412352) (pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3) (if (<=.f64 (/.f64 1 n) 7229475734293037/722947573429303679218971863604384733017946601434003846318950894300849620572466815975903723774778879224549853567560703123999563997664868082592397590652658203246283799419575326866593810558132103097281884026581639773628137472) (+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))) (if (<=.f64 (/.f64 1 n) 7371020360979573/7371020360979572953596786290992712677572111758625860211672277930167234692172165726730716260112614780354430419981960634569864423105321860610471551272329484460252725248) (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))) (if (<=.f64 (/.f64 1 n) 348449143727041/348449143727040986586495598010130648530944) (+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 x 1) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))) (if (<=.f64 (/.f64 1 n) 1152921504606847/288230376151711744) (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x n))) (pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3))))))","(if (<=.f64 (/.f64 1 n) -5077488442381443/2417851639229258349412352) (pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3) (if (<=.f64 (/.f64 1 n) 7229475734293037/722947573429303679218971863604384733017946601434003846318950894300849620572466815975903723774778879224549853567560703123999563997664868082592397590652658203246283799419575326866593810558132103097281884026581639773628137472) (+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 1 x) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))) (if (<=.f64 (/.f64 1 n) 7371020360979573/7371020360979572953596786290992712677572111758625860211672277930167234692172165726730716260112614780354430419981960634569864423105321860610471551272329484460252725248) (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))) (if (<=.f64 (/.f64 1 n) 348449143727041/348449143727040986586495598010130648530944) (+.f64 (-.f64 (/.f64 (log.f64 (/.f64 (+.f64 1 x) x)) n) (/.f64 (-.f64 (pow.f64 (log1p.f64 x) 3) (pow.f64 (log.f64 x) 3)) (/.f64 (pow.f64 n 3) -1/6))) (*.f64 (/.f64 1/2 n) (-.f64 (/.f64 (pow.f64 (log1p.f64 x) 2) n) (/.f64 (pow.f64 (log.f64 x) 2) n)))) (if (<=.f64 (/.f64 1 n) 1152921504606847/288230376151711744) (fma.f64 (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 x x)) (+.f64 (/.f64 1/2 (*.f64 n n)) (/.f64 -1/2 n)) (/.f64 (exp.f64 (/.f64 (log.f64 x) n)) (*.f64 n x))) (pow.f64 (pow.f64 (-.f64 (exp.f64 (/.f64 (log1p.f64 x) n)) (pow.f64 x (/.f64 1 n))) 3) 1/3))))))"]],"stop":[["fuel",1],["saturated",1]],"time":15.235107421875,"type":"simplify"},{"time":0.02197265625,"type":"soundness"},{"compiler":[[202,120]],"remove-preprocessing":[[]],"time":50.676025390625,"type":"end"}]
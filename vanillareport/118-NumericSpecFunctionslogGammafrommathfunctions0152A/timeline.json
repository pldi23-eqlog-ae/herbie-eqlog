[{"compiler":[[14,11]],"method":["search"],"sampling":[[12,0.7980482098646462,0.10536577831953764,0.09658601181581616],[11,0.7687799381092191,0.13463405007496476,0.09658601181581616],[10,0.7258531395345926,0.20292668417096138,0.07122017629444599],[9,0.6712190322577953,0.2575607914477587,0.07122017629444599],[8,0.5931703075766563,0.37463387846946716,0.032195813953876495],[7,0.49951183795928955,0.46829234808683395,0.032195813953876495],[6,0.37463387846946716,0.6243897974491119,0.0009763240814208984],[5,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":29.803955078125,"type":"analyze"},{"outcomes":[["body",256,"invalid",11.248779296875,296],["body",256,"valid",316.393310546875,8256]],"time":335.30908203125,"type":"sample"},{"compiler":[[13,10]],"egraph":[[0,2,2,1.833e-6],[12,4510,22,0.075970459],[11,4510,22,0.064565834],[10,3852,22,0.053552709000000004],[9,3852,22,0.040683042],[8,3834,22,0.033897459000000005],[7,3455,22,0.026640084],[6,2256,22,0.017906126],[5,1210,22,0.009689584000000001],[4,555,22,0.004231043],[3,245,24,0.001819251],[2,106,24,0.0008081669999999999],[1,44,28,0.00034825099999999994],[0,16,32,9.9334e-5]],"inputs":[["0","1"],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","(+.f64 (-.f64 (*.f64 y (-.f64 x 1)) (*.f64 x 1/2)) 918938533204673/1000000000000000)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1"],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","(-.f64 (*.f64 x (+.f64 y -1)) (-.f64 (*.f64 y 1/2) 918938533204673/1000000000000000))","(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)","(fma.f64 x (-.f64 y 1) (fma.f64 y -1/2 918938533204673/1000000000000000))","(fma.f64 x (+.f64 y -1) (fma.f64 y -1/2 918938533204673/1000000000000000))","(fma.f64 y (+.f64 x -1/2) (-.f64 918938533204673/1000000000000000 x))","(-.f64 (fma.f64 y (+.f64 x -1/2) 918938533204673/1000000000000000) x)","(+.f64 (-.f64 (*.f64 y (-.f64 x 1)) (*.f64 x 1/2)) 918938533204673/1000000000000000)","(+.f64 918938533204673/1000000000000000 (-.f64 (*.f64 y (+.f64 x -1)) (*.f64 x 1/2)))","(+.f64 918938533204673/1000000000000000 (fma.f64 y (+.f64 x -1) (*.f64 x -1/2)))","(fma.f64 y (+.f64 x -1) (fma.f64 x -1/2 918938533204673/1000000000000000))","(fma.f64 x (+.f64 y -1/2) (-.f64 918938533204673/1000000000000000 y))","(-.f64 918938533204673/1000000000000000 (fma.f64 x (-.f64 1/2 y) y))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":99.893798828125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[10,2804,11,0.035947],[9,2777,11,0.029918958000000002],[8,2606,11,0.02377225],[7,1824,11,0.017159667],[6,1098,11,0.00943475],[5,576,11,0.004640958000000001],[4,270,11,0.002147417],[3,131,12,0.001077709],[2,62,12,0.000519584],[1,27,14,0.000249084],[0,11,16,7.5584e-5]],"inputs":[["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","(+.f64 (fma.f64 x (+.f64 y -1) (neg.f64 (*.f64 y 1/2))) 918938533204673/1000000000000000)","(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)","(fma.f64 x (+.f64 y -1) (fma.f64 y -1/2 918938533204673/1000000000000000))","(fma.f64 y (+.f64 x -1/2) (-.f64 918938533204673/1000000000000000 x))","(-.f64 918938533204673/1000000000000000 (fma.f64 y (-.f64 1/2 x) x))"]],"stop":[["saturated",1]],"time":46.906005859375,"type":"simplify"},{"compiler":[[21,15]],"time":0.43701171875,"type":"eval"},{"alts":[["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","fresh",0.02734375],["(-.f64 918938533204673/1000000000000000 (fma.f64 y (-.f64 1/2 x) x))","next",0.015625]],"compiler":[[13,10],[10,7],[13,10],[10,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.00390625],"time":1.34912109375,"type":"prune"},{"compiler":[[23,14]],"locations":[["(fma.f64 y (-.f64 1/2 x) x)",0.015625,true]],"time":6.057861328125,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 y (-.f64 1/2 x) x)","x","-inf",0.339111328125],["(fma.f64 y (-.f64 1/2 x) x)","x","inf",0.3251953125],["(fma.f64 y (-.f64 1/2 x) x)","x","0",0.295166015625],["(fma.f64 y (-.f64 1/2 x) x)","y","-inf",0.3681640625],["(fma.f64 y (-.f64 1/2 x) x)","y","inf",0.351806640625],["(fma.f64 y (-.f64 1/2 x) x)","y","0",0.356201171875]],"time":2.12109375,"type":"series"},{"count":[[1,21]],"egraph":[[2,1675,8,0.016381667000000003],[1,132,8,0.002307458],[0,6,8,0.000204]],"inputs":[["(fma.f64 y (-.f64 1/2 x) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 x (*.f64 y (-.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y (-.f64 1/2 x)) x)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 y (-.f64 1/2 x)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 y (-.f64 1/2 x) x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 y (-.f64 1/2 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 y (-.f64 1/2 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 y (-.f64 1/2 x) x)) (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 1/2 x) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 y (-.f64 1/2 x) x)) 2) (cbrt.f64 (fma.f64 y (-.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 y (-.f64 1/2 x) x)) (sqrt.f64 (fma.f64 y (-.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 y (-.f64 1/2 x)) 3) (pow.f64 x 3)) (+.f64 (*.f64 (*.f64 y (-.f64 1/2 x)) (*.f64 y (-.f64 1/2 x))) (-.f64 (*.f64 x x) (*.f64 (*.f64 y (-.f64 1/2 x)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 y (-.f64 1/2 x)) (*.f64 y (-.f64 1/2 x))) (*.f64 x x)) (-.f64 (*.f64 y (-.f64 1/2 x)) x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 y (-.f64 1/2 x) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 y (-.f64 1/2 x) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 y (-.f64 1/2 x) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 y (-.f64 1/2 x) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 y (-.f64 1/2 x) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 y (-.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 y (-.f64 1/2 x) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 y (-.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 y (-.f64 1/2 x) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 y (-.f64 1/2 x) x)))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":33.199951171875,"type":"rewrite"},{"count":[[45,31]],"egraph":[[9,1197,177,0.017086126],[8,1193,177,0.014319543],[7,1093,177,0.011556334],[6,883,177,0.008377334],[5,601,177,0.005285334],[4,329,177,0.002696459],[3,174,177,0.001222001],[2,84,177,0.00061871],[1,41,177,0.000282793],[0,18,181,0.000105834]],"inputs":[["x","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(*.f64 y (-.f64 1/2 x))","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(*.f64 y (-.f64 1/2 x))","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(*.f64 1/2 y)","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(*.f64 -1 (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (*.f64 (-.f64 y 1) x)))"]],"method":["egg-herbie"],"outputs":[["x","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(*.f64 y (-.f64 1/2 x))","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(*.f64 y (-.f64 1/2 x))","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 y (-.f64 1/2 x)) x)","(fma.f64 y (-.f64 1/2 x) x)","(*.f64 1/2 y)","(*.f64 y 1/2)","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 1/2 x) x)","(*.f64 (+.f64 1 (*.f64 -1 y)) x)","(*.f64 x (+.f64 1 (neg.f64 y)))","(*.f64 x (-.f64 1 y))","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 1/2 y) (*.f64 (+.f64 1 (*.f64 -1 y)) x))","(fma.f64 y (-.f64 1/2 x) x)","(*.f64 -1 (*.f64 (-.f64 y 1) x))","(*.f64 x (+.f64 1 (neg.f64 y)))","(*.f64 x (-.f64 1 y))","(+.f64 (*.f64 1/2 y) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 1/2 y) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y (-.f64 1/2 x) x)","(+.f64 (*.f64 1/2 y) (*.f64 -1 (*.f64 (-.f64 y 1) x)))","(fma.f64 y (-.f64 1/2 x) x)"]],"stop":[["saturated",1]],"time":31.60595703125,"type":"simplify"},{"compiler":[[365,257]],"time":5.211181640625,"type":"eval"},{"alts":[["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)","next",0.02734375],["(-.f64 918938533204673/1000000000000000 (fma.f64 y (-.f64 1/2 x) x))","done",0.015625]],"compiler":[[13,10],[10,7],[13,10]],"count":[[33,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[31,0],"picked":[1,1]}],"min-error":[0.00390625],"time":5.012939453125,"type":"prune"},{"compiler":[[38,26]],"locations":[["(*.f64 x (-.f64 y 1))",0.0078125,true],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))",0.01953125,true]],"time":8.825927734375,"type":"localize"},{"count":[[2,48]],"series":[["(*.f64 x (-.f64 y 1))","y","-inf",0.1728515625],["(*.f64 x (-.f64 y 1))","y","inf",0.14501953125],["(*.f64 x (-.f64 y 1))","y","0",0.150146484375],["(*.f64 x (-.f64 y 1))","x","-inf",0.218994140625],["(*.f64 x (-.f64 y 1))","x","inf",0.196044921875],["(*.f64 x (-.f64 y 1))","x","0",0.23486328125],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))","y","-inf",0.33203125],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))","y","inf",0.56591796875],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))","y","0",0.343994140625],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))","x","-inf",0.328125],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))","x","inf",0.311767578125],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))","x","0",0.50390625]],"time":3.64697265625,"type":"series"},{"count":[[2,214]],"egraph":[[2,2756,18,0.024472833],[1,208,18,0.003619708],[0,9,20,0.000298708]],"inputs":[["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))","(*.f64 x (-.f64 y 1))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y -1)) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y -1)) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y -1)) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -1/2) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3))) (/.f64 1 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4)) (/.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (-.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3))) (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4)) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3)))) (neg.f64 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4))) (neg.f64 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (pow.f64 (*.f64 y -1/2) 3)) (+.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (-.f64 (pow.f64 (*.f64 y -1/2) 2) (*.f64 (*.f64 x (+.f64 y -1)) (*.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 3) (pow.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 3)) (+.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 2) (-.f64 (pow.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 2) (*.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (pow.f64 (*.f64 y -1/2) 2)) (-.f64 (*.f64 x (+.f64 y -1)) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 2) (pow.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 2)) (-.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2)) (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))) 2)) (cbrt.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))) (sqrt.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y -1)))) (sqrt.f64 (exp.f64 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (pow.f64 (exp.f64 x) (+.f64 y -1)) (+.f64 1 (expm1.f64 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y -1)))) (+.f64 1 (expm1.f64 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y -1)))) (pow.f64 (exp.f64 y) -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))) (exp.f64 (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 y -1/2 (*.f64 y 1/2))) (+.f64 1 (expm1.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 y) -1/2) (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y -1) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y -1) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 y -1) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y -1/2 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y -1)) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y -1)) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y -1)) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 x (+.f64 y -1)) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 y -1/2) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y -1) x (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y -1) x (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y -1) x (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y -1) x (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y -1)) 1 (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y -1)) 1 (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y -1)) 1 (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (+.f64 y -1)) 1 (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (neg.f64 y) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1 (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1 (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1 (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1 (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) (*.f64 (cbrt.f64 (+.f64 y -1)) x) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) (*.f64 (cbrt.f64 (+.f64 y -1)) x) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) (*.f64 (cbrt.f64 (+.f64 y -1)) x) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 y -1)) 2) (*.f64 (cbrt.f64 (+.f64 y -1)) x) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (+.f64 y -1)) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (+.f64 y -1)) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (+.f64 y -1)) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x x)) (*.f64 (cbrt.f64 x) (+.f64 y -1)) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (cbrt.f64 (*.f64 x (+.f64 y -1))) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (cbrt.f64 (*.f64 x (+.f64 y -1))) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (cbrt.f64 (*.f64 x (+.f64 y -1))) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 2) (cbrt.f64 (*.f64 x (+.f64 y -1))) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y 1/2)) (neg.f64 (sqrt.f64 (*.f64 y 1/2))) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y -1)) (*.f64 (sqrt.f64 (+.f64 y -1)) x) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y -1)) (*.f64 (sqrt.f64 (+.f64 y -1)) x) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y -1)) (*.f64 (sqrt.f64 (+.f64 y -1)) x) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 y -1)) (*.f64 (sqrt.f64 (+.f64 y -1)) x) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 y -1)) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 y -1)) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 y -1)) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 x) (*.f64 (sqrt.f64 x) (+.f64 y -1)) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 x (+.f64 y -1))) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 x (+.f64 y -1))) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 x (+.f64 y -1))) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 x (+.f64 y -1))) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 y (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3))) (/.f64 1 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2))) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3))) (/.f64 1 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2))) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3))) (/.f64 1 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3))) (/.f64 1 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2))) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (*.f64 1/8 (pow.f64 y 3))) (/.f64 1 (fma.f64 (*.f64 y 1/2) (fma.f64 x (+.f64 y -1) (*.f64 y 1/2)) (pow.f64 (*.f64 x (+.f64 y -1)) 2))) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 y 1/2) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4)) (/.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2))) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4)) (/.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2))) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4)) (/.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4)) (/.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2))) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) (*.f64 (*.f64 y y) 1/4)) (/.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y 1/2))) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) 1/2 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 y -1/2 (*.f64 y 1/2))) 2) (cbrt.f64 (fma.f64 y -1/2 (*.f64 y 1/2))) (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 y -1/2)) 2) (cbrt.f64 (*.f64 y -1/2)) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 y -1/2 (*.f64 y 1/2))) (sqrt.f64 (fma.f64 y -1/2 (*.f64 y 1/2))) (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 y -1/2)) (sqrt.f64 (*.f64 y -1/2)) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 y 1/2))) (sqrt.f64 (*.f64 y 1/2)) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (-.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (fma.f64 y -1/2 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (-.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (fma.f64 (*.f64 y -1/2) 1 (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (-.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 y 1/2))) (cbrt.f64 (*.f64 (*.f64 y y) 1/4)) (*.f64 y 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (-.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (*.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (-.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) (sqrt.f64 (*.f64 y 1/2))) (+.f64 (fma.f64 y -1/2 (*.f64 y 1/2)) (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (cbrt.f64 (*.f64 (*.f64 y y) 1/4))) (cbrt.f64 (*.f64 y 1/2)) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (cbrt.f64 (+.f64 y -1)) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (cbrt.f64 (+.f64 y -1)) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (cbrt.f64 (+.f64 y -1)) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (pow.f64 (cbrt.f64 (+.f64 y -1)) 2)) (cbrt.f64 (+.f64 y -1)) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (+.f64 y -1))) (sqrt.f64 (+.f64 y -1)) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (+.f64 y -1))) (sqrt.f64 (+.f64 y -1)) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (+.f64 y -1))) (sqrt.f64 (+.f64 y -1)) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 x (sqrt.f64 (+.f64 y -1))) (sqrt.f64 (+.f64 y -1)) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (cbrt.f64 (*.f64 x x))) (cbrt.f64 x) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (sqrt.f64 x)) (sqrt.f64 x) (*.f64 (*.f64 y -1/2) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (sqrt.f64 x)) (sqrt.f64 x) (fma.f64 y -1/2 (fma.f64 y -1/2 (*.f64 y 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (+.f64 y -1) (sqrt.f64 x)) (sqrt.f64 x) (neg.f64 (-.f64 (*.f64 y 1/2) (fma.f64 y -1/2 (*.f64 y 1/2)))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y x) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x y) (*.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 y -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 y -1)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 x (+.f64 y -1)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 y 3) -1) x) (+.f64 (fma.f64 y y 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 y y -1) x) (-.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 y 3) -1)) (+.f64 (fma.f64 y y 1) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (fma.f64 y y -1)) (-.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 x (+.f64 y -1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (log.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 x (+.f64 y -1))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 x (+.f64 y -1))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 x (+.f64 y -1)))) 2)) (cbrt.f64 (log.f64 (*.f64 x (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 x (+.f64 y -1))))) (sqrt.f64 (log.f64 (*.f64 x (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 x (+.f64 y -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 x (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 x (+.f64 y -1))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 x (+.f64 y -1)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 x (+.f64 y -1)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 x (+.f64 y -1)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (+.f64 y -1))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 x (+.f64 y -1))) 3) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1) (log.f64 (+.f64 y -1))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 x) (*.f64 (log.f64 (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 x) 1) (*.f64 (log.f64 (+.f64 y -1)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 y -1)) 1) (log.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log.f64 (+.f64 y -1)) (*.f64 (log.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (*.f64 (log.f64 (+.f64 y -1)) 1) (*.f64 (log.f64 x) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x y (*.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y x (*.f64 -1 x))))))"]],"rules":[["egg-rr",39],["egg-rr",175]],"stop":[["node limit",1]],"time":55.094970703125,"type":"rewrite"},{"count":[[262,229]],"egraph":[[8,1267,373,0.017195626],[7,1264,373,0.014397001],[6,1230,373,0.011480417],[5,1029,373,0.008543750999999999],[4,646,373,0.0049873339999999995],[3,294,373,0.002331167],[2,145,373,0.001016417],[1,57,373,0.000431751],[0,23,391,0.000149917]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(*.f64 -1 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(*.f64 y (-.f64 x 1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 -1 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))","(+.f64 (*.f64 y x) (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(*.f64 y (-.f64 x 1/2))","(*.f64 y (+.f64 x -1/2))","(*.f64 y (+.f64 -1/2 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x))))","(*.f64 y (+.f64 x -1/2))","(*.f64 y (+.f64 -1/2 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(fma.f64 y (+.f64 -1/2 x) (neg.f64 x))","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(*.f64 y x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)","(+.f64 (*.f64 y x) (*.f64 -1 x))","(*.f64 (+.f64 y -1) x)"]],"stop":[["saturated",1]],"time":37.317138671875,"type":"simplify"},{"compiler":[[4692,3434]],"time":59.64794921875,"type":"eval"},{"alts":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)","next",0.0078125],["(-.f64 918938533204673/1000000000000000 (fma.f64 y (-.f64 1/2 x) x))","done",0.015625]],"compiler":[[12,9],[10,7],[12,9]],"count":[[231,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[229,1],"picked":[1,0]}],"min-error":[0],"time":74.4609375,"type":"prune"},{"compiler":[[31,21]],"locations":[["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))",0.0078125,true]],"time":7.364990234375,"type":"localize"},{"count":[[1,24]],"series":[["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))","y","-inf",0.3310546875],["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))","y","inf",0.330810546875],["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))","y","0",0.2939453125],["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))","x","-inf",0.201171875],["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))","x","inf",0.22509765625],["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))","x","0",0.360107421875]],"time":1.842041015625,"type":"series"},{"count":[[1,21]],"egraph":[[2,1997,11,0.018790292],[1,166,11,0.002867542],[0,8,11,0.000258792]],"inputs":[["(fma.f64 x (+.f64 y -1) (*.f64 y -1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 y -1/2) (*.f64 x (+.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 y -1)) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 x (+.f64 y -1)) 1) (*.f64 y -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2) (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 x (+.f64 y -1)) 3) (pow.f64 (*.f64 y -1/2) 3)) (+.f64 (*.f64 (*.f64 x (+.f64 y -1)) (*.f64 x (+.f64 y -1))) (-.f64 (*.f64 1/4 (*.f64 y y)) (*.f64 (*.f64 x (+.f64 y -1)) (*.f64 y -1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 x (+.f64 y -1)) (*.f64 x (+.f64 y -1))) (*.f64 1/4 (*.f64 y y))) (-.f64 (*.f64 x (+.f64 y -1)) (*.f64 y -1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2))))))))"]],"rules":[["egg-rr",21]],"stop":[["node limit",1]],"time":36.18115234375,"type":"rewrite"},{"count":[[45,35]],"egraph":[[8,1285,215,0.016944375999999997],[7,1282,215,0.014176458999999999],[6,1246,215,0.011337376],[5,1040,215,0.008411001],[4,617,215,0.004815541999999999],[3,274,215,0.0021614169999999997],[2,139,215,0.000913042],[1,52,233,0.000375251],[0,21,233,0.000129459]],"inputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(*.f64 (-.f64 y 1) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(*.f64 -1 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(*.f64 y (-.f64 x 1/2))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x))))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 -1/2 y)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 (-.f64 y 1) x) (*.f64 -1/2 y))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(*.f64 (-.f64 y 1) x)","(*.f64 (+.f64 y -1) x)","(-.f64 (*.f64 y x) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1/2 y) (*.f64 (-.f64 y 1) x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 y (-.f64 x 1/2)) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(*.f64 y (-.f64 x 1/2))","(*.f64 y (+.f64 x -1/2))","(*.f64 y (+.f64 -1/2 x))","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1 x) (*.f64 y (-.f64 x 1/2)))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x))))","(*.f64 y (+.f64 x -1/2))","(*.f64 y (+.f64 -1/2 x))","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)","(+.f64 (*.f64 -1 (*.f64 y (+.f64 1/2 (*.f64 -1 x)))) (*.f64 -1 x))","(fma.f64 -1/2 y (*.f64 (+.f64 y -1) x))","(-.f64 (*.f64 y (+.f64 -1/2 x)) x)"]],"stop":[["saturated",1]],"time":32.431884765625,"type":"simplify"},{"compiler":[[461,341]],"time":6.320068359375,"type":"eval"},{"alts":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)","done",0.0078125],["(-.f64 918938533204673/1000000000000000 (fma.f64 y (-.f64 1/2 x) x))","done",0.015625]],"compiler":[[12,9],[10,7]],"count":[[37,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[35,0],"picked":[1,1]}],"min-error":[0],"time":5.375,"type":"prune"},{"accuracy":[0.0078125],"baseline":[0.0078125],"branch":[["x",0.0078125,1],["y",0.0078125,1],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)",0.0078125,1],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))",0.0078125,1]],"compiler":[[3,2],[3,2],[13,10],[11,8],[31,22]],"count":[[3,1]],"inputs":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)","(-.f64 918938533204673/1000000000000000 (fma.f64 y (-.f64 1/2 x) x))","(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)"]],"link":["."],"name":["Numeric.SpecFunctions:logGamma from math-functions-0.1.5.2, A"],"oracle":[0.0390625],"outputs":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)"]],"time":12.8388671875,"times":[["x",3.08203125],["y",2.97412109375],["(+.f64 (-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2)) 918938533204673/1000000000000000)",2.80810546875],["(-.f64 (*.f64 x (-.f64 y 1)) (*.f64 y 1/2))",3.102783203125]],"type":"regimes"},{"compiler":[[12,9]],"egraph":[[1,13,14,4.0334e-5],[0,10,14,2.2584e-5]],"inputs":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)"]],"method":["egg-herbie"],"outputs":[["(+.f64 (fma.f64 x (+.f64 y -1) (*.f64 y -1/2)) 918938533204673/1000000000000000)"]],"stop":[["done",1],["saturated",1]],"time":8.094970703125,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[12,9]],"remove-preprocessing":[[]],"time":8.845947265625,"type":"end"}]
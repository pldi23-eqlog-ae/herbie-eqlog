[{"compiler":[[17,13]],"method":["search"],"sampling":[[12,0.39200334013526117,0.5158451913720228,0.09215146849271605],[11,0.25353449859494503,0.6981950038230025,0.048270497582052485],[10,0.2106286603711851,0.745001372794377,0.044369966834437946],[9,0.15602122990458156,0.8191114569990532,0.02486731309636525],[8,0.0,0.998535871389322,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":122.878173828125,"type":"analyze"},{"outcomes":[["body",256,"invalid",58.733642578125,1245],["body",256,"valid",389.46337890625,8256]],"time":456.916015625,"type":"sample"},{"compiler":[[16,12]],"egraph":[[0,3,3,2.125e-6],[6,5487,52,0.030072542],[5,2866,52,0.017806834],[4,1219,60,0.0076819589999999995],[3,497,60,0.0028942919999999997],[2,179,60,0.001044251],[1,70,68,0.000348417],[0,30,76,0.000117834]],"inputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 3/4)) z)) x))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 3/4)) x)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 3/4)) y)) z))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","(+.f64 1 (*.f64 (/.f64 4 y) (-.f64 (fma.f64 y 3/4 x) z)))","(fma.f64 (/.f64 4 y) (-.f64 (fma.f64 y 3/4 x) z) 1)","(fma.f64 (-.f64 (fma.f64 y 3/4 x) z) (/.f64 4 y) 1)","(+.f64 4 (*.f64 (-.f64 z x) (/.f64 -4 y)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 y (*.f64 x 3/4)) z)) x))","(+.f64 1 (/.f64 4 (/.f64 x (-.f64 (+.f64 y (*.f64 x 3/4)) z))))","(+.f64 1 (*.f64 (/.f64 4 x) (-.f64 (fma.f64 x 3/4 y) z)))","(fma.f64 (/.f64 4 x) (-.f64 (fma.f64 x 3/4 y) z) 1)","(fma.f64 (-.f64 (fma.f64 x 3/4 y) z) (/.f64 4 x) 1)","(fma.f64 4 (/.f64 (-.f64 (fma.f64 x 3/4 y) z) x) 1)","(+.f64 4 (*.f64 (/.f64 4 x) (-.f64 y z)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 y z) x)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 z (*.f64 y 3/4)) x)) y))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 (*.f64 y 3/4) z) x)) y))","(+.f64 1 (*.f64 (/.f64 4 y) (-.f64 (fma.f64 y 3/4 z) x)))","(fma.f64 (/.f64 4 y) (-.f64 (fma.f64 y 3/4 z) x) 1)","(fma.f64 (-.f64 (fma.f64 y 3/4 z) x) (/.f64 4 y) 1)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 z x) y)))","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 z 3/4)) y)) z))","(+.f64 1 (/.f64 4 (/.f64 z (-.f64 (+.f64 x (*.f64 3/4 z)) y))))","(+.f64 1 (*.f64 (/.f64 4 z) (-.f64 (fma.f64 3/4 z x) y)))","(fma.f64 (/.f64 4 z) (fma.f64 3/4 z (-.f64 x y)) 1)","(fma.f64 (-.f64 (fma.f64 3/4 z x) y) (/.f64 4 z) 1)","(fma.f64 4 (/.f64 (-.f64 (fma.f64 3/4 z x) y) z) 1)","(+.f64 4 (*.f64 (/.f64 4 z) (-.f64 x y)))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":53.4619140625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[9,6768,11,0.046669542],[8,4516,11,0.033632292],[7,2707,11,0.020625542],[6,1455,11,0.010403375],[5,746,11,0.004940625000000001],[4,347,15,0.002161417],[3,140,15,0.000946917],[2,55,15,0.00037437500000000003],[1,25,17,0.000148584],[0,13,19,6.0625e-5]],"inputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))"]],"method":["egg-herbie"],"outputs":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","(+.f64 1 (/.f64 4 (/.f64 y (+.f64 x (-.f64 (*.f64 y 3/4) z)))))","(+.f64 1 (*.f64 (/.f64 4 y) (-.f64 (fma.f64 y 3/4 x) z)))","(fma.f64 (/.f64 4 y) (-.f64 (fma.f64 y 3/4 x) z) 1)","(fma.f64 (-.f64 (fma.f64 y 3/4 x) z) (/.f64 4 y) 1)","(fma.f64 (/.f64 4 y) (-.f64 x z) 4)"]],"stop":[["node limit",1]],"time":58.864990234375,"type":"simplify"},{"compiler":[[24,17]],"time":0.471923828125,"type":"eval"},{"alts":[["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))","fresh",0.5625],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","next",0.171875]],"compiler":[[16,12],[11,8],[16,12],[11,8]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.0078125],"time":1.408203125,"type":"prune"},{"compiler":[[21,11]],"locations":[["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)",0.171875,true]],"time":4.868896484375,"type":"localize"},{"count":[[1,36]],"series":[["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","z","-inf",0.27392578125],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","z","inf",0.3310546875],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","z","0",0.35302734375],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","x","-inf",0.281982421875],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","x","inf",0.471923828125],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","x","0",0.404052734375],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","y","-inf",0.368896484375],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","y","inf",0.317138671875],["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","y","0",0.44287109375]],"time":3.39208984375,"type":"series"},{"count":[[1,22]],"egraph":[[2,2394,11,0.020510708],[1,179,11,0.003230292],[0,8,11,0.0002455]],"inputs":[["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 4 (*.f64 (/.f64 4 y) (-.f64 x z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 4 y) (-.f64 x z)) 4)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (/.f64 4 y) (-.f64 x z)) 1) 4)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 4 y) (-.f64 x z) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)) (pow.f64 (cbrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)) 2) (cbrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)) (sqrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (*.f64 (/.f64 4 y) (-.f64 x z)) 3) 64) (+.f64 (*.f64 (*.f64 (/.f64 4 y) (-.f64 x z)) (*.f64 (/.f64 4 y) (-.f64 x z))) (-.f64 16 (*.f64 (*.f64 (/.f64 4 y) (-.f64 x z)) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (*.f64 (/.f64 4 y) (-.f64 x z)) (*.f64 (/.f64 4 y) (-.f64 x z))) 16) (-.f64 (*.f64 (/.f64 4 y) (-.f64 x z)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 4 y) (-.f64 x z) 4)))))))"]],"rules":[["egg-rr",22]],"stop":[["node limit",1]],"time":38.251953125,"type":"rewrite"},{"count":[[58,36]],"egraph":[[14,3667,353,0.059310124000000006],[13,3663,353,0.051161916],[12,3658,353,0.044732832],[11,3625,353,0.038304707],[10,3453,353,0.031371207],[9,2770,353,0.024489582],[8,1918,353,0.016079707],[7,1210,353,0.009934249],[6,750,353,0.005623540999999999],[5,416,353,0.0032364159999999998],[4,239,353,0.0018089159999999998],[3,130,353,0.0010454989999999999],[2,78,353,0.0005624989999999999],[1,37,353,0.000284916],[0,18,411,0.000106333]],"inputs":[["(*.f64 4 (/.f64 (-.f64 x z) y))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(+.f64 4 (*.f64 -4 (/.f64 z y)))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 4 (/.f64 x y))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 x y)))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 -4 (/.f64 z y))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(*.f64 -4 (/.f64 z y))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 4 (/.f64 (-.f64 x z) y))","(*.f64 (-.f64 x z) (/.f64 4 y))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","4","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 -4 (/.f64 z y)))","(+.f64 4 (/.f64 (*.f64 -4 z) y))","(fma.f64 -4 (/.f64 z y) 4)","(fma.f64 z (/.f64 -4 y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(*.f64 4 (/.f64 x y))","(/.f64 (*.f64 4 x) y)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (*.f64 4 (/.f64 x y)))","(fma.f64 4 (/.f64 x y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(*.f64 z (/.f64 -4 y))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(*.f64 -4 (/.f64 z y))","(/.f64 (*.f64 -4 z) y)","(*.f64 z (/.f64 -4 y))","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)","(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(+.f64 4 (*.f64 4 (/.f64 (-.f64 x z) y)))","(fma.f64 4 (/.f64 (-.f64 x z) y) 4)"]],"stop":[["saturated",1]],"time":80.22998046875,"type":"simplify"},{"compiler":[[400,238]],"time":5.29296875,"type":"eval"},{"alts":[["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","done",0.171875],["(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","next",0.00390625]],"compiler":[[11,8],[16,12],[16,12]],"count":[[38,2]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[36,1],"picked":[1,1]}],"min-error":[0],"time":5.632080078125,"type":"prune"},{"compiler":[[48,23]],"locations":[["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))",0.0078125,true],["(*.f64 4 (/.f64 x y))",0.017910009768442016,true],["(*.f64 -4 (/.f64 z y))",0.017910009768442016,true]],"time":9.055908203125,"type":"localize"},{"count":[[3,18]],"series":[["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","x","-inf",0.18603515625],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","x","inf",0.2529296875],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","x","0",0.324951171875],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","y","-inf",0.201904296875],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","y","inf",0.1630859375],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","y","0",0.1708984375],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","z","-inf",0.18505859375],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","z","inf",0.91796875],["(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))","z","0",0.362060546875],["(*.f64 4 (/.f64 x y))","y","-inf",0.254150390625],["(*.f64 4 (/.f64 x y))","y","inf",0.408935546875],["(*.f64 4 (/.f64 x y))","y","0",0.419921875],["(*.f64 4 (/.f64 x y))","x","-inf",0.27099609375],["(*.f64 4 (/.f64 x y))","x","inf",0.3291015625],["(*.f64 4 (/.f64 x y))","x","0",0.322998046875],["(*.f64 -4 (/.f64 z y))","y","-inf",0.26806640625],["(*.f64 -4 (/.f64 z y))","y","inf",0.416015625],["(*.f64 -4 (/.f64 z y))","y","0",0.424072265625],["(*.f64 -4 (/.f64 z y))","z","-inf",0.286865234375],["(*.f64 -4 (/.f64 z y))","z","inf",0.714111328125],["(*.f64 -4 (/.f64 z y))","z","0",0.48486328125]],"time":7.572998046875,"type":"series"},{"count":[[3,124]],"egraph":[[2,3379,28,0.028398708],[1,245,28,0.004584833],[0,11,28,0.000325166]],"inputs":[["(*.f64 -4 (/.f64 z y))","(*.f64 4 (/.f64 x y))","(+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 -4) (/.f64 z y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 -4) (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -4) (/.f64 z y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 -4) (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 -4 (/.f64 z y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -4 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 -4 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -4 z) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 -4 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 z) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 z) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 -4 z) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 z) -4) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -4 (neg.f64 z)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 -4 (/.f64 z y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 -4 (/.f64 z y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 -4 (/.f64 z y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 z y) 3) -64) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 -4 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 -4) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 -4 (/.f64 z y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 z y) 3) -64))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 -4 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 -4 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 -4 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 -4 (/.f64 z y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 4) (/.f64 x y))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 4) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 4) (/.f64 x y)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 4) (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 4 (/.f64 x y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 4 (/.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 4 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 x) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 4 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 x) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 x) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 4 x) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 x) 4) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 4 (neg.f64 x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 4 (/.f64 x y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 16 (pow.f64 (/.f64 x y) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 4 (/.f64 x y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 4 (/.f64 x y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (/.f64 x y) 3) 64) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 4 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 16 (pow.f64 (/.f64 x y) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 4) (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 4 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 x y) 3) 64))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 4 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 4 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 4 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 4 (/.f64 x y))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16) (/.f64 (-.f64 (*.f64 -4 z) (*.f64 4 x)) y)) (/.f64 (*.f64 16 (pow.f64 (/.f64 x y) 2)) (/.f64 (-.f64 (*.f64 -4 z) (*.f64 4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))) (pow.f64 (cbrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))) 2) (cbrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))) (sqrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 (/.f64 x y) 3) 64 (*.f64 (pow.f64 (/.f64 z y) 3) -64)) (/.f64 1 (fma.f64 (*.f64 4 (/.f64 x y)) (-.f64 (*.f64 4 (/.f64 x y)) (*.f64 -4 (/.f64 z y))) (*.f64 (pow.f64 (/.f64 z y) 2) 16))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16) (*.f64 16 (pow.f64 (/.f64 x y) 2))) (/.f64 1 (/.f64 (-.f64 (*.f64 -4 z) (*.f64 4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 4 (/.f64 x y)) (-.f64 (*.f64 4 (/.f64 x y)) (*.f64 -4 (/.f64 z y))) (*.f64 (pow.f64 (/.f64 z y) 2) 16)) (fma.f64 (pow.f64 (/.f64 x y) 3) 64 (*.f64 (pow.f64 (/.f64 z y) 3) -64))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (-.f64 (*.f64 -4 z) (*.f64 4 x)) y) (-.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16) (*.f64 16 (pow.f64 (/.f64 x y) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (/.f64 x y) 3) 64 (*.f64 (pow.f64 (/.f64 z y) 3) -64)) (fma.f64 (*.f64 4 (/.f64 x y)) (-.f64 (*.f64 4 (/.f64 x y)) (*.f64 -4 (/.f64 z y))) (*.f64 (pow.f64 (/.f64 z y) 2) 16)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (pow.f64 (/.f64 x y) 3) 64 (*.f64 (pow.f64 (/.f64 z y) 3) -64)) (fma.f64 16 (pow.f64 (/.f64 x y) 2) (fma.f64 (pow.f64 (/.f64 z y) 2) 16 (neg.f64 (/.f64 (*.f64 (*.f64 -4 z) (*.f64 4 x)) (*.f64 y y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16) (*.f64 16 (pow.f64 (/.f64 x y) 2))) (/.f64 (-.f64 (*.f64 -4 z) (*.f64 4 x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 (pow.f64 (/.f64 x y) 3) 64 (*.f64 (pow.f64 (/.f64 z y) 3) -64))) (neg.f64 (fma.f64 (*.f64 4 (/.f64 x y)) (-.f64 (*.f64 4 (/.f64 x y)) (*.f64 -4 (/.f64 z y))) (*.f64 (pow.f64 (/.f64 z y) 2) 16))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16) (*.f64 16 (pow.f64 (/.f64 x y) 2)))) (neg.f64 (/.f64 (-.f64 (*.f64 -4 z) (*.f64 4 x)) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 -4 z) y (*.f64 y (*.f64 4 x))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (*.f64 4 x) y (*.f64 y (*.f64 -4 z))) (*.f64 y y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 16 (pow.f64 (/.f64 x y) 2)) (*.f64 (pow.f64 (/.f64 z y) 2) 16)) (-.f64 (*.f64 4 (/.f64 x y)) (*.f64 -4 (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 4 (/.f64 x y)) (-.f64 (*.f64 4 (/.f64 x y)) (*.f64 -4 (/.f64 z y))) (*.f64 (pow.f64 (/.f64 z y) 2) 16)) (fma.f64 (pow.f64 (/.f64 x y) 3) 64 (*.f64 (pow.f64 (/.f64 z y) 3) -64))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (-.f64 (*.f64 -4 z) (*.f64 4 x)) y) (-.f64 (*.f64 (pow.f64 (/.f64 z y) 2) 16) (*.f64 16 (pow.f64 (/.f64 x y) 2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -4 (/.f64 z y)))) (pow.f64 (exp.f64 4) (/.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 -4) (/.f64 z y)) (+.f64 1 (expm1.f64 (*.f64 4 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 -4 (/.f64 z y)))) (+.f64 1 (expm1.f64 (*.f64 4 (/.f64 x y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 4 (/.f64 x y)))) (pow.f64 (exp.f64 -4) (/.f64 z y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 4) (/.f64 x y)) (+.f64 1 (expm1.f64 (*.f64 -4 (/.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 4 (/.f64 x y)))) (+.f64 1 (expm1.f64 (*.f64 -4 (/.f64 z y))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -4 (/.f64 z y) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 z (*.f64 (/.f64 1 y) -4) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 z y) -4 (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (/.f64 z y)) 1 (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 4 (/.f64 x y) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (*.f64 (/.f64 1 y) 4) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 x y) 4 (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (/.f64 x y)) 1 (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 4 (/.f64 x y)) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 z y)) 2) (*.f64 (cbrt.f64 (/.f64 z y)) -4) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 x y)) 2) (*.f64 (cbrt.f64 (/.f64 x y)) 4) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 -4 (/.f64 z y))) (pow.f64 (cbrt.f64 (*.f64 -4 (/.f64 z y))) 2) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 -4 (/.f64 z y))) 2) (cbrt.f64 (*.f64 -4 (/.f64 z y))) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 4 (/.f64 x y))) (pow.f64 (cbrt.f64 (*.f64 4 (/.f64 x y))) 2) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 4 (/.f64 x y))) 2) (cbrt.f64 (*.f64 4 (/.f64 x y))) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 z y)) (*.f64 (sqrt.f64 (/.f64 z y)) -4) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 x y)) (*.f64 (sqrt.f64 (/.f64 x y)) 4) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 -4 (/.f64 z y))) (sqrt.f64 (*.f64 -4 (/.f64 z y))) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 4 (/.f64 x y))) (sqrt.f64 (*.f64 4 (/.f64 x y))) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 z) (/.f64 1 y) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 x) (/.f64 1 y) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -4 (pow.f64 (cbrt.f64 y) 2)) (/.f64 z (cbrt.f64 y)) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 -4 (sqrt.f64 y)) (/.f64 z (sqrt.f64 y)) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 4 (pow.f64 (cbrt.f64 y) 2)) (/.f64 x (cbrt.f64 y)) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 4 (sqrt.f64 y)) (/.f64 x (sqrt.f64 y)) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (pow.f64 (cbrt.f64 (/.f64 z y)) 2)) (cbrt.f64 (/.f64 z y)) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 -4 (sqrt.f64 (/.f64 z y))) (sqrt.f64 (/.f64 z y)) (*.f64 4 (/.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (pow.f64 (cbrt.f64 (/.f64 x y)) 2)) (cbrt.f64 (/.f64 x y)) (*.f64 -4 (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 4 (sqrt.f64 (/.f64 x y))) (sqrt.f64 (/.f64 x y)) (*.f64 -4 (/.f64 z y)))))))"]],"rules":[["egg-rr",70],["egg-rr",27],["egg-rr",27]],"stop":[["node limit",1]],"time":55.248046875,"type":"rewrite"},{"count":[[142,130]],"egraph":[[13,2291,162,0.036697541],[12,2291,162,0.031559833],[11,2286,162,0.027242749],[10,2164,162,0.022912499],[9,2054,162,0.017769333],[8,1710,162,0.013167833],[7,946,162,0.0073219999999999995],[6,535,162,0.0036643329999999997],[5,277,162,0.002044833],[4,165,162,0.001161166],[3,97,174,0.000724833],[2,65,174,0.000440458],[1,36,174,0.00023316599999999998],[0,20,174,9.45e-5]],"inputs":[["(*.f64 4 (/.f64 x y))","(*.f64 -4 (/.f64 z y))","(*.f64 -4 (/.f64 z y))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(*.f64 -4 (/.f64 z y))","(*.f64 4 (/.f64 x y))","(*.f64 4 (/.f64 x y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 4 (/.f64 x y))","(*.f64 -4 (/.f64 z y))","(*.f64 z (/.f64 -4 y))","(*.f64 -4 (/.f64 z y))","(*.f64 z (/.f64 -4 y))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(/.f64 (+.f64 (*.f64 -4 z) (*.f64 4 x)) y)","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(*.f64 -1 (/.f64 (+.f64 (*.f64 4 z) (*.f64 -4 x)) y))","(/.f64 (fma.f64 -4 z (*.f64 4 x)) y)","(/.f64 (fma.f64 4 x (*.f64 -4 z)) y)","(/.f64 (*.f64 4 (-.f64 x z)) y)","(*.f64 (/.f64 4 y) (-.f64 x z))","(*.f64 -4 (/.f64 z y))","(*.f64 z (/.f64 -4 y))","(*.f64 4 (/.f64 x y))","(*.f64 4 (/.f64 x y))"]],"stop":[["saturated",1]],"time":52.470947265625,"type":"simplify"},{"compiler":[[2377,1434]],"time":25.822021484375,"type":"eval"},{"alts":[["(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","done",0.171875],["(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","done",0.00390625]],"compiler":[[11,8],[16,12]],"count":[[132,2]],"kept":[{"done":[1,1],"fresh":[0,0],"new":[130,0],"picked":[1,1]}],"min-error":[0],"time":34.7470703125,"type":"prune"},{"accuracy":[0.00390625],"baseline":[0.00390625],"branch":[["x",0.00390625,1],["y",0.00390625,1],["z",0.00390625,1],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))",0.00390625,1],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y)",0.00390625,1]],"compiler":[[4,3],[4,3],[4,3],[16,12],[14,10],[37,26]],"count":[[3,1]],"inputs":[["(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))","(fma.f64 (/.f64 4 y) (-.f64 x z) 4)","(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))"]],"link":["."],"name":["Data.Array.Repa.Algorithms.ColorRamp:rampColorHotToCold from repa-algorithms-3.4.0.1, A"],"oracle":[0.73046875],"outputs":[["(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))"]],"time":15.35302734375,"times":[["x",2.888916015625],["y",2.927978515625],["z",3.203857421875],["(+.f64 1 (/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y))",2.681884765625],["(/.f64 (*.f64 4 (-.f64 (+.f64 x (*.f64 y 3/4)) z)) y)",2.677001953125]],"type":"regimes"},{"compiler":[[16,12]],"egraph":[[1,16,19,3.7125999999999997e-5],[0,12,19,2.1417e-5]],"inputs":[["(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))"]],"method":["egg-herbie"],"outputs":[["(+.f64 4 (+.f64 (*.f64 -4 (/.f64 z y)) (*.f64 4 (/.f64 x y))))"]],"stop":[["done",1],["saturated",1]],"time":8.325927734375,"type":"simplify"},{"time":0.012939453125,"type":"soundness"},{"compiler":[[16,12]],"remove-preprocessing":[[]],"time":9.198974609375,"type":"end"}]
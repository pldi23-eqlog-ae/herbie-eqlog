[{"compiler":[[18,15]],"method":["search"],"sampling":[[12,0.4992678165435791,0.5002439022064209,0.00048828125],[11,0.4987797737121582,0.5007319450378418,0.00048828125],[10,0.4978036880493164,0.5017080307006836,0.00048828125],[9,0.4958515167236328,0.5036602020263672,0.00048828125],[8,0.4919471740722656,0.5075645446777344,0.00048828125],[7,0.48413848876953125,0.5153732299804688,0.00048828125],[6,0.4685211181640625,0.5309906005859375,0.00048828125],[5,0.437286376953125,0.562225341796875,0.00048828125],[4,0.37481689453125,0.62469482421875,0.00048828125],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":159.956787109375,"type":"analyze"},{"outcomes":[["body",1024,"valid",730.72412109375,2037],["body",512,"valid",212.634033203125,1042],["body",2048,"valid",4.906005859375,6],["body",256,"valid",480.315673828125,5171]],"time":1437.5751953125,"type":"sample"},{"compiler":[[17,14]],"egraph":[[0,1,1,1.208e-6],[5,61,22,0.000581458],[4,52,22,0.00045562500000000003],[3,44,22,0.000326166],[2,31,22,0.000217375],[1,20,22,0.00012925],[0,13,22,5.975e-5]],"inputs":[["0"],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))","(*.f64 (/.f64 8/3 (sin.f64 x)) (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))))","(*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))) (/.f64 8/3 (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) 8/3))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":23.02392578125,"type":"preprocess"},{"count":[[1,2]],"egraph":[[5,61,22,0.0005764590000000001],[4,52,22,0.00045116700000000004],[3,44,22,0.000321625],[2,31,22,0.00021325],[1,20,22,0.00012525],[0,13,22,5.7e-5]],"inputs":[["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))","(*.f64 (/.f64 8/3 (sin.f64 x)) (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))))","(*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))) (/.f64 8/3 (sin.f64 x)))","(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) 8/3))"]],"stop":[["saturated",1]],"time":11.014892578125,"type":"simplify"},{"compiler":[[31,24]],"time":0.530029296875,"type":"eval"},{"alts":[["(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) 8/3))","fresh",14.400201311312854],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","next",14.359669141861522]],"compiler":[[15,12],[17,14],[15,12],[17,14]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[14.218674073482426],"time":2.037109375,"type":"prune"},{"compiler":[[54,43]],"locations":[["(sin.f64 (*.f64 x 1/2))",0.03125,true],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))",0.2265625,true],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))",0.30859375,true],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))",14.190002784408655,true]],"time":16.786865234375,"type":"localize"},{"count":[[4,48]],"series":[["(sin.f64 (*.f64 x 1/2))","x","-inf",0.135986328125],["(sin.f64 (*.f64 x 1/2))","x","inf",0.139892578125],["(sin.f64 (*.f64 x 1/2))","x","0",0.21484375],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","x","-inf",0.274169921875],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","x","inf",0.31298828125],["(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","x","0",0.286865234375],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","x","-inf",0.231201171875],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","x","inf",0.54296875],["(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","x","0",0.26416015625],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","-inf",0.787109375],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","inf",0.828857421875],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","0",0.56005859375]],"time":4.75,"type":"series"},{"count":[[4,139]],"egraph":[[2,2994,44,0.027433541999999998],[1,251,44,0.004386334],[0,13,54,0.000436334]],"inputs":[["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2)))","(*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2)))","(sin.f64 (*.f64 x 1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (*.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 1 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4))) (*.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) (cbrt.f64 (pow.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 2)) (cbrt.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 x))) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (/.f64 1 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 x)) (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) 1) (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 1) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4))) 1) (/.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 1) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8/3 (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) -2) (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (cbrt.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8/3 (sqrt.f64 (sin.f64 x))) (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sin.f64 x))) (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) -1/2) (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4))) (sqrt.f64 (sin.f64 x))) (/.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3/8 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 6) (pow.f64 (sin.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 3/8 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 2)) (cbrt.f64 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (sqrt.f64 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 8/3) (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 6) (pow.f64 (sin.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 3/8 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) 64/9) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 2)) (cbrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))) (sqrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) 64/9))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 6) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 2)) (cbrt.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) (sqrt.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 8/3) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 6))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 6)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 x 1/2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 x 1/2))))) (log.f64 (sqrt.f64 (exp.f64 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (sin.f64 (*.f64 x 1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (*.f64 (sin.f64 (exp.f64 (log1p.f64 (*.f64 x 1/2)))) (cos.f64 1)) (*.f64 (cos.f64 (exp.f64 (log1p.f64 (*.f64 x 1/2)))) (sin.f64 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (sin.f64 (*.f64 x 1/2)))) 2)) (cbrt.f64 (log.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (sin.f64 (*.f64 x 1/2))))) (sqrt.f64 (log.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sin.f64 (*.f64 x 1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (sin.f64 (*.f64 x 1/2)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (sin.f64 (*.f64 x 1/2))) 1) 1))))))"]],"rules":[["egg-rr",30],["egg-rr",24],["egg-rr",24],["egg-rr",61]],"stop":[["node limit",1]],"time":57.404052734375,"type":"rewrite"},{"count":[[187,178]],"egraph":[[8,7707,596,0.049230333],[7,5857,596,0.037576833],[6,4837,596,0.027037],[5,3706,596,0.01907925],[4,1994,596,0.011962791],[3,1361,596,0.006813124],[2,449,596,0.0033465409999999998],[1,181,596,0.001236374],[0,74,596,0.000361333]],"inputs":[["(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 4/3 x)","(+.f64 (*.f64 4/3 x) (*.f64 -1/18 (pow.f64 x 3)))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3))))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 -1/241920 (pow.f64 x 7)) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3)))))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 2/3 (pow.f64 x 2))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (*.f64 2/3 (pow.f64 x 2)))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (*.f64 1/540 (pow.f64 x 6))))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (+.f64 (*.f64 -1/30240 (pow.f64 x 8)) (*.f64 1/540 (pow.f64 x 6)))))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(fma.f64 1/18 (pow.f64 x 3) (*.f64 2/3 x))","(fma.f64 2/3 x (*.f64 1/18 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x 1/18) 2/3))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 2/3 x (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 1/180 (pow.f64 x 5) (*.f64 2/3 x)))","(fma.f64 2/3 x (fma.f64 1/18 (pow.f64 x 3) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 2/3 x (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 1/180 (pow.f64 x 5) (*.f64 2/3 x))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 2/3 x (fma.f64 1/180 (pow.f64 x 5) (*.f64 17/30240 (pow.f64 x 7)))))","(fma.f64 2/3 x (fma.f64 1/180 (pow.f64 x 5) (fma.f64 17/30240 (pow.f64 x 7) (*.f64 1/18 (pow.f64 x 3)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 4/3 x)","(*.f64 x 4/3)","(+.f64 (*.f64 4/3 x) (*.f64 -1/18 (pow.f64 x 3)))","(fma.f64 4/3 x (*.f64 (pow.f64 x 3) -1/18))","(fma.f64 (pow.f64 x 3) -1/18 (*.f64 x 4/3))","(fma.f64 x 4/3 (*.f64 (pow.f64 x 3) -1/18))","(*.f64 x (fma.f64 x (*.f64 x -1/18) 4/3))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3))))","(fma.f64 4/3 x (fma.f64 1/1440 (pow.f64 x 5) (*.f64 (pow.f64 x 3) -1/18)))","(fma.f64 x 4/3 (fma.f64 (pow.f64 x 3) -1/18 (*.f64 (pow.f64 x 5) 1/1440)))","(fma.f64 (pow.f64 x 3) -1/18 (fma.f64 x 4/3 (*.f64 (pow.f64 x 5) 1/1440)))","(fma.f64 x (fma.f64 x (*.f64 x -1/18) 4/3) (*.f64 (pow.f64 x 5) 1/1440))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 -1/241920 (pow.f64 x 7)) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3)))))","(fma.f64 4/3 x (fma.f64 -1/241920 (pow.f64 x 7) (fma.f64 1/1440 (pow.f64 x 5) (*.f64 (pow.f64 x 3) -1/18))))","(fma.f64 x 4/3 (fma.f64 (pow.f64 x 7) -1/241920 (fma.f64 (pow.f64 x 3) -1/18 (*.f64 (pow.f64 x 5) 1/1440))))","(fma.f64 x 4/3 (fma.f64 (pow.f64 x 3) -1/18 (fma.f64 (pow.f64 x 7) -1/241920 (*.f64 (pow.f64 x 5) 1/1440))))","(fma.f64 x 4/3 (fma.f64 (pow.f64 x 3) -1/18 (fma.f64 (pow.f64 x 5) 1/1440 (*.f64 (pow.f64 x 7) -1/241920))))","(fma.f64 (pow.f64 x 5) 1/1440 (fma.f64 x 4/3 (fma.f64 (pow.f64 x 3) -1/18 (*.f64 (pow.f64 x 7) -1/241920))))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 2/3 (pow.f64 x 2))","(*.f64 2/3 (*.f64 x x))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (*.f64 2/3 (pow.f64 x 2)))","(fma.f64 -1/18 (pow.f64 x 4) (*.f64 2/3 (*.f64 x x)))","(fma.f64 2/3 (*.f64 x x) (*.f64 -1/18 (pow.f64 x 4)))","(*.f64 (*.f64 x x) (fma.f64 x (*.f64 x -1/18) 2/3))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (*.f64 1/540 (pow.f64 x 6))))","(fma.f64 -1/18 (pow.f64 x 4) (fma.f64 2/3 (*.f64 x x) (*.f64 1/540 (pow.f64 x 6))))","(fma.f64 -1/18 (pow.f64 x 4) (fma.f64 1/540 (pow.f64 x 6) (*.f64 2/3 (*.f64 x x))))","(fma.f64 2/3 (*.f64 x x) (fma.f64 -1/18 (pow.f64 x 4) (*.f64 1/540 (pow.f64 x 6))))","(*.f64 (*.f64 x x) (fma.f64 x (fma.f64 x -1/18 (*.f64 (pow.f64 x 3) 1/540)) 2/3))","(+.f64 (*.f64 -1/18 (pow.f64 x 4)) (+.f64 (*.f64 2/3 (pow.f64 x 2)) (+.f64 (*.f64 -1/30240 (pow.f64 x 8)) (*.f64 1/540 (pow.f64 x 6)))))","(fma.f64 -1/18 (pow.f64 x 4) (fma.f64 2/3 (*.f64 x x) (fma.f64 -1/30240 (pow.f64 x 8) (*.f64 1/540 (pow.f64 x 6)))))","(fma.f64 -1/18 (pow.f64 x 4) (fma.f64 2/3 (*.f64 x x) (fma.f64 1/540 (pow.f64 x 6) (*.f64 -1/30240 (pow.f64 x 8)))))","(fma.f64 -1/18 (pow.f64 x 4) (fma.f64 1/540 (pow.f64 x 6) (fma.f64 -1/30240 (pow.f64 x 8) (*.f64 2/3 (*.f64 x x)))))","(fma.f64 2/3 (*.f64 x x) (fma.f64 -1/18 (pow.f64 x 4) (fma.f64 1/540 (pow.f64 x 6) (*.f64 -1/30240 (pow.f64 x 8)))))","(*.f64 x (fma.f64 (pow.f64 x 5) 1/540 (fma.f64 2/3 x (*.f64 (pow.f64 x 3) (fma.f64 (pow.f64 x 4) -1/30240 -1/18)))))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))","(*.f64 8/3 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))","(*.f64 1/2 x)","(*.f64 x 1/2)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(fma.f64 -1/48 (pow.f64 x 3) (*.f64 x 1/2))","(fma.f64 x 1/2 (*.f64 (pow.f64 x 3) -1/48))","(*.f64 x (fma.f64 (*.f64 x x) -1/48 1/2))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840)))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 x 1/2 (*.f64 (pow.f64 x 5) 1/3840)))","(fma.f64 (pow.f64 x 5) 1/3840 (fma.f64 x 1/2 (*.f64 (pow.f64 x 3) -1/48)))","(fma.f64 x 1/2 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 (pow.f64 x 3) -1/48)))","(fma.f64 x 1/2 (fma.f64 (pow.f64 x 3) -1/48 (*.f64 (pow.f64 x 5) 1/3840)))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(fma.f64 -1/645120 (pow.f64 x 7) (fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840))))","(fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 3) -1/48 (fma.f64 x 1/2 (*.f64 (pow.f64 x 5) 1/3840))))","(fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 5) 1/3840 (fma.f64 x 1/2 (*.f64 (pow.f64 x 3) -1/48))))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 x 1/2))))","(fma.f64 x 1/2 (fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 (pow.f64 x 7) -1/645120))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 x 1/2))"]],"stop":[["node limit",1]],"time":73.114990234375,"type":"simplify"},{"compiler":[[4076,3062]],"time":53.032958984375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 1) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))","fresh",0.5170289062950725],["(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","fresh",14.366666301544411],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3)) (sin.f64 x))","fresh",14.532948048156596],["(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))","next",0.48997885745286235],["(*.f64 8/3 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x)))","fresh",28.80661985232777],["(/.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","fresh",14.584763136072578],["(*.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))))","fresh",0.8527617918949671],["(/.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2)))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","fresh",28.153078026718813],["(*.f64 (/.f64 (cbrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4))) 1) (/.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (sin.f64 x)))","fresh",28.69367603670269],["(log1p.f64 (expm1.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))","fresh",29.515383715226406],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","done",14.359669141861522],["(*.f64 (/.f64 1 (sin.f64 x)) (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))","fresh",28.810818469475024],["(*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (/.f64 1 (sin.f64 x))))","fresh",0.5935326660635145]],"compiler":[[21,18],[12,10],[20,17],[15,12],[12,10],[18,15],[26,20],[17,14],[25,22],[14,12],[17,14],[14,12],[21,18],[21,18],[12,10],[20,17],[15,12],[12,10],[18,15],[26,20],[17,14],[25,22],[14,12],[14,12],[21,18]],"count":[[220,13]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[218,12],"picked":[1,1]}],"min-error":[0.03515625],"time":47.39208984375,"type":"prune"},{"compiler":[[42,30]],"locations":[["(sin.f64 (*.f64 x 1/2))",0.03125,false],["(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))",0.30078125,true],["(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))",0.30859375,true],["(/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))",0.34765625,true]],"time":13.5419921875,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))","x","-inf",0.163818359375],["(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))","x","inf",0.190185546875],["(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))","x","0",0.190185546875],["(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","x","-inf",0.169921875],["(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","x","inf",0.14208984375],["(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","x","0",0.16015625],["(/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","-inf",0.574951171875],["(/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","inf",0.573974609375],["(/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","x","0",0.30908203125]],"time":2.60400390625,"type":"series"},{"count":[[3,122]],"egraph":[[2,2665,40,0.025072125],[1,209,40,0.003729209],[0,10,45,0.000333]],"inputs":[["(/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (/.f64 1 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 8/3 (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 1 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) (pow.f64 (cbrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) 2) (cbrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 2) (*.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) (sqrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (*.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (/.f64 1 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8/3) (/.f64 1 (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 x)) (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) 1) (/.f64 8/3 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8/3 (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 2) 1) (/.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1) (/.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8/3 (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (/.f64 8/3 (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) -2) (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 2) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (/.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (cbrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 8/3 (sqrt.f64 (sin.f64 x))) (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (sin.f64 x))) (/.f64 8/3 (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 x) -1/2) (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 2) (sqrt.f64 (sin.f64 x))) (/.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 64/9 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3) (pow.f64 (sin.f64 x) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) 2)) (cbrt.f64 (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (sqrt.f64 (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (neg.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 64/9 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3) (pow.f64 (sin.f64 x) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1) (log.f64 (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) (*.f64 (log.f64 (sin.f64 x)) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1) (*.f64 (log.f64 (sin.f64 x)) 1)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 64/9 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 2)) (cbrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))) (sqrt.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 64/9 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 x) (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) 1) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (cbrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sqrt.f64 (sin.f64 x))) (sqrt.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -8/3) (sin.f64 (*.f64 x 1/2))) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 (*.f64 x 1/2)) -8/3)) (neg.f64 (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))) 2)) (cbrt.f64 (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))) (sqrt.f64 (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) (sin.f64 x))) 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (sin.f64 (*.f64 x 1/2))) 1) (log.f64 (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (*.f64 (log.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 1) (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (-.f64 (log.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (*.f64 (log.f64 (sin.f64 x)) 1)))))))"]],"rules":[["egg-rr",38],["egg-rr",24],["egg-rr",60]],"stop":[["node limit",1]],"time":53.281982421875,"type":"rewrite"},{"count":[[158,149]],"egraph":[[6,7968,482,0.036661791],[5,5268,482,0.025968666],[4,3327,482,0.01397875],[3,1040,482,0.0070944169999999996],[2,362,482,0.0026618329999999997],[1,152,484,0.001034625],[0,63,486,0.000307917]],"inputs":[["4/3","(+.f64 (*.f64 1/6 (pow.f64 x 2)) 4/3)","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 4/3 (*.f64 5/288 (pow.f64 x 4))))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 4/3 (+.f64 (*.f64 5/288 (pow.f64 x 4)) (*.f64 61/34560 (pow.f64 x 6)))))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 4/3 x)","(+.f64 (*.f64 4/3 x) (*.f64 -1/18 (pow.f64 x 3)))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3))))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 -1/241920 (pow.f64 x 7)) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3)))))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))"]],"method":["egg-herbie"],"outputs":[["4/3","(+.f64 (*.f64 1/6 (pow.f64 x 2)) 4/3)","(fma.f64 1/6 (*.f64 x x) 4/3)","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 4/3 (*.f64 5/288 (pow.f64 x 4))))","(fma.f64 1/6 (*.f64 x x) (+.f64 4/3 (*.f64 5/288 (pow.f64 x 4))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 5/288 (pow.f64 x 4) 4/3))","(+.f64 (*.f64 1/6 (pow.f64 x 2)) (+.f64 4/3 (+.f64 (*.f64 5/288 (pow.f64 x 4)) (*.f64 61/34560 (pow.f64 x 6)))))","(+.f64 (fma.f64 1/6 (*.f64 x x) 4/3) (fma.f64 5/288 (pow.f64 x 4) (*.f64 61/34560 (pow.f64 x 6))))","(+.f64 (fma.f64 1/6 (*.f64 x x) 4/3) (fma.f64 61/34560 (pow.f64 x 6) (*.f64 5/288 (pow.f64 x 4))))","(fma.f64 1/6 (*.f64 x x) (fma.f64 61/34560 (pow.f64 x 6) (fma.f64 5/288 (pow.f64 x 4) 4/3)))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x 5/288) 1/6) (fma.f64 61/34560 (pow.f64 x 6) 4/3))","(fma.f64 1/6 (*.f64 x x) (fma.f64 5/288 (pow.f64 x 4) (fma.f64 61/34560 (pow.f64 x 6) 4/3)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 1/2 x)) (sin.f64 x)))","(*.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 4/3 x)","(+.f64 (*.f64 4/3 x) (*.f64 -1/18 (pow.f64 x 3)))","(fma.f64 4/3 x (*.f64 -1/18 (pow.f64 x 3)))","(fma.f64 -1/18 (pow.f64 x 3) (*.f64 4/3 x))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3))))","(fma.f64 4/3 x (fma.f64 1/1440 (pow.f64 x 5) (*.f64 -1/18 (pow.f64 x 3))))","(fma.f64 4/3 x (fma.f64 -1/18 (pow.f64 x 3) (*.f64 1/1440 (pow.f64 x 5))))","(fma.f64 x (fma.f64 x (*.f64 x -1/18) 4/3) (*.f64 1/1440 (pow.f64 x 5)))","(+.f64 (*.f64 4/3 x) (+.f64 (*.f64 -1/241920 (pow.f64 x 7)) (+.f64 (*.f64 1/1440 (pow.f64 x 5)) (*.f64 -1/18 (pow.f64 x 3)))))","(fma.f64 4/3 x (fma.f64 -1/241920 (pow.f64 x 7) (fma.f64 1/1440 (pow.f64 x 5) (*.f64 -1/18 (pow.f64 x 3)))))","(fma.f64 4/3 x (fma.f64 -1/241920 (pow.f64 x 7) (fma.f64 -1/18 (pow.f64 x 3) (*.f64 1/1440 (pow.f64 x 5)))))","(fma.f64 4/3 x (fma.f64 -1/18 (pow.f64 x 3) (fma.f64 1/1440 (pow.f64 x 5) (*.f64 -1/241920 (pow.f64 x 7)))))","(fma.f64 -1/18 (pow.f64 x 3) (fma.f64 1/1440 (pow.f64 x 5) (fma.f64 -1/241920 (pow.f64 x 7) (*.f64 4/3 x))))","(fma.f64 4/3 x (fma.f64 1/1440 (pow.f64 x 5) (fma.f64 -1/241920 (pow.f64 x 7) (*.f64 -1/18 (pow.f64 x 3)))))","(fma.f64 1/1440 (pow.f64 x 5) (fma.f64 -1/241920 (pow.f64 x 7) (fma.f64 -1/18 (pow.f64 x 3) (*.f64 4/3 x))))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (sin.f64 (*.f64 1/2 x)))","(*.f64 8/3 (sin.f64 (*.f64 x 1/2)))","(*.f64 2/3 x)","(*.f64 x 2/3)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(fma.f64 1/18 (pow.f64 x 3) (*.f64 x 2/3))","(fma.f64 x 2/3 (*.f64 (pow.f64 x 3) 1/18))","(*.f64 x (fma.f64 x (*.f64 x 1/18) 2/3))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 2/3 x (*.f64 (pow.f64 x 5) 1/180)))","(fma.f64 (pow.f64 x 3) 1/18 (fma.f64 (pow.f64 x 5) 1/180 (*.f64 x 2/3)))","(fma.f64 x 2/3 (fma.f64 (pow.f64 x 5) 1/180 (*.f64 (pow.f64 x 3) 1/18)))","(fma.f64 (pow.f64 x 5) 1/180 (fma.f64 x 2/3 (*.f64 (pow.f64 x 3) 1/18)))","(fma.f64 x 2/3 (fma.f64 (pow.f64 x 3) 1/18 (*.f64 (pow.f64 x 5) 1/180)))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 2/3 x (*.f64 (pow.f64 x 5) 1/180))))","(fma.f64 (pow.f64 x 3) 1/18 (fma.f64 (pow.f64 x 7) 17/30240 (fma.f64 (pow.f64 x 5) 1/180 (*.f64 x 2/3))))","(fma.f64 (pow.f64 x 3) 1/18 (fma.f64 x 2/3 (fma.f64 (pow.f64 x 5) 1/180 (*.f64 (pow.f64 x 7) 17/30240))))","(fma.f64 x (fma.f64 x (*.f64 x 1/18) 2/3) (fma.f64 (pow.f64 x 5) 1/180 (*.f64 (pow.f64 x 7) 17/30240)))","(fma.f64 (pow.f64 x 7) 17/30240 (fma.f64 (pow.f64 x 5) 1/180 (fma.f64 x 2/3 (*.f64 (pow.f64 x 3) 1/18))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))"]],"stop":[["node limit",1]],"time":56.697998046875,"type":"simplify"},{"compiler":[[4248,3194]],"time":55.87109375,"type":"eval"},{"alts":[["(*.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 1) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))","fresh",0.5170289062950725],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3)) (sin.f64 x))","fresh",14.532948048156596],["(*.f64 (/.f64 (cbrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4))) 1) (/.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (sin.f64 x)))","fresh",28.69367603670269],["(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3))","fresh",0.7020265625901448],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","done",14.359669141861522],["(*.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (/.f64 8/3 (cbrt.f64 (sin.f64 x)))) (sin.f64 (*.f64 x 1/2)))","fresh",15.545142958997682],["(*.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))))","fresh",0.8527617918949671],["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","next",0.26304628907376804],["(*.f64 (+.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (sin.f64 (*.f64 x 1/2)))","fresh",0.48025141606351446]],"compiler":[[21,18],[20,17],[25,22],[18,15],[17,14],[22,17],[26,20],[15,12],[31,25],[21,18],[20,17],[25,22],[18,15],[22,17],[26,20],[15,12],[31,25]],"count":[[242,9]],"kept":[{"done":[1,1],"fresh":[11,4],"new":[229,4],"picked":[1,0]}],"min-error":[0],"time":57.31396484375,"type":"prune"},{"compiler":[[43,29]],"locations":[["(sin.f64 (*.f64 x 1/2))",0.03125,false],["(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))",0.1328125,true],["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))",0.16015625,true],["(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))",0.2109375,true]],"time":13.3759765625,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","x","-inf",0.286865234375],["(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","x","inf",0.31201171875],["(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","x","0",0.972900390625],["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","x","-inf",0.172119140625],["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","x","inf",0.18896484375],["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","x","0",0.176025390625],["(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","x","-inf",0.382080078125],["(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","x","inf",0.39697265625],["(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","x","0",0.304931640625]],"time":3.326904296875,"type":"series"},{"count":[[3,139]],"egraph":[[2,2801,45,0.026482708],[1,214,45,0.004053792],[0,10,47,0.00033975]],"inputs":[["(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (/.f64 1 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (*.f64 (cbrt.f64 (sin.f64 x)) (/.f64 1 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 2) (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 x)) (*.f64 (sqrt.f64 (sin.f64 x)) (/.f64 1 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 x)) (/.f64 1 (neg.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sin.f64 (*.f64 x 1/2))) (sin.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) -2) (/.f64 (sin.f64 x) (cbrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) -1/2) (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) 1) (/.f64 (cbrt.f64 (sin.f64 x)) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 x)) 1) (/.f64 (sqrt.f64 (sin.f64 x)) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2)) (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 x)) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2)) (/.f64 (sqrt.f64 (sin.f64 x)) (cbrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 x)) 2) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))) (/.f64 (cbrt.f64 (sin.f64 x)) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (sin.f64 (*.f64 x 1/2)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (cbrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))) (sqrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 x) (neg.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 x) 3) (pow.f64 (sin.f64 (*.f64 x 1/2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (*.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -2)) (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -1/2) (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 1 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) -3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (*.f64 (sin.f64 (*.f64 x 1/2)) 8/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 1) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 3/8) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) 3/8) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) -2) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2)) (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2)) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) -1/2) (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) 8/3) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) 8/3) 1) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) 8/3) (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 2)) (cbrt.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))) (sqrt.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) -3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))) -1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) 3/8)) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) 1) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2)) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 3/8) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3/8 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 1) (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 2)) (cbrt.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))) (sqrt.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 1) 1))))))"]],"rules":[["egg-rr",34],["egg-rr",58],["egg-rr",47]],"stop":[["node limit",1]],"time":57.156982421875,"type":"rewrite"},{"count":[[175,167]],"egraph":[[5,6505,486,0.028216124000000002],[4,3927,486,0.015454708000000001],[3,1012,486,0.007475916],[2,334,486,0.00244325],[1,139,488,0.0009245],[0,59,498,0.000285917]],"inputs":[["2","(+.f64 2 (*.f64 -1/4 (pow.f64 x 2)))","(+.f64 (*.f64 1/192 (pow.f64 x 4)) (+.f64 2 (*.f64 -1/4 (pow.f64 x 2))))","(+.f64 (*.f64 1/192 (pow.f64 x 4)) (+.f64 2 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1/23040 (pow.f64 x 6)))))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","3/4","(+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))","(+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2))))","(+.f64 (*.f64 -1/61440 (pow.f64 x 6)) (+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))"]],"method":["egg-herbie"],"outputs":[["2","(+.f64 2 (*.f64 -1/4 (pow.f64 x 2)))","(+.f64 2 (*.f64 -1/4 (*.f64 x x)))","(fma.f64 -1/4 (*.f64 x x) 2)","(+.f64 (*.f64 1/192 (pow.f64 x 4)) (+.f64 2 (*.f64 -1/4 (pow.f64 x 2))))","(fma.f64 1/192 (pow.f64 x 4) (+.f64 2 (*.f64 -1/4 (*.f64 x x))))","(fma.f64 1/192 (pow.f64 x 4) (fma.f64 -1/4 (*.f64 x x) 2))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x 1/192) -1/4) 2)","(+.f64 (*.f64 1/192 (pow.f64 x 4)) (+.f64 2 (+.f64 (*.f64 -1/4 (pow.f64 x 2)) (*.f64 -1/23040 (pow.f64 x 6)))))","(fma.f64 1/192 (pow.f64 x 4) (+.f64 2 (fma.f64 -1/4 (*.f64 x x) (*.f64 -1/23040 (pow.f64 x 6)))))","(+.f64 (fma.f64 1/192 (pow.f64 x 4) (fma.f64 -1/4 (*.f64 x x) 2)) (*.f64 -1/23040 (pow.f64 x 6)))","(fma.f64 1/192 (pow.f64 x 4) (fma.f64 -1/4 (*.f64 x x) (fma.f64 -1/23040 (pow.f64 x 6) 2)))","(fma.f64 -1/4 (*.f64 x x) (fma.f64 1/192 (pow.f64 x 4) (fma.f64 -1/23040 (pow.f64 x 6) 2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))","(*.f64 2/3 x)","(*.f64 x 2/3)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(fma.f64 1/18 (pow.f64 x 3) (*.f64 x 2/3))","(fma.f64 x 2/3 (*.f64 1/18 (pow.f64 x 3)))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 2/3 x (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 x 2/3 (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 x 2/3 (fma.f64 1/18 (pow.f64 x 3) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 2/3 x (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 x 2/3 (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 1/180 (pow.f64 x 5) (fma.f64 17/30240 (pow.f64 x 7) (*.f64 x 2/3))))","(fma.f64 x 2/3 (fma.f64 1/180 (pow.f64 x 5) (fma.f64 17/30240 (pow.f64 x 7) (*.f64 1/18 (pow.f64 x 3)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 8/3 (/.f64 (sin.f64 x) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))","(*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (/.f64 8/3 (sin.f64 x)))","3/4","(+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))","(+.f64 3/4 (*.f64 (*.f64 x x) -3/32))","(fma.f64 (*.f64 x x) -3/32 3/4)","(fma.f64 x (*.f64 x -3/32) 3/4)","(+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2))))","(fma.f64 1/512 (pow.f64 x 4) (+.f64 3/4 (*.f64 (*.f64 x x) -3/32)))","(fma.f64 (pow.f64 x 4) 1/512 (fma.f64 (*.f64 x x) -3/32 3/4))","(fma.f64 x (*.f64 x -3/32) (fma.f64 (pow.f64 x 4) 1/512 3/4))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x 1/512) -3/32) 3/4)","(+.f64 (*.f64 -1/61440 (pow.f64 x 6)) (+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))))","(fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 1/512 (pow.f64 x 4) (+.f64 3/4 (*.f64 (*.f64 x x) -3/32))))","(fma.f64 (pow.f64 x 6) -1/61440 (fma.f64 (pow.f64 x 4) 1/512 (fma.f64 (*.f64 x x) -3/32 3/4)))","(fma.f64 (pow.f64 x 4) 1/512 (fma.f64 (pow.f64 x 6) -1/61440 (fma.f64 x (*.f64 x -3/32) 3/4)))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x 1/512) -3/32) (fma.f64 (pow.f64 x 6) -1/61440 3/4))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","(*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))"]],"stop":[["node limit",1]],"time":47.41015625,"type":"simplify"},{"compiler":[[4684,3543]],"time":60.074951171875,"type":"eval"},{"alts":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2)))))","fresh",0.3223038086106521],["(/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2))))","fresh",0.32068256837909415],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","done",14.359669141861522],["(*.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (/.f64 8/3 (cbrt.f64 (sin.f64 x)))) (sin.f64 (*.f64 x 1/2)))","fresh",15.545142958997682],["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (cbrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))))","fresh",18.426151318379095],["(/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)) -1))","fresh",0.4079476074528623],["(/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3))","fresh",0.3975563965266303],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) 3/8) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","fresh",0.6756466430530089],["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))","next",0.2926750488422101],["(*.f64 (+.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (sin.f64 (*.f64 x 1/2)))","fresh",0.48025141606351446]],"compiler":[[15,12],[15,12],[17,14],[22,17],[30,24],[17,14],[18,15],[24,20],[17,14],[31,25],[15,12],[15,12],[22,17],[30,24],[17,14],[18,15],[24,20],[17,14],[31,25]],"count":[[256,10]],"kept":[{"done":[1,1],"fresh":[7,2],"new":[247,7],"picked":[1,0]}],"min-error":[0],"time":73.282958984375,"type":"prune"},{"compiler":[[66,46]],"locations":[["(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)",0.1328125,true],["(log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))",0.15234375,true],["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))",0.16015625,true],["(/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))",0.2109375,false]],"time":23.007080078125,"type":"localize"},{"count":[[3,36]],"series":[["(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","x","-inf",0.15087890625],["(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","x","inf",0.180908203125],["(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)","x","0",0.14892578125],["(log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))","x","-inf",0.152099609375],["(log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))","x","inf",0.181884765625],["(log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))","x","0",0.156005859375],["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))","x","-inf",0.203857421875],["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))","x","inf",0.2021484375],["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))","x","0",0.262939453125]],"time":1.79296875,"type":"series"},{"count":[[3,132]],"egraph":[[2,2948,48,0.026167083],[1,234,48,0.004160125],[0,12,50,0.00037]],"inputs":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))","(log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))","(*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (*.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))) (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -2)) (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/2) (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 1 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) -3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) (/.f64 (sin.f64 (*.f64 x 1/2)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) 3/8) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 1) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 3/8) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 8/3 (/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) 3/8) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) -2) (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (cbrt.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2)))) (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2)))) (/.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) -1/2) (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) -3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (neg.f64 (log.f64 (cbrt.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (pow.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)) -1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (neg.f64 (log.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (sin.f64 (*.f64 x 1/2)) 2)))) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3)) (log.f64 (+.f64 1 (-.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2) (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2))) (log.f64 (-.f64 1 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 x) (*.f64 (/.f64 1 (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) (cbrt.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2))) (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2)) (*.f64 (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) (*.f64 (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (sin.f64 x) 3/8) (/.f64 1 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) 1) (/.f64 3/8 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2)) (/.f64 3/8 (cbrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sin.f64 x) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))) (/.f64 3/8 (sqrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3/8 (cbrt.f64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2))) (cbrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 3/8 (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) (sqrt.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (/.f64 (sin.f64 (*.f64 x 1/2)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) 3/8)) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) 1) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2)) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 3/8) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3/8 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 1) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log1p.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3)) (log.f64 (+.f64 1 (-.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2) (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (log.f64 (-.f64 1 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2))) (log.f64 (-.f64 1 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 x) (/.f64 (sin.f64 (*.f64 x 1/2)) 3/8))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (sin.f64 x) 3/8)) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) 1) (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2)) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (sin.f64 x) 3/8) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))) (sqrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (sin.f64 x)) 3/8) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 3/8 (neg.f64 (sin.f64 x))) (neg.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 9/64 (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 3/8) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (log.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 1) 1))))))"]],"rules":[["egg-rr",33],["egg-rr",48],["egg-rr",51]],"stop":[["node limit",1]],"time":54.7060546875,"type":"rewrite"},{"count":[[168,117]],"egraph":[[6,6640,510,0.032386084],[5,4951,510,0.020824001],[4,2729,510,0.012132501],[3,760,510,0.005657084],[2,261,510,0.002025834],[1,113,510,0.0008212930000000001],[0,48,522,0.000268959]],"inputs":[["(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","3/4","(+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))","(+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2))))","(+.f64 (*.f64 -1/61440 (pow.f64 x 6)) (+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","3/4","(+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))","(+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2))))","(+.f64 (*.f64 -1/61440 (pow.f64 x 6)) (+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 2/3 x)","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (*.f64 2/3 x))","(fma.f64 1/18 (pow.f64 x 3) (*.f64 2/3 x))","(fma.f64 2/3 x (*.f64 1/18 (pow.f64 x 3)))","(*.f64 x (fma.f64 1/18 (*.f64 x x) 2/3))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 2/3 x (*.f64 1/180 (pow.f64 x 5))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 1/180 (pow.f64 x 5) (*.f64 2/3 x)))","(fma.f64 2/3 x (fma.f64 1/180 (pow.f64 x 5) (*.f64 1/18 (pow.f64 x 3))))","(fma.f64 x (fma.f64 1/18 (*.f64 x x) 2/3) (*.f64 1/180 (pow.f64 x 5)))","(+.f64 (*.f64 1/18 (pow.f64 x 3)) (+.f64 (*.f64 17/30240 (pow.f64 x 7)) (+.f64 (*.f64 2/3 x) (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 2/3 x (*.f64 1/180 (pow.f64 x 5)))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 1/180 (pow.f64 x 5) (*.f64 2/3 x))))","(fma.f64 1/18 (pow.f64 x 3) (fma.f64 2/3 x (fma.f64 1/180 (pow.f64 x 5) (*.f64 17/30240 (pow.f64 x 7)))))","(fma.f64 x (fma.f64 1/18 (*.f64 x x) 2/3) (fma.f64 1/180 (pow.f64 x 5) (*.f64 17/30240 (pow.f64 x 7))))","(fma.f64 1/180 (pow.f64 x 5) (fma.f64 17/30240 (pow.f64 x 7) (fma.f64 1/18 (pow.f64 x 3) (*.f64 2/3 x))))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","3/4","(+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))","(+.f64 3/4 (*.f64 -3/32 (*.f64 x x)))","(fma.f64 -3/32 (*.f64 x x) 3/4)","(fma.f64 x (*.f64 x -3/32) 3/4)","(+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2))))","(fma.f64 1/512 (pow.f64 x 4) (+.f64 3/4 (*.f64 -3/32 (*.f64 x x))))","(fma.f64 1/512 (pow.f64 x 4) (fma.f64 -3/32 (*.f64 x x) 3/4))","(fma.f64 x (*.f64 x -3/32) (fma.f64 1/512 (pow.f64 x 4) 3/4))","(+.f64 (*.f64 -1/61440 (pow.f64 x 6)) (+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))))","(fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 1/512 (pow.f64 x 4) (+.f64 3/4 (*.f64 -3/32 (*.f64 x x)))))","(fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 1/512 (pow.f64 x 4) (fma.f64 -3/32 (*.f64 x x) 3/4)))","(fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 x (*.f64 x -3/32) (fma.f64 1/512 (pow.f64 x 4) 3/4)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/512 -3/32) (fma.f64 -1/61440 (pow.f64 x 6) 3/4))","(fma.f64 x (*.f64 x -3/32) (fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 1/512 (pow.f64 x 4) 3/4)))","(fma.f64 x (*.f64 x -3/32) (fma.f64 1/512 (pow.f64 x 4) (fma.f64 -1/61440 (pow.f64 x 6) 3/4)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","3/4","(+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))","(+.f64 3/4 (*.f64 -3/32 (*.f64 x x)))","(fma.f64 -3/32 (*.f64 x x) 3/4)","(fma.f64 x (*.f64 x -3/32) 3/4)","(+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2))))","(fma.f64 1/512 (pow.f64 x 4) (+.f64 3/4 (*.f64 -3/32 (*.f64 x x))))","(fma.f64 1/512 (pow.f64 x 4) (fma.f64 -3/32 (*.f64 x x) 3/4))","(fma.f64 x (*.f64 x -3/32) (fma.f64 1/512 (pow.f64 x 4) 3/4))","(+.f64 (*.f64 -1/61440 (pow.f64 x 6)) (+.f64 (*.f64 1/512 (pow.f64 x 4)) (+.f64 3/4 (*.f64 -3/32 (pow.f64 x 2)))))","(fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 1/512 (pow.f64 x 4) (+.f64 3/4 (*.f64 -3/32 (*.f64 x x)))))","(fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 1/512 (pow.f64 x 4) (fma.f64 -3/32 (*.f64 x x) 3/4)))","(fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 x (*.f64 x -3/32) (fma.f64 1/512 (pow.f64 x 4) 3/4)))","(fma.f64 (*.f64 x x) (fma.f64 (*.f64 x x) 1/512 -3/32) (fma.f64 -1/61440 (pow.f64 x 6) 3/4))","(fma.f64 x (*.f64 x -3/32) (fma.f64 -1/61440 (pow.f64 x 6) (fma.f64 1/512 (pow.f64 x 4) 3/4)))","(fma.f64 x (*.f64 x -3/32) (fma.f64 1/512 (pow.f64 x 4) (fma.f64 -1/61440 (pow.f64 x 6) 3/4)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 1/2 x))))","(*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))","(/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2)))","(/.f64 3/8 (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))"]],"stop":[["node limit",1]],"time":52.572998046875,"type":"simplify"},{"compiler":[[3418,2639]],"time":45.367919921875,"type":"eval"},{"alts":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sin.f64 x) (/.f64 (sin.f64 (*.f64 x 1/2)) 3/8)))","fresh",0.2692375488422101],["(/.f64 (sin.f64 (*.f64 x 1/2)) (-.f64 (log1p.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3)) (log.f64 (+.f64 1 (-.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2) (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))))","fresh",0.5422165666231433],["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (*.f64 (/.f64 1 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) 3/8))))","fresh",0.3893738281475362],["(/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3))","fresh",0.3975563965266303],["(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))) 3/8))))","fresh",0.502785861536347],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","done",14.359669141861522],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) 3/8) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","fresh",0.6756466430530089],["(/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2))))","fresh",0.32068256837909415],["(*.f64 (+.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (sin.f64 (*.f64 x 1/2)))","fresh",0.48025141606351446]],"compiler":[[15,12],[46,37],[19,16],[18,15],[33,27],[17,14],[24,20],[15,12],[31,25]],"count":[[183,9]],"kept":[{"done":[1,1],"fresh":[8,3],"new":[173,5],"picked":[1,0]}],"min-error":[0],"time":45.89501953125,"type":"prune"},{"accuracy":[0.26304628907376804],"baseline":[0.26304628907376804],"branch":[["x",0.26304628907376804,1],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))",0.26304628907376804,1]],"compiler":[[2,1],[17,14],[568,428]],"count":[[30,1]],"inputs":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (sin.f64 x) (/.f64 (sin.f64 (*.f64 x 1/2)) 3/8)))","(/.f64 (sin.f64 (*.f64 x 1/2)) (-.f64 (log1p.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3)) (log.f64 (+.f64 1 (-.f64 (pow.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 2) (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)))))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (*.f64 (/.f64 1 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) 3/8))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (+.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))) 3/8))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) (/.f64 3/8 (sin.f64 (*.f64 x 1/2)))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 (*.f64 (sin.f64 x) 3/8) (sin.f64 (*.f64 x 1/2))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))) 2)) (cbrt.f64 (log.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))))))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (sin.f64 x) 3/8)) -1))","(/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8)) 3))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) 3/8) (/.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","(/.f64 (sin.f64 (*.f64 x 1/2)) (log1p.f64 (expm1.f64 (*.f64 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2))) 3/8))))","(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3))","(*.f64 (*.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (cbrt.f64 (pow.f64 (sin.f64 x) 2))) (/.f64 8/3 (cbrt.f64 (sin.f64 x)))) (sin.f64 (*.f64 x 1/2)))","(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))","(*.f64 (+.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 8/3) (/.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 x)))))) (sin.f64 (*.f64 x 1/2)))","(*.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) 1) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (sin.f64 x)))","(*.f64 8/3 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2) (sin.f64 x)))","(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3)) (sin.f64 x))","(*.f64 (/.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2))) (sin.f64 x)) (sin.f64 (*.f64 x 1/2)))","(*.f64 8/3 (/.f64 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))) (sin.f64 x)))","(/.f64 (*.f64 (pow.f64 (cbrt.f64 (*.f64 8/3 (sin.f64 (*.f64 x 1/2)))) 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(*.f64 (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 x)) 2)) (/.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (cbrt.f64 (sin.f64 x))))","(/.f64 (*.f64 (log.f64 (pow.f64 (exp.f64 8/3) (sin.f64 (*.f64 x 1/2)))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))","(*.f64 (/.f64 (cbrt.f64 (*.f64 64/9 (pow.f64 (sin.f64 (*.f64 x 1/2)) 4))) 1) (/.f64 (cbrt.f64 (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x))))) (sin.f64 x)))","(log1p.f64 (expm1.f64 (/.f64 8/3 (/.f64 (sin.f64 x) (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))))","(*.f64 (/.f64 1 (sin.f64 x)) (*.f64 8/3 (-.f64 1/2 (*.f64 1/2 (cos.f64 x)))))","(*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (*.f64 (*.f64 (sqrt.f64 8/3) (sin.f64 (*.f64 x 1/2))) (/.f64 1 (sin.f64 x))))","(/.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))) (/.f64 (sin.f64 x) 8/3))","(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))"]],"link":["."],"name":["Graphics.Rasterific.Svg.PathConverter:segmentToBezier from rasterific-svg-0.2.3.1, A"],"oracle":[48.360361045962875],"outputs":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))"]],"time":27.18603515625,"times":[["x",9.242919921875],["(/.f64 (*.f64 (*.f64 (/.f64 8 3) (sin.f64 (*.f64 x 1/2))) (sin.f64 (*.f64 x 1/2))) (sin.f64 x))",8.19287109375]],"type":"regimes"},{"compiler":[[15,12]],"egraph":[[1,12,22,3.7625e-5],[0,10,22,2.1625e-5]],"inputs":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 3/8 (/.f64 (sin.f64 x) (sin.f64 (*.f64 x 1/2)))))"]],"stop":[["fuel",1],["saturated",1]],"time":8.533935546875,"type":"simplify"},{"time":0.005126953125,"type":"soundness"},{"compiler":[[15,12]],"remove-preprocessing":[[]],"time":10.22998046875,"type":"end"}]
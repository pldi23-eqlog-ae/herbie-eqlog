[{"compiler":[[17,11]],"method":["search"],"sampling":[[12,0.29058954069728316,0.5246213855541555,0.18478907374856135],[11,0.22233025261402872,0.6250600523052299,0.1526096950807414],[10,0.15212069915696702,0.7215981883086897,0.12628111253434326],[9,0.10141379943797801,0.803509334008595,0.09507686655342695],[8,0.062408491961832624,0.8815199489608858,0.05607155907728156],[7,0.0,0.9517295024179475,0.048270497582052485],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":124.27587890625,"type":"analyze"},{"outcomes":[["body",256,"invalid",76.84326171875,1535],["body",4096,"valid",84.6318359375,393],["body",512,"valid",34.532470703125,388],["body",1024,"valid",94.252197265625,731],["body",2048,"valid",200.306640625,1181],["body",256,"valid",278.129638671875,5563]],"time":778.888916015625,"type":"sample"},{"compiler":[[16,10]],"egraph":[[0,3,3,2.208e-6],[11,7203,80,0.07925104100000001],[10,7139,80,0.06678499900000001],[9,7066,80,0.056967999000000005],[8,6767,80,0.047328416000000005],[7,5846,80,0.036922249000000004],[6,3283,80,0.024573291],[5,1256,80,0.011551666],[4,694,80,0.004877875],[3,390,80,0.002322208],[2,167,80,0.000996166],[1,82,80,0.0003805],[0,30,80,0.0001205]],"inputs":[["0","1","2"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b_2 c)))) b_2)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a)))) c)","(/.f64 (-.f64 (neg.f64 c) (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 a b_2)))) a)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))) a)","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","(/.f64 (-.f64 (neg.f64 a) (sqrt.f64 (-.f64 (*.f64 a a) (*.f64 b_2 c)))) b_2)","(/.f64 (+.f64 a (sqrt.f64 (fma.f64 b_2 (neg.f64 c) (*.f64 a a)))) (neg.f64 b_2))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a)))) c)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) c)","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (fma.f64 b_2 b_2 (*.f64 c (neg.f64 a))))) c)","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 c))","(/.f64 (-.f64 (neg.f64 c) (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 a b_2)))) a)","(/.f64 (-.f64 (neg.f64 c) (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 b_2 a)))) a)","(/.f64 (-.f64 (neg.f64 c) (sqrt.f64 (fma.f64 b_2 (neg.f64 a) (*.f64 c c)))) a)","(/.f64 (-.f64 (neg.f64 c) (sqrt.f64 (fma.f64 c c (*.f64 b_2 (neg.f64 a))))) a)","(/.f64 (+.f64 c (sqrt.f64 (-.f64 (*.f64 c c) (*.f64 b_2 a)))) (neg.f64 a))"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":104.400146484375,"type":"preprocess"},{"count":[[1,2]],"egraph":[[19,6117,20,0.080430417],[18,6105,20,0.07331154200000001],[17,6075,20,0.066100958],[16,6039,20,0.058903750000000005],[15,5981,20,0.052143458000000004],[14,5981,20,0.044707916],[13,5973,20,0.041311375],[12,5965,20,0.037926125],[11,5867,20,0.034624458],[10,3156,20,0.030967042],[9,1611,20,0.019946125000000002],[8,1224,20,0.012695375],[7,1011,20,0.0089505],[6,664,20,0.006145917],[5,394,20,0.003394084],[4,216,20,0.001717375],[3,126,20,0.000827375],[2,57,20,0.000396459],[1,27,20,0.000165709],[0,11,20,5.975e-5]],"inputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))"]],"stop":[["saturated",1]],"time":92.885986328125,"type":"simplify"},{"compiler":[[29,13]],"time":0.337890625,"type":"eval"},{"alts":[["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","next",32.527903220535755]],"compiler":[[16,10],[16,10]],"count":[[3,1]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[2,1],"picked":[0,0]}],"min-error":[32.527903220535755],"time":0.883056640625,"type":"prune"},{"compiler":[[52,10]],"locations":[["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))",0.125,true],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))",0.21484375000000003,true],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))",0.8944631528467288,true],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))",23.59808729629627,true]],"time":7.943115234375,"type":"localize"},{"count":[[4,84]],"series":[["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","c","-inf",0.3681640625],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","c","inf",0.598876953125],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","c","0",0.31689453125],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","a","-inf",0.404052734375],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","a","inf",1.2041015625],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","a","0",0.2900390625],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","b_2","-inf",0.41796875],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","b_2","inf",0.405029296875],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","b_2","0",0.694091796875],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","c","-inf",0.218017578125],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","c","inf",0.223876953125],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","c","0",0.251953125],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","a","-inf",0.23388671875],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","a","inf",0.22802734375],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","a","0",0.282958984375],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","b_2","-inf",0.7109375],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","b_2","inf",0.260986328125],["(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","b_2","0",0.243896484375],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","c","-inf",0.357177734375],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","c","inf",0.420166015625],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","c","0",0.19287109375],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","a","-inf",0.3330078125],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","a","inf",0.347900390625],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","a","0",0.200927734375],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","b_2","-inf",0.589111328125],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","b_2","inf",0.2431640625],["(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","b_2","0",0.241943359375],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","c","-inf",0.41015625],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","c","inf",0.635009765625],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","c","0",0.362060546875],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","a","-inf",0.4150390625],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","a","inf",0.60205078125],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","a","0",0.39599609375],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","b_2","-inf",0.340087890625],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","b_2","inf",0.517822265625],["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","b_2","0",0.89404296875]],"time":15.35986328125,"type":"series"},{"count":[[4,293]],"egraph":[[2,4003,44,0.028150667],[1,258,47,0.005207084000000001],[0,11,57,0.000266292]],"inputs":[["(sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))","(+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c))))","(-.f64 (*.f64 b_2 b_2) (*.f64 a c))","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3))) (hypot.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (sqrt.f64 (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 a c)) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (fma.f64 a c (*.f64 a c))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2)) (/.f64 1 (-.f64 (fma.f64 b_2 b_2 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c))) (/.f64 1 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2)) (+.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (-.f64 (*.f64 b_2 b_2) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c))) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2))) (neg.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)))) (neg.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 b_2 b_2)) (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 b_2 b_2 (*.f64 a c)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 b_2) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (exp.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b_2 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1 b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 b_2) (cbrt.f64 (*.f64 b_2 b_2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (cbrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (sqrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 b_2 4))) (sqrt.f64 (cbrt.f64 (*.f64 b_2 b_2))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2)) (sqrt.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b_2 b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 b_2 b_2) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 a c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 b_2 b_2 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 b_2 b_2 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 a c))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 b_2 b_2 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (/.f64 1 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (/.f64 1 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4)) (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (fma.f64 b_2 b_2 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3))) (neg.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2)) (neg.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (+.f64 (pow.f64 b_2 4) (-.f64 (pow.f64 (*.f64 a c) 2) (*.f64 (*.f64 b_2 b_2) (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3) (pow.f64 (fma.f64 a c (*.f64 a c)) 3)) (+.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (-.f64 (pow.f64 (fma.f64 a c (*.f64 a c)) 2) (*.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (pow.f64 (fma.f64 a c (*.f64 a c)) 2)) (-.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4)) (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 b_2 b_2))) (pow.f64 (exp.f64 c) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 b_2 b_2))) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (exp.f64 (*.f64 b_2 b_2)) (/.f64 1 (pow.f64 (exp.f64 c) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 (+.f64 1 (expm1.f64 (*.f64 b_2 b_2))) (/.f64 1 (pow.f64 (exp.f64 c) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 b_2 b_2))) (pow.f64 (exp.f64 c) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 b_2 b_2)) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 b_2 b_2))) (+.f64 1 (expm1.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 b_2 b_2)) (/.f64 1 (pow.f64 (exp.f64 c) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 b_2 b_2))) (/.f64 1 (pow.f64 (exp.f64 c) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 c) a) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 a c))) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 c) a)) (exp.f64 (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (pow.f64 (exp.f64 c) a) (+.f64 1 (expm1.f64 (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (*.f64 a c))) (+.f64 1 (expm1.f64 (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (/.f64 1 (pow.f64 (exp.f64 c) a)) (+.f64 1 (expm1.f64 (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (exp.f64 (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 a c (*.f64 a c))) (exp.f64 (fma.f64 b_2 b_2 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (fma.f64 a c (*.f64 a c))) (+.f64 1 (expm1.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (*.f64 b_2 b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 b_2 b_2 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b_2 b_2 (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b_2 b_2 (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b_2 b_2 (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 b_2) 1 (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 b_2) 1 (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 b_2) 1 (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a c (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 a (neg.f64 c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 c a (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a c) 1 (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1 (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1 (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1 (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1 (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 b_2 b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 b_2 b_2) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 b_2 b_2) (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (*.f64 a c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 b_2 b_2 (*.f64 a c)) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 b_2 b_2 (*.f64 a c)) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 b_2 b_2 (*.f64 a c)) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 a c (*.f64 a c)) (fma.f64 b_2 b_2 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (/.f64 1 (fma.f64 b_2 b_2 (*.f64 a c))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (/.f64 1 (fma.f64 b_2 b_2 (*.f64 a c))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (/.f64 1 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 2) (/.f64 1 (fma.f64 b_2 b_2 (*.f64 a c))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 c) 2) (*.f64 (cbrt.f64 c) a) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 a c)) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (cbrt.f64 (*.f64 a c)) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (cbrt.f64 (pow.f64 b_2 4)) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (cbrt.f64 (pow.f64 b_2 4)) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (cbrt.f64 (pow.f64 b_2 4)) (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 (cbrt.f64 b_2) b_2) (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 b_2 4)) (cbrt.f64 (*.f64 b_2 b_2)) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 b_2 4)) (cbrt.f64 (*.f64 b_2 b_2)) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 b_2 4)) (cbrt.f64 (*.f64 b_2 b_2)) (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 a) 2) (*.f64 (cbrt.f64 a) c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) 2) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (*.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 c) (*.f64 (sqrt.f64 c) a) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (*.f64 (sqrt.f64 b_2) b_2) (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 a c)) (sqrt.f64 (*.f64 a c)) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 a c)) (neg.f64 (sqrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 a) (*.f64 (sqrt.f64 a) c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 c) a (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (/.f64 1 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (/.f64 1 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (/.f64 1 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (/.f64 1 (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (*.f64 a c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 (sqrt.f64 b_2)) (sqrt.f64 b_2) (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) 3) (pow.f64 (fma.f64 b_2 b_2 (*.f64 a c)) 1/4) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 a c (*.f64 a c))) 2) (cbrt.f64 (fma.f64 a c (*.f64 a c))) (fma.f64 b_2 b_2 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 a c (*.f64 a c))) (sqrt.f64 (fma.f64 a c (*.f64 a c))) (fma.f64 b_2 b_2 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (sqrt.f64 (*.f64 a c))) (sqrt.f64 (*.f64 a c)) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)) (cbrt.f64 (*.f64 a c)) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (pow.f64 (cbrt.f64 c) 2)) (cbrt.f64 c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 a (sqrt.f64 c)) (sqrt.f64 c) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 c (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 a) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 c (sqrt.f64 a)) (sqrt.f64 a) (*.f64 b_2 b_2))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (*.f64 a c))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (fma.f64 a c (fma.f64 a c (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 b_2 (cbrt.f64 (*.f64 b_2 b_2))) (cbrt.f64 b_2) (neg.f64 (-.f64 (*.f64 a c) (fma.f64 a c (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (fma.f64 a c (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (fma.f64 (neg.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (*.f64 (fma.f64 a c (*.f64 a c)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) (cbrt.f64 (fma.f64 b_2 b_2 (*.f64 a c)))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (+.f64 (fma.f64 a c (*.f64 a c)) (fma.f64 a c (*.f64 a c))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)) (pow.f64 (cbrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)) 2) (cbrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) (*.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)) (sqrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (*.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (/.f64 1 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (/.f64 1 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 a) (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) 1) (/.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1) (/.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 a) 2)) (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) (pow.f64 (cbrt.f64 a) 2)) (cbrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (pow.f64 (cbrt.f64 a) 2)) (/.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (cbrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 a)) (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) (sqrt.f64 a)) (/.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (sqrt.f64 a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) -1) (/.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) -1) (/.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) a))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 a (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3) (pow.f64 a 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 a (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (exp.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3) (pow.f64 a 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) a)) 1))))))"]],"rules":[["egg-rr",44],["egg-rr",167],["egg-rr",51],["egg-rr",31]],"stop":[["node limit",1]],"time":65.613037109375,"type":"rewrite"},{"count":[[377,344]],"egraph":[[4,6772,1501,0.032913334],[3,4835,1507,0.01955325],[2,950,1592,0.008296625],[1,285,1619,0.0021098749999999998],[0,90,1673,0.000515125]],"inputs":[["b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -1 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 2 b_2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 1/2 (/.f64 (*.f64 c a) b_2))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 2 b_2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 2 b_2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(pow.f64 b_2 2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -1 (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(*.f64 -2 (/.f64 b_2 a))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))","(*.f64 -1/2 (/.f64 c b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (*.f64 a (pow.f64 b_2 7)))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))","(*.f64 -2 (/.f64 b_2 a))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))","(*.f64 -2 (/.f64 b_2 a))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))"]],"method":["egg-herbie"],"outputs":[["b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(+.f64 b_2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)))","(fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (+.f64 b_2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a))))))","(*.f64 -1 b_2)","(neg.f64 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 -1 b_2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1/2))","(-.f64 (/.f64 (*.f64 c 1/2) (/.f64 b_2 a)) b_2)","(-.f64 (*.f64 (*.f64 a (/.f64 c b_2)) 1/2) b_2)","(-.f64 (/.f64 c (/.f64 (/.f64 b_2 a) 1/2)) b_2)","(+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1 b_2 (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 c (/.f64 b_2 a)) 1/2)))","(-.f64 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8)) b_2)","(-.f64 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c)) a)) b_2)","(-.f64 (*.f64 a (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2)))) b_2)","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1 b_2) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1 b_2 (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 c (/.f64 b_2 a)) 1/2))))","(fma.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) 1/16 (-.f64 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8)) b_2))","(-.f64 (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) 1/16))) b_2)","(-.f64 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))) b_2)","(fma.f64 a (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))) (fma.f64 (/.f64 1/16 (pow.f64 b_2 5)) (pow.f64 (*.f64 c a) 3) (neg.f64 b_2)))","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(+.f64 b_2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)))","(fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (+.f64 b_2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a))))))","b_2","(+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2))","(fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(+.f64 b_2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (+.f64 b_2 (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (+.f64 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) b_2)))","(fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (+.f64 b_2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a))))))","(*.f64 2 b_2)","(*.f64 b_2 2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 2 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))","(fma.f64 b_2 2 (/.f64 (*.f64 -1/2 c) (/.f64 b_2 a)))","(fma.f64 b_2 2 (*.f64 (/.f64 c b_2) (*.f64 -1/2 a)))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 2 b_2 (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 c (*.f64 c (*.f64 -1/8 (*.f64 a a)))) (pow.f64 b_2 3))))","(fma.f64 b_2 2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 2 b_2 (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 c (*.f64 c (*.f64 -1/8 (*.f64 a a)))) (pow.f64 b_2 3)))))","(fma.f64 b_2 2 (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a))))))","(*.f64 1/2 (/.f64 (*.f64 c a) b_2))","(*.f64 (/.f64 c (/.f64 b_2 a)) 1/2)","(/.f64 (*.f64 c 1/2) (/.f64 b_2 a))","(*.f64 (*.f64 a (/.f64 c b_2)) 1/2)","(/.f64 c (/.f64 (/.f64 b_2 a) 1/2))","(+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 c (/.f64 b_2 a)) 1/2))","(fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8))","(fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c)) a))","(*.f64 a (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 c (/.f64 b_2 a)) 1/2)))","(fma.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) 1/16 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8)))","(fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) 1/16)))","(fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2)))))","(+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (pow.f64 b_2 7))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 c c) (*.f64 a a))) 2)) (pow.f64 b_2 7)) (fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 (/.f64 c (/.f64 b_2 a)) 1/2))))","(fma.f64 1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (pow.f64 b_2 7)) (fma.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) 1/16 (fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) 1/8))))","(fma.f64 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) 1/16 (fma.f64 1/2 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7)) (fma.f64 (*.f64 a (/.f64 c b_2)) 1/2 (*.f64 (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c)) a))))","(+.f64 (*.f64 a (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2)))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/128) (pow.f64 b_2 7))))","(+.f64 (*.f64 a (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2)))) (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (pow.f64 (*.f64 c a) 4) 5/128) (pow.f64 b_2 7))))","(*.f64 2 b_2)","(*.f64 b_2 2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 2 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))","(fma.f64 b_2 2 (/.f64 (*.f64 -1/2 c) (/.f64 b_2 a)))","(fma.f64 b_2 2 (*.f64 (/.f64 c b_2) (*.f64 -1/2 a)))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 2 b_2 (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 c (*.f64 c (*.f64 -1/8 (*.f64 a a)))) (pow.f64 b_2 3))))","(fma.f64 b_2 2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 2 b_2 (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 c (*.f64 c (*.f64 -1/8 (*.f64 a a)))) (pow.f64 b_2 3)))))","(fma.f64 b_2 2 (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a))))))","(*.f64 2 b_2)","(*.f64 b_2 2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))","(fma.f64 2 b_2 (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))","(fma.f64 b_2 2 (/.f64 (*.f64 -1/2 c) (/.f64 b_2 a)))","(fma.f64 b_2 2 (*.f64 (/.f64 c b_2) (*.f64 -1/2 a)))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2))))","(fma.f64 2 b_2 (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 c (/.f64 b_2 a)))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 c (*.f64 c (*.f64 -1/8 (*.f64 a a)))) (pow.f64 b_2 3))))","(fma.f64 b_2 2 (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a)))))","(+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5))) (+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 (*.f64 c a) b_2)))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 2 b_2 (fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))) (*.f64 -1/2 (/.f64 c (/.f64 b_2 a))))))","(fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (pow.f64 a 3))) (fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 a 3) (pow.f64 b_2 5)) (pow.f64 c 3)) (fma.f64 -1/2 (*.f64 a (/.f64 c b_2)) (/.f64 (*.f64 c (*.f64 c (*.f64 -1/8 (*.f64 a a)))) (pow.f64 b_2 3)))))","(fma.f64 b_2 2 (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (*.f64 (*.f64 a (/.f64 c b_2)) (+.f64 -1/2 (/.f64 (*.f64 c -1/8) (/.f64 (*.f64 b_2 b_2) a))))))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(pow.f64 b_2 2)","(*.f64 b_2 b_2)","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -1 (*.f64 c a))","(neg.f64 (*.f64 c a))","(*.f64 c (neg.f64 a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(+.f64 (*.f64 -1 (*.f64 c a)) (pow.f64 b_2 2))","(fma.f64 -1 (*.f64 c a) (*.f64 b_2 b_2))","(-.f64 (*.f64 b_2 b_2) (*.f64 c a))","(*.f64 -2 (/.f64 b_2 a))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 -2 (/.f64 b_2 a) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a))))","(fma.f64 1/2 (/.f64 c b_2) (fma.f64 -2 (/.f64 b_2 a) (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c))))","(fma.f64 1/2 (/.f64 c b_2) (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 -2 (/.f64 b_2 a))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (*.f64 a a))))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (fma.f64 1/16 (*.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) a)) a) (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 a (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))))","(*.f64 -1/2 (/.f64 c b_2))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 -1/2 (/.f64 c b_2)))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a)))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 (/.f64 c (/.f64 (pow.f64 b_2 3) c)) (*.f64 a -1/8)))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (*.f64 a a)))))","(fma.f64 -1/2 (/.f64 c b_2) (fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) a)) a))))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 a (+.f64 (*.f64 -1/8 (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (/.f64 (*.f64 -1/16 (pow.f64 c 3)) (/.f64 (pow.f64 b_2 5) a)))))","(+.f64 (*.f64 -1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 -1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 (pow.f64 c 2) (pow.f64 a 2))) 2)) (*.f64 a (pow.f64 b_2 7)))) (+.f64 (*.f64 -1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 c c) (*.f64 a a))) 2)) (*.f64 a (pow.f64 b_2 7))) (fma.f64 -1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 -1/2 (/.f64 c b_2)))))","(fma.f64 -1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 -1/2 (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (*.f64 a (pow.f64 b_2 7))) (fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (*.f64 a a))))))","(fma.f64 -1/8 (*.f64 a (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) a)) a) (*.f64 -1/2 (+.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (*.f64 a (pow.f64 b_2 7))) (/.f64 c b_2)))))","(fma.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (fma.f64 -1/2 (/.f64 c b_2) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) a)) a) (/.f64 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) -5/128) (pow.f64 b_2 7)) a))))","(fma.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (fma.f64 -1/2 (/.f64 c b_2) (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) a)) a) (/.f64 (/.f64 (*.f64 (pow.f64 (*.f64 c a) 4) -5/128) (pow.f64 b_2 7)) a))))","(*.f64 -2 (/.f64 b_2 a))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 -2 (/.f64 b_2 a) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a))))","(fma.f64 1/2 (/.f64 c b_2) (fma.f64 -2 (/.f64 b_2 a) (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c))))","(fma.f64 1/2 (/.f64 c b_2) (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 -2 (/.f64 b_2 a))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (*.f64 a a))))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (fma.f64 1/16 (*.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) a)) a) (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 a (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))))","(*.f64 -2 (/.f64 b_2 a))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 -2 (/.f64 b_2 a) (*.f64 1/2 (/.f64 c b_2)))","(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (*.f64 1/2 (/.f64 c b_2))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a))))","(fma.f64 1/2 (/.f64 c b_2) (fma.f64 -2 (/.f64 b_2 a) (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c))))","(fma.f64 1/2 (/.f64 c b_2) (fma.f64 1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3))) (*.f64 -2 (/.f64 b_2 a))))","(+.f64 (*.f64 -2 (/.f64 b_2 a)) (+.f64 (*.f64 1/8 (/.f64 (*.f64 (pow.f64 c 2) a) (pow.f64 b_2 3))) (+.f64 (*.f64 1/16 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 2)) (pow.f64 b_2 5))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) a)) (fma.f64 1/16 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) (*.f64 a a))) (*.f64 1/2 (/.f64 c b_2)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/8 (*.f64 (/.f64 (*.f64 c c) (pow.f64 b_2 3)) a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (*.f64 a a))))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (fma.f64 1/16 (*.f64 (/.f64 (pow.f64 c 3) (/.f64 (pow.f64 b_2 5) a)) a) (/.f64 (*.f64 a 1/8) (/.f64 (/.f64 (pow.f64 b_2 3) c) c)))))","(fma.f64 -2 (/.f64 b_2 a) (fma.f64 1/2 (/.f64 c b_2) (*.f64 a (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))))"]],"stop":[["node limit",1]],"time":65.318115234375,"type":"simplify"},{"compiler":[[7432,2350]],"time":47.700927734375,"type":"eval"},{"alts":[["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","next",32.580012009609526],["(/.f64 (+.f64 b_2 (sqrt.f64 (*.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (neg.f64 a))","fresh",57.11278649290261],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","done",32.527903220535755],["(/.f64 (+.f64 b_2 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))))) (neg.f64 a))","fresh",50.755635717876004],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))","fresh",46.3561075183385],["(*.f64 -1/2 (/.f64 c b_2))","fresh",42.170844669718306],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.78178616770977],["(*.f64 -2 (/.f64 b_2 a))","fresh",45.6596790785587]],"compiler":[[24,14],[22,12],[16,10],[32,18],[19,13],[8,6],[13,9],[8,6],[24,14],[22,12],[32,18],[19,13],[8,6],[13,9],[8,6]],"count":[[345,8]],"kept":[{"done":[0,0],"fresh":[0,0],"new":[344,7],"picked":[1,1]}],"min-error":[5.9128848876601365],"time":83.2978515625,"type":"prune"},{"compiler":[[100,29]],"locations":[["(pow.f64 (cbrt.f64 (*.f64 a c)) 2)",0.42873002930532605,true],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))",0.8944631528467288,true],["(cbrt.f64 (*.f64 a c))",13.74020476174517,true],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))",23.59808729629627,true]],"time":18.942138671875,"type":"localize"},{"count":[[4,28]],"series":[["(pow.f64 (cbrt.f64 (*.f64 a c)) 2)","c","-inf",0.365966796875],["(pow.f64 (cbrt.f64 (*.f64 a c)) 2)","c","inf",0.301025390625],["(pow.f64 (cbrt.f64 (*.f64 a c)) 2)","c","0",0.256103515625],["(pow.f64 (cbrt.f64 (*.f64 a c)) 2)","a","-inf",0.376953125],["(pow.f64 (cbrt.f64 (*.f64 a c)) 2)","a","inf",0.302001953125],["(pow.f64 (cbrt.f64 (*.f64 a c)) 2)","a","0",0.260009765625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","-inf",0.366943359375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","inf",0.319091796875],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","0",0.31298828125],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","-inf",0.351806640625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","inf",0.330078125],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","0",0.31103515625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","-inf",0.43505859375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","inf",0.266845703125],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","0",0.37109375],["(cbrt.f64 (*.f64 a c))","c","-inf",0.27197265625],["(cbrt.f64 (*.f64 a c))","c","inf",0.2490234375],["(cbrt.f64 (*.f64 a c))","c","0",0.220947265625],["(cbrt.f64 (*.f64 a c))","a","-inf",0.30712890625],["(cbrt.f64 (*.f64 a c))","a","inf",0.22607421875],["(cbrt.f64 (*.f64 a c))","a","0",0.255859375],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","-inf",0.2880859375],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","inf",0.87109375],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","0",1.236083984375],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","-inf",0.55712890625],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","inf",0.467041015625],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","0",0.47705078125],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","-inf",1.39501953125],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","inf",0.5419921875],["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","0",1.048095703125]],"time":13.828857421875,"type":"series"},{"count":[[4,152]],"egraph":[[2,3455,36,0.029273833000000003],[1,274,42,0.005878541],[0,13,68,0.000399333]],"inputs":[["(sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","(cbrt.f64 (*.f64 a c))","(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","(pow.f64 (cbrt.f64 (*.f64 a c)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/6) (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2) 1/4)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/6) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 a c)) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 a c (*.f64 b_2 b_2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 a c)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 a c))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 0 (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (*.f64 a c)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a c)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (cbrt.f64 c))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (neg.f64 (cbrt.f64 c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 c) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2) (cbrt.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2) (neg.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a c) 1/6) (pow.f64 (*.f64 a c) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a c) 1/6) (neg.f64 (pow.f64 (*.f64 a c) 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 4)) (sqrt.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 a)) (cbrt.f64 c))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (pow.f64 (*.f64 a c) 1/6)) (pow.f64 (*.f64 a c) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2)) (cbrt.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (cbrt.f64 a)) (cbrt.f64 c))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 -1 (pow.f64 (*.f64 a c) 1/6)) (pow.f64 (*.f64 a c) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (*.f64 a c)) (+.f64 0 (+.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (*.f64 0 (cbrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 0 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)) (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a c) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a c)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a c) 2) 1/6)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a c) 3) 1/9)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2) 3/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a c) 1/6) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 a c)) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (cbrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 a c)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (*.f64 a c))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (/.f64 (fma.f64 a c (*.f64 b_2 b_2)) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2)) (/.f64 1 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2))) (/.f64 1 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2)) (+.f64 (fma.f64 a c (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2))) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2))) (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))) (neg.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 b_2) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (exp.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b_2 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1 b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/6) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/6) (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 b_2) (pow.f64 (cbrt.f64 b_2) 2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 b_2) 2) (cbrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (sqrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 b_2) b_2)) (sqrt.f64 (pow.f64 (cbrt.f64 b_2) 2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 a c)) (cbrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 a) 2) (pow.f64 (cbrt.f64 c) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 4) (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 a c) 1/6) (sqrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 a c)) (pow.f64 (*.f64 a c) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 5) (cbrt.f64 (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 a c)) (cbrt.f64 a)) (cbrt.f64 c))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a c) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 a c))) 1))))))"]],"rules":[["egg-rr",26],["egg-rr",50],["egg-rr",47],["egg-rr",29]],"stop":[["node limit",1]],"time":57.615234375,"type":"rewrite"},{"count":[[180,183]],"egraph":[[5,7826,453,0.042952331999999996],[4,5681,456,0.029296248999999996],[3,3476,470,0.016177498999999998],[2,765,477,0.006531957],[1,229,492,0.002014166],[0,72,585,0.000468125]],"inputs":[["b_2","b_2","b_2","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(*.f64 -1 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 2 b_2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3)))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))))))","(*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)"]],"method":["egg-herbie"],"outputs":[["b_2","b_2","b_2","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (fma.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(fma.f64 -1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (fma.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) b_2)))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(*.f64 -1 b_2)","(neg.f64 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))","(-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2)","(-.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) b_2)","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (neg.f64 b_2))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2))","(-.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2)) b_2)","(-.f64 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a)))) b_2)","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))))","(fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2)))","(-.f64 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (/.f64 (pow.f64 b_2 5) 1/16)))) b_2)","(-.f64 (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2))","(-.f64 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a))))) b_2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 2 b_2 (*.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1)))","(fma.f64 b_2 2 (*.f64 -1/2 (*.f64 (/.f64 c b_2) a)))","(fma.f64 b_2 2 (*.f64 -1/2 (*.f64 (/.f64 a b_2) c)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 b_2 2))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3)))))","(fma.f64 2 b_2 (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (*.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 b_2 2 (*.f64 a (+.f64 (/.f64 (*.f64 -1/2 c) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)))))","(fma.f64 b_2 2 (*.f64 a (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)) (/.f64 (*.f64 -1/2 c) b_2))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))))))","(fma.f64 2 b_2 (fma.f64 -1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (*.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (*.f64 a (+.f64 (/.f64 (*.f64 -1/2 c) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (*.f64 a (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)) (/.f64 (*.f64 -1/2 c) b_2)))))","(*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)","(*.f64 (*.f64 (/.f64 c b_2) a) 1/2)","(*.f64 (*.f64 (/.f64 a b_2) c) 1/2)","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))","(fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2))","(*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2)))","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (/.f64 (pow.f64 b_2 5) 1/16))))","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a)))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (*.f64 1/2 (+.f64 (/.f64 (fma.f64 1/16 (*.f64 1 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 1 (*.f64 (*.f64 c c) (*.f64 a a)))) 2)) (pow.f64 b_2 7)) (*.f64 (/.f64 c (/.f64 b_2 a)) 1)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (*.f64 1/2 (+.f64 (*.f64 (/.f64 c b_2) a) (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (pow.f64 b_2 7))))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (*.f64 1/2 (fma.f64 (/.f64 c b_2) a (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7))))))","(fma.f64 1/2 (fma.f64 (/.f64 c b_2) a (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7))) (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/128) (pow.f64 b_2 7)))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (pow.f64 (*.f64 c a) 4) 5/128) (pow.f64 b_2 7)))))","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)"]],"stop":[["node limit",1]],"time":62.9580078125,"type":"simplify"},{"compiler":[[5380,2069]],"time":46.36181640625,"type":"eval"},{"alts":[["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","fresh",32.58163324984108],["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","next",32.56991449984108],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","done",32.527903220535755],["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (/.f64 (-.f64 0 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)) (cbrt.f64 (*.f64 a c))) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","fresh",34.49248737779311],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))","fresh",46.3561075183385],["(*.f64 -1/2 (/.f64 c b_2))","fresh",42.170844669718306],["(/.f64 (+.f64 b_2 (sqrt.f64 (*.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (neg.f64 a))","fresh",57.11278649290261],["(/.f64 (+.f64 b_2 (pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2) 1/4)) (neg.f64 a))","fresh",45.67838765930824],["(/.f64 (fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 b_2) b_2)) (sqrt.f64 (pow.f64 (cbrt.f64 b_2) 2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (neg.f64 a))","fresh",55.94740520612466],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.78178616770977],["(/.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) (neg.f64 a))","fresh",46.648873682882304],["(*.f64 -2 (/.f64 b_2 a))","fresh",45.6596790785587]],"compiler":[[25,17],[28,16],[16,10],[33,19],[19,13],[8,6],[22,12],[18,12],[23,15],[13,9],[13,9],[8,6],[25,17],[28,16],[33,19],[19,13],[8,6],[22,12],[18,12],[23,15],[13,9],[13,9],[8,6]],"count":[[238,12]],"kept":[{"done":[1,1],"fresh":[6,5],"new":[230,6],"picked":[1,0]}],"min-error":[5.8933527509753265],"time":69.2919921875,"type":"prune"},{"compiler":[[130,16]],"locations":[["(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))",0.32650375976844204,true],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))",0.8944631528467288,true],["(cbrt.f64 (*.f64 a c))",13.74020476174517,false],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))",23.59808729629627,true]],"time":15.816162109375,"type":"localize"},{"count":[[3,28]],"series":[["(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))","c","-inf",0.32177734375],["(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))","c","inf",0.166015625],["(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))","c","0",0.198974609375],["(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))","a","-inf",0.303955078125],["(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))","a","inf",0.19384765625],["(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))","a","0",0.169921875],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","-inf",0.258056640625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","inf",0.2412109375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","0",0.244140625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","-inf",0.243896484375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","inf",0.27197265625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","0",0.22998046875],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","-inf",0.2880859375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","inf",0.239013671875],["(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","0",0.238037109375],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","-inf",0.22900390625],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","inf",0.225830078125],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","0",0.510009765625],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","-inf",0.378173828125],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","inf",0.427001953125],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","0",0.4140625],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","-inf",0.592041015625],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","inf",0.5380859375],["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","0",1.68115234375]],"time":8.962890625,"type":"series"},{"count":[[3,99]],"egraph":[[2,3964,30,0.029690708],[1,308,36,0.005650083],[0,15,77,0.000332416]],"inputs":[["(sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","(+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","(*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c))))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2))) (sqrt.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 a c)) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 a c (*.f64 b_2 b_2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (/.f64 (fma.f64 a c (*.f64 b_2 b_2)) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2) (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2)) (/.f64 1 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2))) (/.f64 1 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2)) (+.f64 (fma.f64 a c (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2))) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2))) (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))) (neg.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2)))) (neg.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 a c (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 a c (*.f64 b_2 b_2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 b_2) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (exp.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b_2 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) 1 b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 b_2) (pow.f64 (cbrt.f64 b_2) 2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 b_2) 2) (cbrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 1/4) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (sqrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 b_2 4))) (sqrt.f64 (pow.f64 (cbrt.f64 b_2) 2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2))) (sqrt.f64 (cbrt.f64 (fma.f64 a c (*.f64 b_2 b_2)))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c))) b_2)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 a c) 2/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 a c)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 a c) (cbrt.f64 (*.f64 a c))) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 a c) 2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (*.f64 a c))) 2) 3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (*.f64 (*.f64 a c) (cbrt.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (exp.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 a c) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (*.f64 a c))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 a c))) 1))))))"]],"rules":[["egg-rr",21],["egg-rr",51],["egg-rr",27]],"stop":[["node limit",1]],"time":55.071044921875,"type":"rewrite"},{"count":[[127,130]],"egraph":[[5,7826,453,0.043011665000000004],[4,5681,456,0.028884457000000002],[3,3476,470,0.015762832],[2,765,477,0.006147291],[1,229,492,0.001716874],[0,72,585,0.000401333]],"inputs":[["b_2","b_2","b_2","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(*.f64 -1 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 2 b_2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3)))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))))))","(*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)"]],"method":["egg-herbie"],"outputs":[["b_2","b_2","b_2","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (fma.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(fma.f64 -1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (fma.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) b_2)))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(*.f64 -1 b_2)","(neg.f64 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))","(-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2)","(-.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) b_2)","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (neg.f64 b_2))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2))","(-.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2)) b_2)","(-.f64 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a)))) b_2)","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))))","(fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2)))","(-.f64 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (/.f64 (pow.f64 b_2 5) 1/16)))) b_2)","(-.f64 (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2))","(-.f64 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a))))) b_2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 2 b_2 (*.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1)))","(fma.f64 b_2 2 (*.f64 -1/2 (*.f64 (/.f64 c b_2) a)))","(fma.f64 b_2 2 (*.f64 -1/2 (*.f64 (/.f64 a b_2) c)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 b_2 2))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3)))))","(fma.f64 2 b_2 (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (*.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 b_2 2 (*.f64 a (+.f64 (/.f64 (*.f64 -1/2 c) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)))))","(fma.f64 b_2 2 (*.f64 a (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)) (/.f64 (*.f64 -1/2 c) b_2))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))))))","(fma.f64 2 b_2 (fma.f64 -1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (*.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (*.f64 a (+.f64 (/.f64 (*.f64 -1/2 c) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (*.f64 a (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)) (/.f64 (*.f64 -1/2 c) b_2)))))","(*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)","(*.f64 (*.f64 (/.f64 c b_2) a) 1/2)","(*.f64 (*.f64 (/.f64 a b_2) c) 1/2)","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))","(fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2))","(*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2)))","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (/.f64 (pow.f64 b_2 5) 1/16))))","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a)))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (*.f64 1/2 (+.f64 (/.f64 (fma.f64 1/16 (*.f64 1 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 1 (*.f64 (*.f64 c c) (*.f64 a a)))) 2)) (pow.f64 b_2 7)) (*.f64 (/.f64 c (/.f64 b_2 a)) 1)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (*.f64 1/2 (+.f64 (*.f64 (/.f64 c b_2) a) (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (pow.f64 b_2 7))))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (*.f64 1/2 (fma.f64 (/.f64 c b_2) a (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7))))))","(fma.f64 1/2 (fma.f64 (/.f64 c b_2) a (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7))) (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/128) (pow.f64 b_2 7)))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (pow.f64 (*.f64 c a) 4) 5/128) (pow.f64 b_2 7)))))","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)"]],"stop":[["node limit",1]],"time":62.6669921875,"type":"simplify"},{"compiler":[[5611,1930]],"time":38.39794921875,"type":"eval"},{"alts":[["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","next",32.58163324984108],["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","done",32.56991449984108],["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","done",32.527903220535755],["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (/.f64 (-.f64 0 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)) (cbrt.f64 (*.f64 a c))) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","fresh",34.49248737779311],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))","fresh",46.3561075183385],["(*.f64 -1/2 (/.f64 c b_2))","fresh",42.170844669718306],["(/.f64 (+.f64 b_2 (sqrt.f64 (*.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (neg.f64 a))","fresh",57.11278649290261],["(/.f64 (+.f64 b_2 (pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2) 1/4)) (neg.f64 a))","fresh",45.67838765930824],["(/.f64 (fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 b_2) b_2)) (sqrt.f64 (pow.f64 (cbrt.f64 b_2) 2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (neg.f64 a))","fresh",55.94740520612466],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.78178616770977],["(*.f64 -2 (/.f64 b_2 a))","fresh",45.6596790785587],["(/.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) (neg.f64 a))","fresh",46.648873682882304]],"compiler":[[25,17],[28,16],[16,10],[33,19],[19,13],[8,6],[22,12],[18,12],[23,15],[13,9],[8,6],[13,9],[25,17],[33,19],[19,13],[8,6],[22,12],[18,12],[23,15],[13,9],[8,6],[13,9]],"count":[[236,12]],"kept":[{"done":[1,1],"fresh":[10,9],"new":[224,1],"picked":[1,1]}],"min-error":[5.8933527509753265],"time":51.64306640625,"type":"prune"},{"compiler":[[114,32]],"locations":[["(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)",0.42873002930532605,true],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))",0.8944631528467288,true],["(cbrt.f64 (*.f64 a c))",13.74020476174517,false],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))",23.59808729629627,true]],"time":22.52685546875,"type":"localize"},{"count":[[3,28]],"series":[["(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)","a","-inf",0.22705078125],["(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)","a","inf",0.19287109375],["(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)","a","0",0.18798828125],["(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)","c","-inf",0.244873046875],["(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)","c","inf",0.19287109375],["(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)","c","0",0.2109375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","-inf",0.23681640625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","inf",0.2431640625],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","a","0",0.219970703125],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","-inf",0.2548828125],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","inf",0.22802734375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","c","0",0.239013671875],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","-inf",0.277099609375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","inf",0.21484375],["(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","b_2","0",0.241943359375],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","-inf",0.2021484375],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","inf",0.246826171875],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","b_2","0",0.382080078125],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","-inf",0.31689453125],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","inf",0.3349609375],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","a","0",0.302978515625],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","-inf",0.527099609375],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","inf",0.39501953125],["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","c","0",0.5869140625]],"time":7.106201171875,"type":"series"},{"count":[[3,109]],"egraph":[[2,3914,30,0.030390001],[1,333,36,0.0061396260000000005],[0,16,62,0.000407667]],"inputs":[["(sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))","(+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2))))","(pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 2)) (log.f64 (cbrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))) (log.f64 (sqrt.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1/4) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1/4))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 2))) (sqrt.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1/4) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x fabs.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x hypot.f64 (sqrt.f64 (*.f64 c a)) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 c a (*.f64 b_2 b_2))) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (*.f64 b_2 b_2) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (/.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 2) (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2)) (/.f64 1 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2))) (/.f64 1 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2)) (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2)) (+.f64 (fma.f64 c a (*.f64 b_2 b_2)) (-.f64 (*.f64 b_2 b_2) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2))) (-.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2))) (neg.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))) (neg.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (fma.f64 b_2 b_2 (fma.f64 c a (*.f64 b_2 b_2))) (*.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (+.f64 (pow.f64 b_2 3) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 3/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (-.f64 (*.f64 b_2 b_2) (fma.f64 c a (*.f64 b_2 b_2)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 b_2) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 b_2)) (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (exp.f64 b_2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) (+.f64 1 (expm1.f64 b_2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 b_2 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) 1 b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 b_2 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 b_2) (pow.f64 (cbrt.f64 b_2) 2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 b_2) 2) (cbrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2))) (cbrt.f64 (hypot.f64 b_2 (sqrt.f64 (*.f64 c a)))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1/4) (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 1/4) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 b_2) (sqrt.f64 b_2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 (fma.f64 c a (*.f64 b_2 b_2)) 2))) (sqrt.f64 (cbrt.f64 (fma.f64 c a (*.f64 b_2 b_2)))) b_2)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (cbrt.f64 (pow.f64 b_2 4))) (sqrt.f64 (pow.f64 (cbrt.f64 b_2) 2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 1 1/2) (hypot.f64 b_2 (sqrt.f64 (*.f64 c a))) b_2)))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))) (log.f64 (sqrt.f64 (exp.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 c) (*.f64 (cbrt.f64 a) (cbrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c a)) (cbrt.f64 (*.f64 c a)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 c c)) (pow.f64 (cbrt.f64 a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 a) 2) (cbrt.f64 (*.f64 c c)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 c a)) 4)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))) (cbrt.f64 (pow.f64 (cbrt.f64 (*.f64 c a)) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))) (*.f64 (cbrt.f64 (cbrt.f64 (*.f64 c a))) (cbrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 c a)) (pow.f64 (*.f64 c a) 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 c a) 1/6) (*.f64 (pow.f64 (*.f64 c a) 1/6) (cbrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 c a)) (cbrt.f64 c)) (cbrt.f64 a))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 c a)) (cbrt.f64 a)) (cbrt.f64 c))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (cbrt.f64 (*.f64 c a)) (cbrt.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))) (cbrt.f64 (cbrt.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 (*.f64 c a)) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (exp.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (/.f64 1 (+.f64 1 (expm1.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 c a) 2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cbrt.f64 (pow.f64 (*.f64 c a) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 2/3 (log.f64 (*.f64 c a))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 2/3 (log.f64 (*.f64 c a))) 1))))))"]],"rules":[["egg-rr",31],["egg-rr",51],["egg-rr",27]],"stop":[["node limit",1]],"time":56.934814453125,"type":"rewrite"},{"count":[[137,140]],"egraph":[[5,7826,453,0.043016707999999994],[4,5681,456,0.029442040999999995],[3,3476,470,0.016104373999999998],[2,765,477,0.006578749],[1,229,492,0.001807416],[0,72,585,0.000459041]],"inputs":[["b_2","b_2","b_2","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(*.f64 -1 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 2 b_2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3)))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))))))","(*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)","(*.f64 2 b_2)"]],"method":["egg-herbie"],"outputs":[["b_2","b_2","b_2","b_2","b_2","b_2","b_2","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) b_2)","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2)","(+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (fma.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) b_2))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2))","(fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2))","(+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) b_2)))","(fma.f64 -1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (fma.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) b_2)))","(fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (fma.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) b_2)))","(*.f64 -1 b_2)","(neg.f64 b_2)","(+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))","(-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2)","(-.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) b_2)","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (neg.f64 b_2))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2))","(-.f64 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2)) b_2)","(-.f64 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a)))) b_2)","(+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1 b_2) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 -1 b_2 (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))))","(fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (-.f64 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2) b_2)))","(-.f64 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (/.f64 (pow.f64 b_2 5) 1/16)))) b_2)","(-.f64 (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))) (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) b_2))","(-.f64 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a))))) b_2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(+.f64 (*.f64 2 b_2) (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 2 b_2 (*.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1)))","(fma.f64 b_2 2 (*.f64 -1/2 (*.f64 (/.f64 c b_2) a)))","(fma.f64 b_2 2 (*.f64 -1/2 (*.f64 (/.f64 a b_2) c)))","(fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 b_2 2))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3)))))","(fma.f64 2 b_2 (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (*.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (*.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 b_2 2 (*.f64 a (+.f64 (/.f64 (*.f64 -1/2 c) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)))))","(fma.f64 b_2 2 (*.f64 a (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)) (/.f64 (*.f64 -1/2 c) b_2))))","(+.f64 (*.f64 2 b_2) (+.f64 (*.f64 -1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 -1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))) (*.f64 -1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))))))","(fma.f64 2 b_2 (fma.f64 -1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (fma.f64 -1/2 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) (*.f64 -1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a))))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) (fma.f64 -1/2 (*.f64 (/.f64 c b_2) a) (*.f64 -1/8 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3))))))","(fma.f64 b_2 2 (fma.f64 -1/2 (*.f64 (/.f64 a b_2) c) (fma.f64 -1/8 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) (*.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) (*.f64 a (+.f64 (/.f64 (*.f64 -1/2 c) b_2) (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a))))))","(fma.f64 b_2 2 (fma.f64 -1/16 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) (*.f64 a (+.f64 (/.f64 (*.f64 -1/8 (*.f64 c c)) (/.f64 (pow.f64 b_2 3) a)) (/.f64 (*.f64 -1/2 c) b_2)))))","(*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))","(*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)","(*.f64 (*.f64 (/.f64 c b_2) a) 1/2)","(*.f64 (*.f64 (/.f64 a b_2) c) 1/2)","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2))","(fma.f64 (*.f64 (/.f64 c b_2) a) 1/2 (*.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2))","(*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3)))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (*.f64 (*.f64 (/.f64 c (/.f64 b_2 a)) 1) 1/2)))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (*.f64 (*.f64 (/.f64 c b_2) a) 1/2)))","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (/.f64 (pow.f64 b_2 5) 1/16))))","(fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (*.f64 a (+.f64 (/.f64 (*.f64 c 1/2) b_2) (/.f64 (*.f64 (*.f64 1/8 c) c) (/.f64 (pow.f64 b_2 3) a)))))","(+.f64 (*.f64 1/8 (*.f64 (/.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 b_2 3)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/16 (*.f64 (/.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) (pow.f64 b_2 5)) (pow.f64 1 1/3))) (+.f64 (*.f64 1/2 (/.f64 (+.f64 (*.f64 1/16 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (pow.f64 1 1/3))) (pow.f64 (*.f64 -1/8 (*.f64 (*.f64 (pow.f64 c 2) (pow.f64 a 2)) (pow.f64 1 1/3))) 2)) (pow.f64 b_2 7))) (*.f64 1/2 (*.f64 (/.f64 (*.f64 c a) b_2) (pow.f64 1 1/3))))))","(fma.f64 1/8 (*.f64 1 (/.f64 (*.f64 c c) (/.f64 (pow.f64 b_2 3) (*.f64 a a)))) (fma.f64 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 3) (pow.f64 a 3)) 1) (pow.f64 b_2 5)) (*.f64 1/2 (+.f64 (/.f64 (fma.f64 1/16 (*.f64 1 (*.f64 (pow.f64 c 4) (pow.f64 a 4))) (pow.f64 (*.f64 -1/8 (*.f64 1 (*.f64 (*.f64 c c) (*.f64 a a)))) 2)) (pow.f64 b_2 7)) (*.f64 (/.f64 c (/.f64 b_2 a)) 1)))))","(fma.f64 (/.f64 (*.f64 (*.f64 (*.f64 a a) c) c) (pow.f64 b_2 3)) 1/8 (fma.f64 (*.f64 (/.f64 (pow.f64 c 3) (pow.f64 b_2 5)) (pow.f64 a 3)) 1/16 (*.f64 1/2 (+.f64 (*.f64 (/.f64 c b_2) a) (/.f64 (fma.f64 1/16 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 1/64)) (pow.f64 b_2 7))))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (pow.f64 a 3) (/.f64 (pow.f64 c 3) (pow.f64 b_2 5))) 1/16 (*.f64 1/2 (fma.f64 (/.f64 c b_2) a (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7))))))","(fma.f64 1/2 (fma.f64 (/.f64 c b_2) a (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/64) (pow.f64 b_2 7))) (*.f64 (*.f64 a a) (+.f64 (/.f64 (*.f64 (pow.f64 c 3) 1/16) (/.f64 (pow.f64 b_2 5) a)) (*.f64 1/8 (/.f64 c (/.f64 (pow.f64 b_2 3) c))))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (*.f64 (pow.f64 c 4) (pow.f64 a 4)) 5/128) (pow.f64 b_2 7)))))","(fma.f64 (*.f64 (*.f64 a a) (/.f64 c (/.f64 (pow.f64 b_2 3) c))) 1/8 (fma.f64 (*.f64 (/.f64 a b_2) c) 1/2 (fma.f64 (/.f64 (pow.f64 (*.f64 c a) 3) (pow.f64 b_2 5)) 1/16 (/.f64 (*.f64 (pow.f64 (*.f64 c a) 4) 5/128) (pow.f64 b_2 7)))))","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)","(*.f64 2 b_2)","(*.f64 b_2 2)"]],"stop":[["node limit",1]],"time":61.93408203125,"type":"simplify"},{"compiler":[[4352,1714]],"time":34.777099609375,"type":"eval"},{"alts":[["(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","done",32.527903220535755],["(/.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) (neg.f64 a))","fresh",46.648873682882304],["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","done",32.58163324984108],["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 c c)) (pow.f64 (cbrt.f64 a) 2)) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","fresh",41.12838998009336],["(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (/.f64 (-.f64 0 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)) (cbrt.f64 (*.f64 a c))) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","fresh",34.49248737779311],["(fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))","fresh",46.3561075183385],["(*.f64 -1/2 (/.f64 c b_2))","fresh",42.170844669718306],["(/.f64 (+.f64 b_2 (sqrt.f64 (*.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (neg.f64 a))","fresh",57.11278649290261],["(/.f64 (+.f64 b_2 (pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2) 1/4)) (neg.f64 a))","fresh",45.67838765930824],["(/.f64 (fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 b_2) b_2)) (sqrt.f64 (pow.f64 (cbrt.f64 b_2) 2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (neg.f64 a))","fresh",55.94740520612466],["(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","fresh",45.78178616770977],["(*.f64 -2 (/.f64 b_2 a))","fresh",45.6596790785587]],"compiler":[[16,10],[13,9],[25,17],[27,18],[33,19],[19,13],[8,6],[22,12],[18,12],[23,15],[13,9],[8,6]],"count":[[199,12]],"kept":[{"done":[2,1],"fresh":[9,8],"new":[187,2],"picked":[1,1]}],"min-error":[5.8894465009753265],"time":38.7939453125,"type":"prune"},{"accuracy":[10.514470725793911],"baseline":[32.527903220535755],"branch":[["a",28.33747360189138,5],["b_2",10.514470725793911,3],["c",27.536266488513423,8],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",14.318819417350008,5]],"compiler":[[4,3],[4,3],[4,3],[16,10],[300,121]],"count":[[18,3]],"inputs":[["(/.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) (neg.f64 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 (*.f64 c c)) (pow.f64 (cbrt.f64 a) 2)) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","(/.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) (neg.f64 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (*.f64 (cbrt.f64 c) (cbrt.f64 a)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (*.f64 (cbrt.f64 a) (*.f64 (cbrt.f64 c) (cbrt.f64 (*.f64 a c)))) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (/.f64 (-.f64 0 (pow.f64 (cbrt.f64 (*.f64 a c)) 2)) (cbrt.f64 (*.f64 a c))) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","(/.f64 (+.f64 b_2 (pow.f64 (pow.f64 (fma.f64 a c (*.f64 b_2 b_2)) 2) 1/4)) (neg.f64 a))","(/.f64 (fma.f64 (sqrt.f64 (*.f64 (cbrt.f64 b_2) b_2)) (sqrt.f64 (pow.f64 (cbrt.f64 b_2) 2)) (hypot.f64 b_2 (sqrt.f64 (*.f64 a c)))) (neg.f64 a))","(/.f64 (*.f64 (*.f64 (/.f64 a b_2) c) 1/2) (neg.f64 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 (*.f64 a c)) 2) (neg.f64 (cbrt.f64 (*.f64 a c))) (*.f64 b_2 b_2)))) (neg.f64 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (*.f64 (+.f64 b_2 (sqrt.f64 (*.f64 a c))) (-.f64 b_2 (sqrt.f64 (*.f64 a c)))))) (neg.f64 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (/.f64 (-.f64 (pow.f64 b_2 6) (pow.f64 (*.f64 a c) 3)) (fma.f64 (*.f64 a c) (fma.f64 b_2 b_2 (*.f64 a c)) (pow.f64 b_2 4))))) (neg.f64 a))","(fma.f64 -1/2 (/.f64 c b_2) (*.f64 -1/8 (*.f64 a (/.f64 (*.f64 c c) (pow.f64 b_2 3)))))","(*.f64 -1/2 (/.f64 c b_2))","(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))","(*.f64 -2 (/.f64 b_2 a))","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)"]],"link":["."],"name":["quad2m (problem 3.2.1, negative)"],"oracle":[63.88231908095704],"outputs":[["(*.f64 -1/2 (/.f64 c b_2))","(/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a))","(fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))"]],"time":140.114013671875,"times":[["a",38.93896484375],["b_2",20.536865234375],["c",54.727783203125],["(/.f64 (-.f64 (neg.f64 b_2) (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) a)",20.9990234375]],"type":"regimes"},{"bstep":[[4.33265050415617e+151,3.538844027462676e+154,20.5],[-1.0656517422526733e-79,-6.638849991865585e-83,25.14599609375]],"compiler":[[14,10],[17,11],[14,10],[17,11],[14,10],[17,11],[14,10],[17,11],[14,10],[17,11],[14,10],[17,11],[14,10],[17,11],[14,10],[17,11],[17,11],[9,7],[17,11],[9,7],[17,11],[9,7],[17,11],[9,7],[17,11],[9,7],[17,11],[9,7],[17,11],[9,7],[17,11],[9,7],[18,12],[4,3]],"method":["binary-search","binary-search"],"time":45.864013671875,"type":"bsearch"},{"compiler":[[39,24]],"egraph":[[5,57,53,0.000416208],[4,56,53,0.000346083],[3,53,53,0.000270583],[2,48,53,0.00019908300000000002],[1,38,53,0.000126541],[0,26,53,6.375e-5]],"inputs":[["(if (<=.f64 b_2 -1161976947540975/17087896287367280659160173649356416916821636178853222159576332862577757806245124400183696695492608) (*.f64 -1/2 (/.f64 c b_2)) (if (<=.f64 b_2 44000000000000001337282404474065153633188704281347629956935333708734585781432455192874988159307500664932042793002440921672514241371703574326073320538112) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 b_2 -1161976947540975/17087896287367280659160173649356416916821636178853222159576332862577757806245124400183696695492608) (*.f64 -1/2 (/.f64 c b_2)) (if (<=.f64 b_2 44000000000000001337282404474065153633188704281347629956935333708734585781432455192874988159307500664932042793002440921672514241371703574326073320538112) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 a c)))) (neg.f64 a)) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))))","(if (<=.f64 b_2 -1161976947540975/17087896287367280659160173649356416916821636178853222159576332862577757806245124400183696695492608) (*.f64 -1/2 (/.f64 c b_2)) (if (<=.f64 b_2 44000000000000001337282404474065153633188704281347629956935333708734585781432455192874988159307500664932042793002440921672514241371703574326073320538112) (/.f64 (+.f64 b_2 (sqrt.f64 (-.f64 (*.f64 b_2 b_2) (*.f64 c a)))) (neg.f64 a)) (fma.f64 1/2 (/.f64 c b_2) (*.f64 -2 (/.f64 b_2 a)))))"]],"stop":[["fuel",1],["saturated",1]],"time":9.81884765625,"type":"simplify"},{"time":0.031005859375,"type":"soundness"},{"compiler":[[39,24]],"remove-preprocessing":[[]],"time":14.12109375,"type":"end"}]
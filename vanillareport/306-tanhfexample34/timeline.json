[{"compiler":[[9,7]],"method":["search"],"sampling":[[12,0.4992678165435791,0.5002439022064209,0.00048828125],[11,0.4987797737121582,0.5007319450378418,0.00048828125],[10,0.4978036880493164,0.5017080307006836,0.00048828125],[9,0.4958515167236328,0.5036602020263672,0.00048828125],[8,0.4919471740722656,0.5075645446777344,0.00048828125],[7,0.48413848876953125,0.5153732299804688,0.00048828125],[6,0.4685211181640625,0.5309906005859375,0.00048828125],[5,0.437286376953125,0.562225341796875,0.00048828125],[4,0.37481689453125,0.62469482421875,0.00048828125],[3,0.0,0.99951171875,0.00048828125],[2,0.0,0.99951171875,0.00048828125],[1,0.0,0.99951171875,0.00048828125],[0,0.0,0.99951171875,0.00048828125]],"time":96.931884765625,"type":"analyze"},{"outcomes":[["body",4096,"valid",87.14306640625,115],["body",8192,"valid",3.301025390625,2],["body",512,"valid",208.96240234375,1546],["body",1024,"valid",770.04150390625,3040],["body",2048,"valid",1668.8876953125,2040],["body",256,"valid",108.806396484375,1513]],"time":2856.070068359375,"type":"sample"},{"compiler":[[8,6]],"egraph":[[0,1,1,3.084e-6],[11,719,6,0.008370666],[10,684,6,0.006870500000000001],[9,537,6,0.005390541],[8,336,6,0.003679916],[7,185,6,0.002324541],[6,116,6,0.001355708],[5,79,6,0.00090525],[4,56,6,0.000582083],[3,33,6,0.000380667],[2,23,6,0.000238917],[1,17,6,0.00014595800000000001],[0,7,6,7.55e-5]],"inputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0"],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x 2))"]],"stop":[["saturated",1],["saturated",1]],"symmetry":[[]],"time":33.201904296875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[11,719,6,0.008196794],[10,684,6,0.006831836000000001],[9,537,6,0.005317877],[8,336,6,0.003535252],[7,185,6,0.0021968350000000003],[6,116,6,0.0012305430000000002],[5,79,6,0.0008065430000000001],[4,56,6,0.000535084],[3,33,6,0.000346418],[2,23,6,0.000212834],[1,17,6,0.00012716799999999999],[0,7,6,6.2834e-5]],"inputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","(tan.f64 (/.f64 x 2))"]],"stop":[["saturated",1]],"time":19.176025390625,"type":"simplify"},{"compiler":[[12,9]],"time":0.4091796875,"type":"eval"},{"alts":[["(tan.f64 (/.f64 x 2))","next",0.23503876953688405],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","fresh",28.783673387641333]],"compiler":[[5,4],[8,6],[5,4],[8,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.109375],"time":1.29296875,"type":"prune"},{"compiler":[[10,7]],"locations":[["(tan.f64 (/.f64 x 2))",0.23503876953688402,true]],"time":3.830810546875,"type":"localize"},{"count":[[1,12]],"series":[["(tan.f64 (/.f64 x 2))","x","-inf",0.45703125],["(tan.f64 (/.f64 x 2))","x","inf",0.497802734375],["(tan.f64 (/.f64 x 2))","x","0",0.47705078125]],"time":1.4912109375,"type":"series"},{"count":[[1,20]],"egraph":[[2,1290,6,0.016145792],[1,110,6,0.001995458],[0,5,6,0.000210833]],"inputs":[["(tan.f64 (/.f64 x 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (tan.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) 2) (cbrt.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 (*.f64 x 1/2))) (sqrt.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) (cos.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (neg.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 (*.f64 x 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 (*.f64 x 1/2))))))))"]],"rules":[["egg-rr",20]],"stop":[["node limit",1]],"time":34.98095703125,"type":"rewrite"},{"count":[[32,28]],"egraph":[[18,7833,170,0.127916125],[17,7621,170,0.11787120899999999],[16,7246,170,0.10717558399999999],[15,6849,170,0.09754487599999999],[14,6340,170,0.08820366799999999],[13,5694,170,0.07878091799999999],[12,4800,170,0.068376835],[11,4121,170,0.057432085],[10,3640,170,0.047454876],[9,3325,170,0.039342626],[8,3079,170,0.033358667],[7,2926,170,0.028368],[6,1977,170,0.023627083],[5,1353,170,0.013084417000000001],[4,615,170,0.009193042],[3,323,170,0.006940042],[2,135,170,0.001092417],[1,62,170,0.00048537499999999997],[0,25,170,0.0001735]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/2 x (*.f64 1/24 (pow.f64 x 3)))","(*.f64 x (fma.f64 x (*.f64 x 1/24) 1/2))","(*.f64 x (fma.f64 1/24 (*.f64 x x) 1/2))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (*.f64 1/240 (pow.f64 x 5))))","(fma.f64 x (fma.f64 x (*.f64 x 1/24) 1/2) (*.f64 1/240 (pow.f64 x 5)))","(fma.f64 x (fma.f64 1/24 (*.f64 x x) 1/2) (*.f64 1/240 (pow.f64 x 5)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 1/24 (pow.f64 x 3) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (fma.f64 1/240 (pow.f64 x 5) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 x (fma.f64 1/24 (*.f64 x x) 1/2))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"stop":[["node limit",1]],"time":152.788818359375,"type":"simplify"},{"compiler":[[262,209]],"time":5.175048828125,"type":"eval"},{"alts":[["(expm1.f64 (log1p.f64 (tan.f64 (*.f64 x 1/2))))","fresh",7.980838818379093],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))","fresh",28.783673387641333],["(/.f64 1 (/.f64 (cos.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))))","fresh",0.3310737793053261],["(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","next",0.26400375976844204],["(*.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) 2))","fresh",0.7551691895798913],["(log1p.f64 (expm1.f64 (tan.f64 (*.f64 x 1/2))))","fresh",0.6989252083313511],["(-.f64 (+.f64 1 (tan.f64 (*.f64 x 1/2))) 1)","fresh",28.19381711855457],["(log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))","fresh",28.230451622676416]],"compiler":[[7,6],[8,6],[12,10],[12,10],[14,12],[7,6],[9,8],[7,6],[7,6],[8,6],[12,10],[12,10],[14,12],[7,6],[9,8],[7,6]],"count":[[30,8]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[28,7],"picked":[1,0]}],"min-error":[0.00390625],"time":7.795166015625,"type":"prune"},{"compiler":[[32,25]],"locations":[["(cos.f64 (*.f64 x 1/2))",0.01171875,true],["(sin.f64 (*.f64 x 1/2))",0.03125,true],["(/.f64 1 (cos.f64 (*.f64 x 1/2)))",0.09765625,true],["(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))",0.23503876953688402,true]],"time":12.66796875,"type":"localize"},{"count":[[4,48]],"series":[["(cos.f64 (*.f64 x 1/2))","x","-inf",0.169921875],["(cos.f64 (*.f64 x 1/2))","x","inf",0.14306640625],["(cos.f64 (*.f64 x 1/2))","x","0",0.182861328125],["(sin.f64 (*.f64 x 1/2))","x","-inf",0.168212890625],["(sin.f64 (*.f64 x 1/2))","x","inf",0.14501953125],["(sin.f64 (*.f64 x 1/2))","x","0",0.238037109375],["(/.f64 1 (cos.f64 (*.f64 x 1/2)))","x","-inf",0.345947265625],["(/.f64 1 (cos.f64 (*.f64 x 1/2)))","x","inf",0.39013671875],["(/.f64 1 (cos.f64 (*.f64 x 1/2)))","x","0",0.48095703125],["(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","x","-inf",0.178955078125],["(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","x","inf",0.210205078125],["(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","x","0",0.240966796875]],"time":3.08984375,"type":"series"},{"count":[[4,84]],"egraph":[[2,2075,27,0.024750709],[1,180,27,0.0032595840000000003],[0,9,35,0.000328792]],"inputs":[["(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","(/.f64 1 (cos.f64 (*.f64 x 1/2)))","(sin.f64 (*.f64 x 1/2))","(cos.f64 (*.f64 x 1/2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (tan.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sin.f64 (*.f64 x 1/2)) (cos.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cos.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (/.f64 (cos.f64 (*.f64 x 1/2)) (cbrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (/.f64 (cos.f64 (*.f64 x 1/2)) (sqrt.f64 (sin.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (sin.f64 (*.f64 x 1/2))) (neg.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (sqrt.f64 (cos.f64 (*.f64 x 1/2)))) (sqrt.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) 1) (cos.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (sin.f64 (*.f64 x 1/2)) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 2)) (cbrt.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1 (sin.f64 (*.f64 x 1/2))) (neg.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (sin.f64 (*.f64 x 1/2)) -1) (neg.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 (*.f64 x 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) (pow.f64 (cos.f64 (*.f64 x 1/2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) (pow.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 3) (pow.f64 (sin.f64 (*.f64 x 1/2)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 (*.f64 x 1/2))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 1 (cos.f64 (*.f64 x 1/2)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 1 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2)))) (cbrt.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -2)) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/2) (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 -1 (/.f64 1 (neg.f64 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 2) -1) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cos.f64 (*.f64 x 1/2))) -1) (pow.f64 (sqrt.f64 (cos.f64 (*.f64 x 1/2))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 x 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/2) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x 1/2)))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (cbrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 2) (*.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (sqrt.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) (*.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 x 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 x 1/2))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 (*.f64 x 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (*.f64 x 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 2) (cbrt.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 (*.f64 x 1/2))) (sqrt.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 1 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (cos.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 2) (cbrt.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (cos.f64 (*.f64 x 1/2))) (pow.f64 (cos.f64 (*.f64 x 1/2)) -1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (cos.f64 (*.f64 x 1/2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 x 1/2)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 (*.f64 x 1/2))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 x 1/2)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 (*.f64 x 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 (*.f64 x 1/2))))))))"]],"rules":[["egg-rr",21],["egg-rr",18],["egg-rr",20],["egg-rr",25]],"stop":[["node limit",1]],"time":55.260009765625,"type":"rewrite"},{"count":[[132,114]],"egraph":[[6,7955,488,0.046767332999999994],[5,6667,488,0.035035290999999996],[4,4342,488,0.020833874],[3,1177,488,0.011505208],[2,395,488,0.0039748330000000005],[1,160,490,0.00123975],[0,66,496,0.000359375]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","1","(+.f64 (*.f64 1/8 (pow.f64 x 2)) 1)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 61/46080 (pow.f64 x 6)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4)))))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","1","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 1/384 (pow.f64 x 4))))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/46080 (pow.f64 x 6)) (*.f64 1/384 (pow.f64 x 4)))))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/2 x (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/24 (pow.f64 x 3) (*.f64 1/2 x))","(*.f64 x (fma.f64 1/24 (*.f64 x x) 1/2))","(*.f64 x (fma.f64 x (*.f64 x 1/24) 1/2))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (*.f64 1/240 (pow.f64 x 5))))","(fma.f64 x (fma.f64 x (*.f64 x 1/24) 1/2) (*.f64 1/240 (pow.f64 x 5)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 1/24 (pow.f64 x 3) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (fma.f64 1/240 (pow.f64 x 5) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 1/24 (pow.f64 x 3) (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/2 x))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","1","(+.f64 (*.f64 1/8 (pow.f64 x 2)) 1)","(fma.f64 1/8 (*.f64 x x) 1)","(fma.f64 x (*.f64 x 1/8) 1)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (+.f64 1 (*.f64 5/384 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 5/384 (pow.f64 x 4) 1))","(fma.f64 x (*.f64 x 1/8) (fma.f64 5/384 (pow.f64 x 4) 1))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 61/46080 (pow.f64 x 6)) (+.f64 1 (*.f64 5/384 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 61/46080 (pow.f64 x 6) (+.f64 1 (*.f64 5/384 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 61/46080 (pow.f64 x 6) (fma.f64 5/384 (pow.f64 x 4) 1)))","(fma.f64 x (*.f64 x 1/8) (fma.f64 5/384 (pow.f64 x 4) (fma.f64 61/46080 (pow.f64 x 6) 1)))","(fma.f64 x (*.f64 x 1/8) (fma.f64 61/46080 (pow.f64 x 6) (fma.f64 5/384 (pow.f64 x 4) 1)))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x 5/384) 1/8) (fma.f64 61/46080 (pow.f64 x 6) 1))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(/.f64 1 (cos.f64 (*.f64 1/2 x)))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(fma.f64 -1/48 (pow.f64 x 3) (*.f64 1/2 x))","(fma.f64 (pow.f64 x 3) -1/48 (*.f64 1/2 x))","(fma.f64 1/2 x (*.f64 (pow.f64 x 3) -1/48))","(*.f64 x (fma.f64 (*.f64 x x) -1/48 1/2))","(*.f64 x (fma.f64 x (*.f64 x -1/48) 1/2))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840)))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x)))","(fma.f64 1/2 x (fma.f64 (pow.f64 x 3) -1/48 (*.f64 1/3840 (pow.f64 x 5))))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(fma.f64 -1/645120 (pow.f64 x 7) (fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840))))","(fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x))))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x))))","(fma.f64 x (fma.f64 (*.f64 x x) -1/48 1/2) (fma.f64 (pow.f64 x 7) -1/645120 (*.f64 1/3840 (pow.f64 x 5))))","(fma.f64 1/2 x (fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 3) -1/48 (*.f64 1/3840 (pow.f64 x 5)))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","1","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 1)","(fma.f64 -1/8 (*.f64 x x) 1)","(fma.f64 (*.f64 x x) -1/8 1)","(fma.f64 x (*.f64 x -1/8) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 1/384 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/8 (*.f64 x x) 1) (*.f64 (pow.f64 x 4) 1/384))","(fma.f64 (*.f64 x x) -1/8 (fma.f64 (pow.f64 x 4) 1/384 1))","(fma.f64 x (*.f64 x -1/8) (fma.f64 (pow.f64 x 4) 1/384 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/46080 (pow.f64 x 6)) (*.f64 1/384 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/8 (*.f64 x x) 1) (fma.f64 -1/46080 (pow.f64 x 6) (*.f64 (pow.f64 x 4) 1/384)))","(+.f64 (fma.f64 (*.f64 x x) -1/8 1) (fma.f64 (pow.f64 x 4) 1/384 (*.f64 (pow.f64 x 6) -1/46080)))","(fma.f64 x (*.f64 x -1/8) (fma.f64 (pow.f64 x 6) -1/46080 (fma.f64 (pow.f64 x 4) 1/384 1)))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))"]],"stop":[["node limit",1]],"time":71.20703125,"type":"simplify"},{"compiler":[[1629,1356]],"time":56.98095703125,"type":"eval"},{"alts":[["(/.f64 1 (/.f64 (cos.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))))","fresh",0.3310737793053261],["(*.f64 (expm1.f64 (log1p.f64 (sin.f64 (*.f64 x 1/2)))) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","fresh",0.29724506837909415],["(*.f64 (sin.f64 (*.f64 x 1/2)) (exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x 1/2))))))","fresh",18.399101269536885],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","next",0.19921875],["(*.f64 (sin.f64 (*.f64 x 1/2)) (-.f64 (+.f64 1 (/.f64 1 (cos.f64 (*.f64 x 1/2)))) 1))","fresh",0.34869008791597816],["(*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 2) -1) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -1)))","fresh",0.4581414551372826],["(log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))","fresh",28.230451622676416],["(expm1.f64 (log1p.f64 (tan.f64 (*.f64 x 1/2))))","fresh",7.980838818379093],["(-.f64 (+.f64 1 (tan.f64 (*.f64 x 1/2))) 1)","fresh",28.19381711855457],["(cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 3) (pow.f64 (sin.f64 (*.f64 x 1/2)) 3)))","fresh",17.700408004789736],["(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (log.f64 (exp.f64 (cos.f64 (*.f64 x 1/2))))))","fresh",0.4153076485431296]],"compiler":[[12,10],[14,12],[13,11],[10,8],[16,14],[23,20],[7,6],[7,6],[9,8],[17,15],[14,12],[12,10],[14,12],[13,11],[10,8],[16,14],[23,20],[7,6],[7,6],[9,8],[17,15],[14,12]],"count":[[122,11]],"kept":[{"done":[0,0],"fresh":[7,3],"new":[114,8],"picked":[1,0]}],"min-error":[0],"time":31.633056640625,"type":"prune"},{"compiler":[[23,17]],"locations":[["(cos.f64 (*.f64 1/2 x))",0.01171875,true],["(sin.f64 (*.f64 1/2 x))",0.03125,true],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))",0.1875,true]],"time":9.965087890625,"type":"localize"},{"count":[[3,12]],"series":[["(cos.f64 (*.f64 1/2 x))","x","-inf",0.1650390625],["(cos.f64 (*.f64 1/2 x))","x","inf",0.2021484375],["(cos.f64 (*.f64 1/2 x))","x","0",0.2021484375],["(sin.f64 (*.f64 1/2 x))","x","-inf",0.155029296875],["(sin.f64 (*.f64 1/2 x))","x","inf",0.2060546875],["(sin.f64 (*.f64 1/2 x))","x","0",0.16015625],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","x","-inf",0.242919921875],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","x","inf",0.236083984375],["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","x","0",0.262939453125]],"time":1.928955078125,"type":"series"},{"count":[[3,64]],"egraph":[[2,1778,18,0.018048625],[1,145,18,0.002466916],[0,7,18,0.000215916]],"inputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(sin.f64 (*.f64 1/2 x))","(cos.f64 (*.f64 1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (tan.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 1 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 2) (cbrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (*.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 1 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 (*.f64 1/2 x))) (sqrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 1 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) 1) (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (cbrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (cos.f64 (*.f64 1/2 x)))) (/.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (sqrt.f64 (cos.f64 (*.f64 1/2 x)))) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (sqrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 (*.f64 1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3) (pow.f64 (cos.f64 (*.f64 1/2 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 (*.f64 1/2 x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (sqrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 1/2 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (cos.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cos.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (cos.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2) (cbrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (cos.f64 (*.f64 1/2 x))) (sqrt.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cos.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (cos.f64 (*.f64 1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (cos.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (cos.f64 (*.f64 1/2 x))))))))"]],"rules":[["egg-rr",16],["egg-rr",16],["egg-rr",32]],"stop":[["node limit",1]],"time":40.972900390625,"type":"rewrite"},{"count":[[76,84]],"egraph":[[6,6551,162,0.035529041],[5,4806,162,0.023463790999999998],[4,3106,162,0.013124791],[3,918,162,0.00643375],[2,316,162,0.002312],[1,128,164,0.000885792],[0,51,166,0.000281167]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","1","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 1/384 (pow.f64 x 4))))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/46080 (pow.f64 x 6)) (*.f64 1/384 (pow.f64 x 4)))))"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/2 x (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/24 (pow.f64 x 3) (*.f64 1/2 x))","(*.f64 x (fma.f64 x (*.f64 x 1/24) 1/2))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (*.f64 1/240 (pow.f64 x 5))))","(fma.f64 x (fma.f64 x (*.f64 x 1/24) 1/2) (*.f64 1/240 (pow.f64 x 5)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 1/24 (pow.f64 x 3) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (fma.f64 1/240 (pow.f64 x 5) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 1/240 (pow.f64 x 5) (fma.f64 1/24 (pow.f64 x 3) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/2 x))))","(fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (fma.f64 1/2 x (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 x (fma.f64 x (*.f64 x 1/24) 1/2))))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(fma.f64 -1/48 (pow.f64 x 3) (*.f64 1/2 x))","(fma.f64 (pow.f64 x 3) -1/48 (*.f64 1/2 x))","(*.f64 x (fma.f64 x (*.f64 x -1/48) 1/2))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840)))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x)))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840)))","(fma.f64 x (fma.f64 x (*.f64 x -1/48) 1/2) (*.f64 (pow.f64 x 5) 1/3840))","(fma.f64 1/2 x (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 (pow.f64 x 3) -1/48)))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(fma.f64 -1/645120 (pow.f64 x 7) (fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840))))","(fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x))))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840))))","(fma.f64 x (fma.f64 x (*.f64 x -1/48) 1/2) (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 (pow.f64 x 7) -1/645120)))","(fma.f64 1/2 x (fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 (pow.f64 x 3) -1/48))))","1","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) 1)","(fma.f64 -1/8 (*.f64 x x) 1)","(fma.f64 x (*.f64 x -1/8) 1)","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (*.f64 1/384 (pow.f64 x 4))))","(fma.f64 -1/8 (*.f64 x x) (+.f64 1 (*.f64 1/384 (pow.f64 x 4))))","(fma.f64 -1/8 (*.f64 x x) (fma.f64 1/384 (pow.f64 x 4) 1))","(fma.f64 x (*.f64 x -1/8) (fma.f64 1/384 (pow.f64 x 4) 1))","(+.f64 (*.f64 -1/8 (pow.f64 x 2)) (+.f64 1 (+.f64 (*.f64 -1/46080 (pow.f64 x 6)) (*.f64 1/384 (pow.f64 x 4)))))","(+.f64 (fma.f64 -1/8 (*.f64 x x) 1) (fma.f64 -1/46080 (pow.f64 x 6) (*.f64 1/384 (pow.f64 x 4))))","(+.f64 (fma.f64 -1/8 (*.f64 x x) 1) (fma.f64 1/384 (pow.f64 x 4) (*.f64 -1/46080 (pow.f64 x 6))))","(fma.f64 x (*.f64 x -1/8) (fma.f64 1/384 (pow.f64 x 4) (fma.f64 -1/46080 (pow.f64 x 6) 1)))","(fma.f64 (*.f64 x x) (fma.f64 x (*.f64 x 1/384) -1/8) (fma.f64 -1/46080 (pow.f64 x 6) 1))"]],"stop":[["node limit",1]],"time":50.005126953125,"type":"simplify"},{"compiler":[[1096,896]],"time":17.903076171875,"type":"eval"},{"alts":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (-.f64 (+.f64 1 (cos.f64 (*.f64 1/2 x))) 1))","fresh",0.40467356595265164],["(*.f64 (sin.f64 (*.f64 x 1/2)) (exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x 1/2))))))","fresh",18.399101269536885],["(/.f64 (sin.f64 (*.f64 1/2 x)) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 1/2 x)))))","fresh",0.24351503907376806],["(*.f64 (sin.f64 (*.f64 x 1/2)) (-.f64 (+.f64 1 (/.f64 1 (cos.f64 (*.f64 x 1/2)))) 1))","fresh",0.34869008791597816],["(log1p.f64 (expm1.f64 (tan.f64 (*.f64 1/2 x))))","fresh",0.6989252083313511],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))","fresh",0.4064027344426086],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))","fresh",0.7274553712007971],["(/.f64 (sin.f64 (*.f64 1/2 x)) (log.f64 (exp.f64 (cos.f64 (*.f64 1/2 x)))))","fresh",0.3884816748352346],["(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))","next",0.21941376953688402],["(expm1.f64 (log1p.f64 (tan.f64 (*.f64 x 1/2))))","fresh",7.980838818379093],["(log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))","fresh",28.230451622676416]],"compiler":[[14,12],[13,11],[12,10],[16,14],[7,6],[21,18],[21,18],[12,10],[12,10],[7,6],[7,6],[14,12],[13,11],[12,10],[16,14],[7,6],[21,18],[21,18],[12,10],[12,10],[7,6],[7,6]],"count":[[95,11]],"kept":[{"done":[0,0],"fresh":[10,4],"new":[84,7],"picked":[1,0]}],"min-error":[0],"time":24.27490234375,"type":"prune"},{"compiler":[[36,28]],"locations":[["(sin.f64 (*.f64 1/2 x))",0.03125,false],["(expm1.f64 (sin.f64 (*.f64 1/2 x)))",0.12109375,true],["(log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))))",0.15072250976844204,true],["(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))",0.1875,true]],"time":16.10791015625,"type":"localize"},{"count":[[3,36]],"series":[["(expm1.f64 (sin.f64 (*.f64 1/2 x)))","x","-inf",0.218994140625],["(expm1.f64 (sin.f64 (*.f64 1/2 x)))","x","inf",0.471923828125],["(expm1.f64 (sin.f64 (*.f64 1/2 x)))","x","0",0.2919921875],["(log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))))","x","-inf",0.14599609375],["(log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))))","x","inf",0.16796875],["(log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))))","x","0",0.16796875],["(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))","x","-inf",0.195068359375],["(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))","x","inf",0.194091796875],["(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))","x","0",0.27392578125]],"time":2.343994140625,"type":"series"},{"count":[[3,66]],"egraph":[[2,1986,20,0.020772291],[1,166,20,0.002923124],[0,9,28,0.000265041]],"inputs":[["(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))","(log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))))","(expm1.f64 (sin.f64 (*.f64 1/2 x)))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (tan.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) (/.f64 1 (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (tan.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (*.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 1 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) (pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 2) (cbrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (*.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 1 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (tan.f64 (*.f64 1/2 x))) (sqrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (sin.f64 (*.f64 1/2 x))) (/.f64 1 (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cos.f64 (*.f64 1/2 x))) (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) 1) (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (cbrt.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 (cos.f64 (*.f64 1/2 x)))) (/.f64 (sin.f64 (*.f64 1/2 x)) (sqrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (sqrt.f64 (cos.f64 (*.f64 1/2 x)))) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (sqrt.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (tan.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (tan.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (tan.f64 (*.f64 1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 1 (tan.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (sin.f64 (*.f64 1/2 x)) (neg.f64 (cos.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (tan.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3) (pow.f64 (cos.f64 (*.f64 1/2 x)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (tan.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x tan.f64 (*.f64 1/2 x))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (sin.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sin.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (sin.f64 (*.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) (cbrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) (sqrt.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sin.f64 (*.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (sin.f64 (*.f64 1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (sin.f64 (*.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x sin.f64 (*.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (sin.f64 (*.f64 1/2 x))))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (expm1.f64 (sin.f64 (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) 2) (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 3) 1) (+.f64 (*.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) (exp.f64 (sin.f64 (*.f64 1/2 x)))) (+.f64 1 (*.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (*.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) (exp.f64 (sin.f64 (*.f64 1/2 x)))) 1) (+.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))))))))"]],"rules":[["egg-rr",18],["egg-rr",16],["egg-rr",32]],"stop":[["node limit",1]],"time":45.531005859375,"type":"rewrite"},{"count":[[102,87]],"egraph":[[15,7841,389,0.106230832],[14,7518,389,0.09577095699999999],[13,7194,389,0.084766416],[12,6480,389,0.072879249],[11,5918,389,0.060750123999999996],[10,5426,389,0.050248457999999996],[9,3989,389,0.040908999999999994],[8,3711,389,0.032181207999999996],[7,3497,389,0.026130333],[6,3294,389,0.020575875],[5,3074,389,0.015407041],[4,2258,389,0.010204958],[3,883,389,0.005571792],[2,316,395,0.002287375],[1,133,398,0.000904083],[0,53,398,0.000279625]],"inputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 1/2 x))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (*.f64 -1/128 (pow.f64 x 4))))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/480 (pow.f64 x 5)) (+.f64 (*.f64 1/2 x) (*.f64 -1/128 (pow.f64 x 4)))))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)"]],"method":["egg-herbie"],"outputs":[["(*.f64 1/2 x)","(+.f64 (*.f64 1/2 x) (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/2 x (*.f64 1/24 (pow.f64 x 3)))","(fma.f64 1/24 (pow.f64 x 3) (*.f64 1/2 x))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (*.f64 1/24 (pow.f64 x 3))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (*.f64 1/240 (pow.f64 x 5))))","(fma.f64 x (fma.f64 x (*.f64 x 1/24) 1/2) (*.f64 1/240 (pow.f64 x 5)))","(+.f64 (*.f64 1/2 x) (+.f64 (*.f64 1/240 (pow.f64 x 5)) (+.f64 (*.f64 17/40320 (pow.f64 x 7)) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 17/40320 (pow.f64 x 7) (*.f64 1/24 (pow.f64 x 3)))))","(fma.f64 1/2 x (fma.f64 1/240 (pow.f64 x 5) (fma.f64 1/24 (pow.f64 x 3) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 1/2 x (fma.f64 1/24 (pow.f64 x 3) (fma.f64 1/240 (pow.f64 x 5) (*.f64 17/40320 (pow.f64 x 7)))))","(fma.f64 x (fma.f64 x (*.f64 x 1/24) 1/2) (fma.f64 1/240 (pow.f64 x 5) (*.f64 17/40320 (pow.f64 x 7))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(*.f64 1/2 x)","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (*.f64 1/2 x))","(fma.f64 -1/48 (pow.f64 x 3) (*.f64 1/2 x))","(fma.f64 (pow.f64 x 3) -1/48 (*.f64 1/2 x))","(fma.f64 1/2 x (*.f64 (pow.f64 x 3) -1/48))","(*.f64 x (fma.f64 -1/48 (*.f64 x x) 1/2))","(*.f64 x (fma.f64 x (*.f64 x -1/48) 1/2))","(+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5))))","(fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840)))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x)))","(fma.f64 1/2 x (fma.f64 (pow.f64 x 3) -1/48 (*.f64 (pow.f64 x 5) 1/3840)))","(+.f64 (*.f64 -1/645120 (pow.f64 x 7)) (+.f64 (*.f64 -1/48 (pow.f64 x 3)) (+.f64 (*.f64 1/2 x) (*.f64 1/3840 (pow.f64 x 5)))))","(fma.f64 -1/645120 (pow.f64 x 7) (fma.f64 -1/48 (pow.f64 x 3) (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840))))","(fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 1/2 x))))","(fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 7) -1/645120 (fma.f64 1/2 x (*.f64 (pow.f64 x 5) 1/3840))))","(fma.f64 x (fma.f64 -1/48 (*.f64 x x) 1/2) (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 (pow.f64 x 7) -1/645120)))","(fma.f64 1/2 x (fma.f64 (pow.f64 x 3) -1/48 (fma.f64 (pow.f64 x 5) 1/3840 (*.f64 (pow.f64 x 7) -1/645120))))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(sin.f64 (*.f64 1/2 x))","(*.f64 1/2 x)","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (*.f64 1/2 x))","(fma.f64 1/8 (*.f64 x x) (*.f64 1/2 x))","(fma.f64 1/2 x (*.f64 1/8 (*.f64 x x)))","(*.f64 x (+.f64 (*.f64 x 1/8) 1/2))","(*.f64 x (fma.f64 x 1/8 1/2))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 1/2 x) (*.f64 -1/128 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 1/2 x (*.f64 -1/128 (pow.f64 x 4))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 -1/128 (pow.f64 x 4) (*.f64 1/2 x)))","(fma.f64 -1/128 (pow.f64 x 4) (*.f64 x (+.f64 (*.f64 x 1/8) 1/2)))","(fma.f64 x (fma.f64 x 1/8 1/2) (*.f64 -1/128 (pow.f64 x 4)))","(*.f64 x (fma.f64 x 1/8 (fma.f64 (pow.f64 x 3) -1/128 1/2)))","(+.f64 (*.f64 1/8 (pow.f64 x 2)) (+.f64 (*.f64 -1/480 (pow.f64 x 5)) (+.f64 (*.f64 1/2 x) (*.f64 -1/128 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 -1/480 (pow.f64 x 5) (fma.f64 1/2 x (*.f64 -1/128 (pow.f64 x 4)))))","(fma.f64 1/8 (*.f64 x x) (fma.f64 (pow.f64 x 5) -1/480 (fma.f64 -1/128 (pow.f64 x 4) (*.f64 1/2 x))))","(fma.f64 (pow.f64 x 5) -1/480 (fma.f64 -1/128 (pow.f64 x 4) (*.f64 x (+.f64 (*.f64 x 1/8) 1/2))))","(fma.f64 -1/128 (pow.f64 x 4) (fma.f64 x (fma.f64 x 1/8 1/2) (*.f64 (pow.f64 x 5) -1/480)))","(fma.f64 x (fma.f64 x 1/8 (fma.f64 (pow.f64 x 3) -1/128 1/2)) (*.f64 (pow.f64 x 5) -1/480))","(fma.f64 (pow.f64 x 5) -1/480 (*.f64 x (fma.f64 x 1/8 (fma.f64 (pow.f64 x 3) -1/128 1/2))))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))","(-.f64 (exp.f64 (sin.f64 (*.f64 1/2 x))) 1)","(expm1.f64 (sin.f64 (*.f64 1/2 x)))"]],"stop":[["node limit",1]],"time":131.009033203125,"type":"simplify"},{"compiler":[[1578,1305]],"time":25.426025390625,"type":"eval"},{"alts":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 1/2 x)))))","fresh",0.24351503907376806],["(*.f64 (sin.f64 (*.f64 x 1/2)) (-.f64 (+.f64 1 (/.f64 1 (cos.f64 (*.f64 x 1/2)))) 1))","fresh",0.34869008791597816],["(log1p.f64 (expm1.f64 (tan.f64 (*.f64 1/2 x))))","fresh",0.6989252083313511],["(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))","fresh",0.4064027344426086],["(*.f64 (sin.f64 (*.f64 x 1/2)) (exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x 1/2))))))","fresh",18.399101269536885],["(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))","done",0.21941376953688402],["(/.f64 (sin.f64 (*.f64 1/2 x)) (log.f64 (exp.f64 (cos.f64 (*.f64 1/2 x)))))","fresh",0.3884816748352346],["(expm1.f64 (log1p.f64 (tan.f64 (*.f64 x 1/2))))","fresh",7.980838818379093],["(/.f64 (log1p.f64 (log1p.f64 (expm1.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))))) (cos.f64 (*.f64 1/2 x)))","fresh",0.21941376953688402],["(*.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))","fresh",0.7274553712007971],["(log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))","fresh",28.230451622676416]],"compiler":[[12,10],[16,14],[7,6],[21,18],[13,11],[12,10],[12,10],[7,6],[14,12],[21,18],[7,6]],"count":[[120,11]],"kept":[{"done":[0,0],"fresh":[10,6],"new":[109,4],"picked":[1,1]}],"min-error":[0],"time":24.339111328125,"type":"prune"},{"accuracy":[0.19921875],"baseline":[0.19921875],"branch":[["x",0.19921875,1],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))",0.19921875,1]],"compiler":[[2,1],[8,6],[330,277]],"count":[[28,1]],"inputs":[["(log1p.f64 (expm1.f64 (tan.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))","(/.f64 (log1p.f64 (log1p.f64 (expm1.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))))) (cos.f64 (*.f64 1/2 x)))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (-.f64 (+.f64 1 (cos.f64 (*.f64 1/2 x))) 1))","(/.f64 (sin.f64 (*.f64 1/2 x)) (expm1.f64 (log1p.f64 (cos.f64 (*.f64 1/2 x)))))","(log1p.f64 (expm1.f64 (tan.f64 (*.f64 1/2 x))))","(*.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 1/2 x))) 2)) (/.f64 (sin.f64 (*.f64 1/2 x)) (cbrt.f64 (cos.f64 (*.f64 1/2 x)))))","(*.f64 (/.f64 (pow.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) 2) 1) (/.f64 (cbrt.f64 (sin.f64 (*.f64 1/2 x))) (cos.f64 (*.f64 1/2 x))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (log.f64 (exp.f64 (cos.f64 (*.f64 1/2 x)))))","(/.f64 (log1p.f64 (expm1.f64 (sin.f64 (*.f64 1/2 x)))) (cos.f64 (*.f64 1/2 x)))","(*.f64 (expm1.f64 (log1p.f64 (sin.f64 (*.f64 x 1/2)))) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","(*.f64 (sin.f64 (*.f64 x 1/2)) (exp.f64 (neg.f64 (log.f64 (cos.f64 (*.f64 x 1/2))))))","(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))","(*.f64 (sin.f64 (*.f64 x 1/2)) (-.f64 (+.f64 1 (/.f64 1 (cos.f64 (*.f64 x 1/2)))) 1))","(*.f64 (sin.f64 (*.f64 x 1/2)) (*.f64 (pow.f64 (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) 2) -1) (pow.f64 (cbrt.f64 (cos.f64 (*.f64 x 1/2))) -1)))","(log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))","(cbrt.f64 (*.f64 (pow.f64 (/.f64 1 (cos.f64 (*.f64 x 1/2))) 3) (pow.f64 (sin.f64 (*.f64 x 1/2)) 3)))","(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (log.f64 (exp.f64 (cos.f64 (*.f64 x 1/2))))))","(expm1.f64 (log1p.f64 (tan.f64 (*.f64 x 1/2))))","(/.f64 1 (/.f64 (cos.f64 (*.f64 x 1/2)) (sin.f64 (*.f64 x 1/2))))","(*.f64 (sin.f64 (*.f64 x 1/2)) (/.f64 1 (cos.f64 (*.f64 x 1/2))))","(*.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) (pow.f64 (cbrt.f64 (tan.f64 (*.f64 x 1/2))) 2))","(log1p.f64 (expm1.f64 (tan.f64 (*.f64 x 1/2))))","(-.f64 (+.f64 1 (tan.f64 (*.f64 x 1/2))) 1)","(log.f64 (exp.f64 (tan.f64 (*.f64 x 1/2))))","(tan.f64 (/.f64 x 2))","(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))"]],"link":["."],"name":["tanhf (example 3.4)"],"oracle":[49.91647878021533],"outputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"time":22.02978515625,"times":[["x",9.052001953125],["(/.f64 (-.f64 1 (cos.f64 x)) (sin.f64 x))",6.08203125]],"type":"regimes"},{"compiler":[[10,8]],"egraph":[[1,8,14,3.2625e-5],[0,7,14,2.075e-5]],"inputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (sin.f64 (*.f64 1/2 x)) (cos.f64 (*.f64 1/2 x)))"]],"stop":[["fuel",1],["saturated",1]],"time":8.463134765625,"type":"simplify"},{"time":0.01708984375,"type":"soundness"},{"compiler":[[10,8]],"remove-preprocessing":[[]],"time":8.876953125,"type":"end"}]
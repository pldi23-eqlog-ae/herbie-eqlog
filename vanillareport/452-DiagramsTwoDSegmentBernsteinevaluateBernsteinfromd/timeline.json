[{"compiler":[[13,9]],"method":["search"],"sampling":[[12,0.2808382138282468,0.6572394309730498,0.06192235519870337],[11,0.2496339678473305,0.7059960653182316,0.044369966834437946],[10,0.19502653738072695,0.7684045572800642,0.03656890533920887],[9,0.031204245980916312,0.9517295024179475,0.017066251601136173],[8,0.031204245980916312,0.9673316254084057,0.0014641286106780171],[7,0.0,0.998535871389322,0.0014641286106780171],[6,0.0,0.998535871389322,0.0014641286106780171],[5,0.0,0.998535871389322,0.0014641286106780171],[4,0.0,0.998535871389322,0.0014641286106780171],[3,0.0,0.998535871389322,0.0014641286106780171],[2,0.0,0.998535871389322,0.0014641286106780171],[1,0.0,0.998535871389322,0.0014641286106780171],[0,0.0,0.998535871389322,0.0014641286106780171]],"time":120.10400390625,"type":"analyze"},{"outcomes":[["body",256,"invalid",65.8642578125,1548],["body",256,"valid",351.11474609375,8256]],"time":426.205078125,"type":"sample"},{"compiler":[[12,8]],"egraph":[[0,3,3,3.042e-6],[5,7002,44,0.035774126],[4,2247,44,0.023122543000000002],[3,718,44,0.006625251],[2,183,44,0.001574876],[1,75,44,0.000429917],[0,21,52,0.000131458]],"inputs":[["0","1","2"],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","(/.f64 (*.f64 y (+.f64 (-.f64 x z) 1)) z)","(/.f64 (*.f64 z (+.f64 (-.f64 y x) 1)) x)","(/.f64 (*.f64 x (+.f64 (-.f64 z y) 1)) y)"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","2"],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","(/.f64 x (/.f64 z (+.f64 (-.f64 y z) 1)))","(/.f64 (fma.f64 x (-.f64 y z) x) z)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(/.f64 (*.f64 y (+.f64 (-.f64 x z) 1)) z)","(/.f64 (*.f64 y (+.f64 1 (-.f64 x z))) z)","(/.f64 (fma.f64 y (-.f64 x z) y) z)","(-.f64 (/.f64 (fma.f64 x y y) z) y)","(/.f64 (*.f64 z (+.f64 (-.f64 y x) 1)) x)","(/.f64 z (/.f64 x (+.f64 1 (-.f64 y x))))","(/.f64 (fma.f64 z (-.f64 y x) z) x)","(-.f64 (/.f64 (fma.f64 y z z) x) z)","(/.f64 (*.f64 x (+.f64 (-.f64 z y) 1)) y)","(/.f64 x (/.f64 y (+.f64 1 (-.f64 z y))))","(/.f64 (fma.f64 x (-.f64 z y) x) y)","(-.f64 (/.f64 (fma.f64 x z x) y) x)"]],"stop":[["saturated",1],["node limit",1]],"symmetry":[[]],"time":63.5419921875,"type":"preprocess"},{"count":[[1,2]],"egraph":[[7,6368,11,0.037302876],[6,2803,11,0.022357334],[5,1043,11,0.009625209],[4,447,11,0.0032539170000000003],[3,175,11,0.001238209],[2,56,11,0.000413626],[1,25,11,0.000162876],[0,9,13,5.9542e-5]],"inputs":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","(/.f64 x (/.f64 z (+.f64 (-.f64 y z) 1)))","(/.f64 (fma.f64 x (-.f64 y z) x) z)","(-.f64 (/.f64 (fma.f64 x y x) z) x)"]],"stop":[["node limit",1]],"time":50.256103515625,"type":"simplify"},{"compiler":[[20,11]],"time":0.427978515625,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","fresh",9.16015625],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","next",3.10546875]],"compiler":[[12,8],[11,6],[12,8],[11,6]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[3.09765625],"time":1.43896484375,"type":"prune"},{"compiler":[[24,6]],"locations":[["(-.f64 (/.f64 (fma.f64 x y x) z) x)",0.015625,true],["(/.f64 (fma.f64 x y x) z)",2.9898287354868023,true]],"time":4.85498046875,"type":"localize"},{"count":[[2,72]],"series":[["(-.f64 (/.f64 (fma.f64 x y x) z) x)","z","-inf",0.1689453125],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","z","inf",0.18603515625],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","z","0",0.200927734375],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","y","-inf",0.60400390625],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","y","inf",0.172119140625],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","y","0",0.197998046875],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","x","-inf",0.203125],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","x","inf",0.172119140625],["(-.f64 (/.f64 (fma.f64 x y x) z) x)","x","0",0.20703125],["(/.f64 (fma.f64 x y x) z)","z","-inf",0.317138671875],["(/.f64 (fma.f64 x y x) z)","z","inf",0.64599609375],["(/.f64 (fma.f64 x y x) z)","z","0",0.43212890625],["(/.f64 (fma.f64 x y x) z)","y","-inf",0.41015625],["(/.f64 (fma.f64 x y x) z)","y","inf",0.35107421875],["(/.f64 (fma.f64 x y x) z)","y","0",0.35498046875],["(/.f64 (fma.f64 x y x) z)","x","-inf",0.7890625],["(/.f64 (fma.f64 x y x) z)","x","inf",0.580810546875],["(/.f64 (fma.f64 x y x) z)","x","0",0.72314453125]],"time":6.946044921875,"type":"series"},{"count":[[2,66]],"egraph":[[2,2272,19,0.022718333],[1,156,19,0.002946541],[0,7,19,0.000170291]],"inputs":[["(/.f64 (fma.f64 x y x) z)","(-.f64 (/.f64 (fma.f64 x y x) z) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (+.f64 1 (/.f64 (fma.f64 x y x) z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 x y x) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (fma.f64 x y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (fma.f64 x y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (fma.f64 x y x) z)) (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x y x) z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x y x) z)) 2) (cbrt.f64 (/.f64 (fma.f64 x y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 x y x)) 2) (*.f64 (cbrt.f64 (fma.f64 x y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (fma.f64 x y x) z)) (sqrt.f64 (/.f64 (fma.f64 x y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 x y x)) (*.f64 (sqrt.f64 (fma.f64 x y x)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (fma.f64 x y x)) (/.f64 1 (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (fma.f64 x y x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x y x)) 2) 1) (/.f64 (cbrt.f64 (fma.f64 x y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 x y x)) 1) (/.f64 (sqrt.f64 (fma.f64 x y x)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 (fma.f64 x y x) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x y x)) 2) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 (fma.f64 x y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 x y x)) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 (fma.f64 x y x)) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (sqrt.f64 z)) (/.f64 (fma.f64 x y x) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (fma.f64 x y x)) 2) (sqrt.f64 z)) (/.f64 (cbrt.f64 (fma.f64 x y x)) (sqrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 x y x) z) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (fma.f64 x y x) z)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (fma.f64 x y x) z)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (fma.f64 x y x)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (fma.f64 x y x) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (fma.f64 x y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (fma.f64 x y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (fma.f64 x y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (fma.f64 x y x) z)))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x y x) z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 (fma.f64 x y x) z) (*.f64 (neg.f64 x) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) (fma.f64 (neg.f64 x) 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) (fma.f64 (neg.f64 (cbrt.f64 x)) (pow.f64 (cbrt.f64 x) 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) (fma.f64 (neg.f64 (sqrt.f64 x)) (sqrt.f64 x) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (neg.f64 x) (/.f64 (fma.f64 x y x) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (-.f64 (/.f64 (fma.f64 x y x) z) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)) (pow.f64 (cbrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)) 2) (cbrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)) (sqrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 3) (pow.f64 x 3)) (/.f64 1 (+.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x (+.f64 x (/.f64 (fma.f64 x y x) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x x)) (/.f64 1 (+.f64 x (/.f64 (fma.f64 x y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (sqrt.f64 (/.f64 (fma.f64 x y x) z)) (sqrt.f64 x)) (-.f64 (sqrt.f64 (/.f64 (fma.f64 x y x) z)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x (+.f64 x (/.f64 (fma.f64 x y x) z)))) (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 3) (pow.f64 x 3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 x (/.f64 (fma.f64 x y x) z)) (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 3) (pow.f64 x 3)) (+.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x (+.f64 x (/.f64 (fma.f64 x y x) z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x x)) (+.f64 x (/.f64 (fma.f64 x y x) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 3) (pow.f64 x 3))) (neg.f64 (+.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x (+.f64 x (/.f64 (fma.f64 x y x) z))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 x x))) (neg.f64 (+.f64 x (/.f64 (fma.f64 x y x) z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 3) (pow.f64 (neg.f64 x) 3)) (+.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (-.f64 (*.f64 (neg.f64 x) (neg.f64 x)) (*.f64 (/.f64 (fma.f64 x y x) z) (neg.f64 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 (fma.f64 x y x) z) 2) (*.f64 (neg.f64 x) (neg.f64 x))) (-.f64 (/.f64 (fma.f64 x y x) z) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (-.f64 (/.f64 (fma.f64 x y x) z) x)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 x y x) (/.f64 1 z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 (fma.f64 x y x) z) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x y x) z)) 2) (cbrt.f64 (/.f64 (fma.f64 x y x) z)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 (fma.f64 x y x) z)) (sqrt.f64 (/.f64 (fma.f64 x y x) z)) (neg.f64 x))))))"]],"rules":[["egg-rr",36],["egg-rr",30]],"stop":[["node limit",1]],"time":47.81689453125,"type":"rewrite"},{"count":[[138,82]],"egraph":[[8,2865,647,0.045317249999999996],[7,2865,647,0.037960416],[6,2717,647,0.031390375],[5,2174,647,0.022511416],[4,1239,647,0.012648999999999999],[3,595,647,0.004180333],[2,207,737,0.001631875],[1,89,797,0.000646583],[0,35,797,0.000259875]],"inputs":[["(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(/.f64 x z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(-.f64 (/.f64 x z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(/.f64 (*.f64 y x) z)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(/.f64 (*.f64 y x) z)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(/.f64 (+.f64 (*.f64 y x) x) z)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(/.f64 (fma.f64 y x x) z)","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(/.f64 (fma.f64 y x x) z)","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(/.f64 (fma.f64 y x x) z)","(*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z))","(/.f64 (fma.f64 y x x) z)","(/.f64 x z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z))","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 (*.f64 (-.f64 (+.f64 (*.f64 -1 (/.f64 y z)) 1) (/.f64 1 z)) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(-.f64 (/.f64 x z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(/.f64 (*.f64 y x) z)","(/.f64 y (/.f64 z x))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(-.f64 (+.f64 (/.f64 (*.f64 y x) z) (/.f64 x z)) x)","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(/.f64 (+.f64 (*.f64 y x) x) z)","(/.f64 (fma.f64 y x x) z)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (+.f64 (*.f64 -1 x) (/.f64 x z)))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z))))","(fma.f64 (/.f64 y z) x (-.f64 (/.f64 x z) x))","(-.f64 (/.f64 (fma.f64 y x x) z) x)"]],"stop":[["saturated",1]],"time":71.6181640625,"type":"simplify"},{"compiler":[[1178,347]],"time":9.552001953125,"type":"eval"},{"alts":[["(-.f64 (pow.f64 (/.f64 z (fma.f64 x y x)) -1) x)","fresh",3.2155075195368843],["(-.f64 (*.f64 y (/.f64 x z)) x)","fresh",16.249383467673333],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","fresh",9.16015625],["(-.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x y x) z)) 3) x)","fresh",3.4066964356003995],["(-.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 (fma.f64 x y x) (cbrt.f64 z))) x)","fresh",3.465660253979493],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","next",2.8984375]],"compiler":[[13,8],[10,6],[12,8],[14,9],[19,12],[14,10],[13,8],[10,6],[12,8],[14,9],[19,12],[14,10]],"count":[[84,6]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[82,5],"picked":[1,0]}],"min-error":[0],"time":18.182861328125,"type":"prune"},{"compiler":[[40,21]],"locations":[["(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)",0.00390625,true],["(+.f64 (/.f64 1 z) (/.f64 y z))",0.0078125,true],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)",2.7231072425437906,true]],"time":8.589111328125,"type":"localize"},{"count":[[3,48]],"series":[["(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","y","-inf",0.163818359375],["(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","y","inf",0.14892578125],["(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","y","0",0.155029296875],["(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","z","-inf",0.1669921875],["(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","z","inf",0.14794921875],["(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)","z","0",0.14697265625],["(+.f64 (/.f64 1 z) (/.f64 y z))","y","-inf",0.176025390625],["(+.f64 (/.f64 1 z) (/.f64 y z))","y","inf",0.155029296875],["(+.f64 (/.f64 1 z) (/.f64 y z))","y","0",0.176025390625],["(+.f64 (/.f64 1 z) (/.f64 y z))","z","-inf",0.27587890625],["(+.f64 (/.f64 1 z) (/.f64 y z))","z","inf",0.212890625],["(+.f64 (/.f64 1 z) (/.f64 y z))","z","0",0.26611328125],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","x","-inf",0.345947265625],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","x","inf",1.139892578125],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","x","0",0.697998046875],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","y","-inf",0.27294921875],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","y","inf",0.445068359375],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","y","0",0.488037109375],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","z","-inf",0.445068359375],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","z","inf",0.364990234375],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","z","0",0.52001953125]],"time":7.1669921875,"type":"series"},{"count":[[3,216]],"egraph":[[2,3424,35,0.028740751000000002],[1,226,39,0.004541459],[0,10,39,0.000275792]],"inputs":[["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(+.f64 (/.f64 1 z) (/.f64 y z))","(-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (/.f64 1 z) x) (*.f64 (+.f64 (/.f64 y z) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) x) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (/.f64 1 z)) (*.f64 x (+.f64 (/.f64 y z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (+.f64 (/.f64 1 z) (/.f64 y z))) (*.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (/.f64 1 z) (+.f64 y 1) -1))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))) x) (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (expm1.f64 (*.f64 2 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))) x) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))) (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (expm1.f64 (*.f64 2 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) x (*.f64 (+.f64 (/.f64 y z) -1) x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) x (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (/.f64 1 z) (*.f64 x (+.f64 (/.f64 y z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (+.f64 (/.f64 1 z) (/.f64 y z)) (*.f64 x -1))))))","((#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (pow.f64 z -2) (/.f64 (-.f64 1 y) z)) (/.f64 (pow.f64 (/.f64 y z) 2) (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1 z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (+.f64 1 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 z) (+.f64 y 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 2) (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 2) (*.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) (/.f64 (sqrt.f64 (fma.f64 z y z)) z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) (*.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 z y z) (pow.f64 z -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3)) (/.f64 1 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (/.f64 1 z)) (pow.f64 z -2))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (pow.f64 z -2) (pow.f64 (/.f64 y z) 2)) (/.f64 1 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 y 1) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 z z) (fma.f64 z y z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (/.f64 1 z)) (pow.f64 z -2)) (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (-.f64 1 y) z) (-.f64 (pow.f64 z -2) (pow.f64 (/.f64 y z) 2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 z y z) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3)) (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (/.f64 1 z)) (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3)) (+.f64 (pow.f64 (/.f64 y z) 2) (-.f64 (pow.f64 z -2) (/.f64 y (*.f64 z z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 z -2) (pow.f64 (/.f64 y z) 2)) (/.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 z y z)) (neg.f64 (*.f64 z z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3))) (neg.f64 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (/.f64 1 z)) (pow.f64 z -2))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (pow.f64 z -2) (pow.f64 (/.f64 y z) 2))) (neg.f64 (/.f64 (-.f64 1 y) z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (/.f64 z y) z) (*.f64 z (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (/.f64 z y) (*.f64 (neg.f64 z) 1)) (*.f64 (neg.f64 z) (/.f64 z y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 z (*.f64 (neg.f64 z) y)) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 z (*.f64 z (neg.f64 y))) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 (neg.f64 z) (*.f64 (neg.f64 z) (neg.f64 y))) (pow.f64 (neg.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 z (*.f64 (/.f64 z y) 1)) (*.f64 (/.f64 z y) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 y) z (*.f64 (neg.f64 z) 1)) (*.f64 (neg.f64 z) z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 z (*.f64 (/.f64 z y) -1)) (*.f64 (/.f64 z y) (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y (neg.f64 z) (*.f64 z -1)) (*.f64 z (neg.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 (neg.f64 y) (neg.f64 z) (*.f64 (neg.f64 z) -1)) (pow.f64 (neg.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (/.f64 y z) 2) (pow.f64 z -2)) (-.f64 (/.f64 y z) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 z y z) z) z)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (fma.f64 z y z) 1) (*.f64 z z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3)) 1) (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (/.f64 1 z)) (pow.f64 z -2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (-.f64 (pow.f64 z -2) (pow.f64 (/.f64 y z) 2)) 1) (/.f64 (-.f64 1 y) z))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 z z) (fma.f64 z y z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (/.f64 1 z)) (pow.f64 z -2)) (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (-.f64 1 y) z) (-.f64 (pow.f64 z -2) (pow.f64 (/.f64 y z) 2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (/.f64 1 z)) (+.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 1 z) (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 z))) (exp.f64 (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1 z)) (+.f64 1 (expm1.f64 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 z))) (+.f64 1 (expm1.f64 (/.f64 y z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 y z))) (exp.f64 (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 y z)) (+.f64 1 (expm1.f64 (/.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 y z))) (+.f64 1 (expm1.f64 (/.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 1 z) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 1 z) (/.f64 y z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 z) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) 1 (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (/.f64 1 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (cbrt.f64 (/.f64 y z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 z -2)) (/.f64 1 (cbrt.f64 z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (pow.f64 z -1/2) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (/.f64 y (sqrt.f64 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1 (neg.f64 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)) 2) (cbrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)) (sqrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 1 (cbrt.f64 z)) (/.f64 y z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 y z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (/.f64 1 (cbrt.f64 z)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 z -1/2)) (pow.f64 z -1/2) (/.f64 1 z))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 z) (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 z) (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 y z) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 -1 (+.f64 (/.f64 1 z) (/.f64 y z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (+.f64 (/.f64 y z) -1) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)) (cbrt.f64 (pow.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 2)) (cbrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)) (sqrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))) (/.f64 1 (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (expm1.f64 (*.f64 2 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))) (/.f64 1 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) 1) (-.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)) (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1) (expm1.f64 (*.f64 2 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))) (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))) (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (-.f64 1 (*.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (expm1.f64 (*.f64 2 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))) (neg.f64 (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (expm1.f64 (*.f64 2 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))) (neg.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 z -3) (pow.f64 (+.f64 (/.f64 y z) -1) 3)) (+.f64 (pow.f64 z -2) (-.f64 (pow.f64 (+.f64 (/.f64 y z) -1) 2) (*.f64 (/.f64 1 z) (+.f64 (/.f64 y z) -1)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 z -2) (pow.f64 (+.f64 (/.f64 y z) -1) 2)) (-.f64 (/.f64 1 z) (+.f64 (/.f64 y z) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 (pow.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 2) (fma.f64 (/.f64 1 z) (+.f64 y 1) 1)) (expm1.f64 (*.f64 3 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) 1) (expm1.f64 (*.f64 2 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y))))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 z))) (exp.f64 (+.f64 (/.f64 y z) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 (/.f64 y z) -1)) (exp.f64 (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (+.f64 (/.f64 y z) -1)) (+.f64 1 (expm1.f64 (/.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (*.f64 (+.f64 (neg.f64 (log.f64 z)) (log1p.f64 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (/.f64 1 z) (+.f64 y 1) -1)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 z) (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1 z) (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 y z) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 (/.f64 1 z) (/.f64 y z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (+.f64 (/.f64 y z) -1) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) 1 (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) 1 (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) y (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (+.f64 1 y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 z) (+.f64 y 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 y (/.f64 1 z) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 y z) 1 (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1 -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (*.f64 y y)) (*.f64 (cbrt.f64 y) (/.f64 1 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 y z)) (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 y z)) 2) (cbrt.f64 (/.f64 y z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 2) (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 2) (*.f64 (cbrt.f64 (+.f64 (/.f64 1 z) (/.f64 y z))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 (cbrt.f64 z)) (cbrt.f64 (pow.f64 z -2)) (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 z -2)) (/.f64 1 (cbrt.f64 z)) (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (pow.f64 z -2)) (/.f64 1 (cbrt.f64 z)) (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 y z)) (sqrt.f64 (/.f64 y z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) (/.f64 (sqrt.f64 (fma.f64 z y z)) z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) (*.f64 (/.f64 (sqrt.f64 (fma.f64 z y z)) z) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (pow.f64 z -1/2) (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (pow.f64 z -1/2) (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 z -1/2) (/.f64 y (sqrt.f64 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 z)) (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1 (/.f64 1 (neg.f64 z)) (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (neg.f64 y) (/.f64 1 (neg.f64 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 z y z) (pow.f64 z -2) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (pow.f64 z -3) (pow.f64 (/.f64 z y) -3)) (/.f64 1 (fma.f64 (/.f64 y z) (-.f64 (/.f64 y z) (/.f64 1 z)) (pow.f64 z -2))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (-.f64 (pow.f64 z -2) (pow.f64 (/.f64 y z) 2)) (/.f64 1 (/.f64 (-.f64 1 y) z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 y z) -1)) 2) (cbrt.f64 (+.f64 (/.f64 y z) -1)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (+.f64 (/.f64 y z) -1)) (sqrt.f64 (+.f64 (/.f64 y z) -1)) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 1 (cbrt.f64 z)) (+.f64 (/.f64 y z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 1 (cbrt.f64 z)) (*.f64 (+.f64 (/.f64 y z) -1) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) 1) (/.f64 (cbrt.f64 y) z) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) z) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (pow.f64 (cbrt.f64 z) 2)) (cbrt.f64 (/.f64 y z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 z) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 (cbrt.f64 (*.f64 y y)) (sqrt.f64 z)) (/.f64 (cbrt.f64 y) (sqrt.f64 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 (sqrt.f64 (/.f64 y z)) 1) (-.f64 (sqrt.f64 (/.f64 y z)) 1) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (+.f64 y 1) (/.f64 1 z) -1)))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (/.f64 1 (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (*.f64 y (pow.f64 z -1/2)) (pow.f64 z -1/2) (+.f64 (/.f64 1 z) -1))))))"]],"rules":[["egg-rr",95],["egg-rr",92],["egg-rr",29]],"stop":[["node limit",1]],"time":60.48486328125,"type":"rewrite"},{"count":[[264,238]],"egraph":[[8,3204,383,0.0385075],[7,3204,383,0.031494707999999996],[6,3053,383,0.025612332999999998],[5,2182,383,0.018900874999999998],[4,950,383,0.009298875],[3,330,383,0.002870541],[2,142,383,0.001076],[1,66,430,0.00048212499999999997],[0,29,448,0.0001825]],"inputs":[["(/.f64 (*.f64 (+.f64 1 y) x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(*.f64 -1 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(*.f64 -1 x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z)) (*.f64 -1 x))","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z)) (*.f64 -1 x))","(*.f64 (-.f64 (/.f64 1 z) 1) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(/.f64 (*.f64 y x) z)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(/.f64 1 z)","(/.f64 y z)","(/.f64 y z)","(/.f64 (+.f64 1 y) z)","-1","-1","(-.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z)) 1)","(-.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z)) 1)","(-.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z)) 1)","(-.f64 (/.f64 1 z) 1)","(/.f64 y z)","(/.f64 y z)"]],"method":["egg-herbie"],"outputs":[["(/.f64 (*.f64 (+.f64 1 y) x) z)","(/.f64 (fma.f64 y x x) z)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (*.f64 -1 x) (/.f64 (*.f64 (+.f64 1 y) x) z))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) (*.f64 -1 x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 -1 x)","(neg.f64 x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z)) (*.f64 -1 x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z)) (*.f64 -1 x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (*.f64 -1 (/.f64 (*.f64 (-.f64 (*.f64 -1 y) 1) x) z)) (*.f64 -1 x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(*.f64 (-.f64 (/.f64 1 z) 1) x)","(*.f64 x (+.f64 (/.f64 1 z) -1))","(*.f64 x (+.f64 -1 (/.f64 1 z)))","(-.f64 (/.f64 x z) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(/.f64 (*.f64 y x) z)","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(/.f64 (*.f64 y x) z)","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(*.f64 y (/.f64 x z))","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(+.f64 (/.f64 (*.f64 y x) z) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 -1 x (/.f64 (*.f64 (+.f64 1 y) x) z))","(-.f64 (/.f64 (*.f64 (+.f64 1 y) x) z) x)","(-.f64 (/.f64 (fma.f64 y x x) z) x)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(/.f64 (+.f64 1 y) z)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(/.f64 (+.f64 1 y) z)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(/.f64 (+.f64 1 y) z)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(/.f64 (+.f64 1 y) z)","(*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z))","(/.f64 (+.f64 1 y) z)","(/.f64 1 z)","(/.f64 y z)","(/.f64 y z)","(/.f64 (+.f64 1 y) z)","-1","-1","(-.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z)) 1)","(fma.f64 -1 (/.f64 (fma.f64 -1 y -1) z) -1)","(fma.f64 -1 (/.f64 (fma.f64 y -1 -1) z) -1)","(-.f64 -1 (/.f64 (-.f64 -1 y) z))","(+.f64 -1 (/.f64 (+.f64 1 y) z))","(-.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z)) 1)","(fma.f64 -1 (/.f64 (fma.f64 -1 y -1) z) -1)","(fma.f64 -1 (/.f64 (fma.f64 y -1 -1) z) -1)","(-.f64 -1 (/.f64 (-.f64 -1 y) z))","(+.f64 -1 (/.f64 (+.f64 1 y) z))","(-.f64 (*.f64 -1 (/.f64 (-.f64 (*.f64 -1 y) 1) z)) 1)","(fma.f64 -1 (/.f64 (fma.f64 -1 y -1) z) -1)","(fma.f64 -1 (/.f64 (fma.f64 y -1 -1) z) -1)","(-.f64 -1 (/.f64 (-.f64 -1 y) z))","(+.f64 -1 (/.f64 (+.f64 1 y) z))","(-.f64 (/.f64 1 z) 1)","(+.f64 (/.f64 1 z) -1)","(+.f64 -1 (/.f64 1 z))","(/.f64 y z)","(/.f64 y z)"]],"stop":[["saturated",1]],"time":59.782958984375,"type":"simplify"},{"compiler":[[3845,2295]],"time":46.6640625,"type":"eval"},{"alts":[["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","fresh",9.16015625],["(*.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (/.f64 1 (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)","fresh",13.143710768324038],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","next",3.022556396526631],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","done",2.8984375],["(-.f64 (*.f64 y (/.f64 x z)) x)","fresh",16.249383467673333]],"compiler":[[12,8],[21,16],[19,13],[14,10],[10,6],[12,8],[21,16],[19,13],[10,6]],"count":[[244,5]],"kept":[{"done":[0,0],"fresh":[5,2],"new":[238,2],"picked":[1,1]}],"min-error":[0],"time":84.513916015625,"type":"prune"},{"compiler":[[63,31]],"locations":[["(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))",0.170253759768442,true],["(/.f64 y (cbrt.f64 z))",0.26953125,true],["(pow.f64 (cbrt.f64 z) -2)",0.5394325683790941,true],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)",2.7231072425437906,true]],"time":14.97119140625,"type":"localize"},{"count":[[4,48]],"series":[["(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))","y","-inf",0.162109375],["(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))","y","inf",0.156982421875],["(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))","y","0",0.197021484375],["(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))","z","-inf",1.472900390625],["(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))","z","inf",0.514892578125],["(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))","z","0",0.489013671875],["(/.f64 y (cbrt.f64 z))","z","-inf",0.372802734375],["(/.f64 y (cbrt.f64 z))","z","inf",0.301025390625],["(/.f64 y (cbrt.f64 z))","z","0",0.266845703125],["(/.f64 y (cbrt.f64 z))","y","-inf",0.2099609375],["(/.f64 y (cbrt.f64 z))","y","inf",0.27099609375],["(/.f64 y (cbrt.f64 z))","y","0",0.77587890625],["(pow.f64 (cbrt.f64 z) -2)","z","-inf",0.4091796875],["(pow.f64 (cbrt.f64 z) -2)","z","inf",0.321044921875],["(pow.f64 (cbrt.f64 z) -2)","z","0",0.403076171875],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","x","-inf",0.346923828125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","x","inf",0.406005859375],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","x","0",2.97314453125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","y","-inf",2.074951171875],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","y","inf",0.4599609375],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","y","0",1.779052734375],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","z","-inf",2.612060546875],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","z","inf",0.841064453125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","z","0",2.044921875]],"time":20.239013671875,"type":"series"},{"count":[[4,117]],"egraph":[[2,3521,54,0.032264999],[1,278,54,0.005010958],[0,13,54,0.000375833]],"inputs":[["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","(pow.f64 (cbrt.f64 z) -2)","(/.f64 y (cbrt.f64 z))","(fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) x) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) (*.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))) x)) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))) x))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))) x))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 3) -1) x) (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) -1) x) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 3) -1)) (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) -1)) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))) x))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) x (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) (*.f64 x -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) -2))) 2)) (log.f64 (cbrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) -2)))) (log.f64 (sqrt.f64 (exp.f64 (pow.f64 (cbrt.f64 z) -2)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) -2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 z) -2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (pow.f64 (cbrt.f64 z) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) -2) (cbrt.f64 (pow.f64 (cbrt.f64 z) -4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (cbrt.f64 z) -4)) (pow.f64 (cbrt.f64 (cbrt.f64 z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 z)) (/.f64 1 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) -4) (pow.f64 (cbrt.f64 (cbrt.f64 z)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (pow.f64 (cbrt.f64 z) 2))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (cbrt.f64 z) -4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (pow.f64 (cbrt.f64 z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (pow.f64 (cbrt.f64 z) -2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 z -2))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (pow.f64 (cbrt.f64 z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (pow.f64 (cbrt.f64 z) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 -2/3 (log.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 -2/3 (log.f64 z)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 y (cbrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) -2) (/.f64 y (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 y) 2) (*.f64 (cbrt.f64 y) (/.f64 1 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) (pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) 2) (cbrt.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 y) (*.f64 (sqrt.f64 y) (/.f64 1 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (cbrt.f64 z))) (sqrt.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 y) (/.f64 1 (neg.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z -1/6) (/.f64 y (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 z 1/6)) (/.f64 (cbrt.f64 y) (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (cbrt.f64 z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 y (cbrt.f64 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 y (cbrt.f64 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 z) y) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 y 3) z) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 (cbrt.f64 z) y) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 y 3) (/.f64 1 z)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 1 z) (pow.f64 y 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 y (neg.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 y (cbrt.f64 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 y (cbrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (cbrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) z))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (cbrt.f64 z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 (/.f64 1 z) (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))) 1) (/.f64 1 z))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))) (log.f64 (sqrt.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 2) (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 2) (*.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) (*.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (*.f64 (pow.f64 z -2) (pow.f64 (/.f64 y (cbrt.f64 z)) 3)) (pow.f64 z -3)) (+.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))) 2) (-.f64 (pow.f64 z -2) (*.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))) (/.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (pow.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))) 2) (pow.f64 z -2)) (-.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))) (/.f64 1 z)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1 z)) (exp.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1 z))) (exp.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (*.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)))) (+.f64 1 (expm1.f64 (/.f64 1 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) 1))))))"]],"rules":[["egg-rr",32],["egg-rr",41],["egg-rr",19],["egg-rr",25]],"stop":[["node limit",1]],"time":62.866943359375,"type":"rewrite"},{"count":[[165,131]],"egraph":[[11,7792,435,0.06676183399999999],[10,7000,435,0.056684292],[9,5170,435,0.042616249999999994],[8,4167,435,0.029788125],[7,2026,435,0.017944333],[6,1227,435,0.009557708],[5,829,435,0.005992499],[4,401,462,0.003753249],[3,219,525,0.001848249],[2,120,569,0.0009700409999999999],[1,57,570,0.0005067909999999999],[0,21,675,0.00022625]],"inputs":[["(*.f64 (-.f64 (/.f64 1 z) 1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(/.f64 1 z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (/.f64 1 z) 1) x)","(*.f64 (+.f64 (/.f64 1 z) -1) x)","(+.f64 (/.f64 x z) (neg.f64 x))","(-.f64 (/.f64 x z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(*.f64 1 (/.f64 y (/.f64 z x)))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(*.f64 1 (/.f64 y (/.f64 z x)))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (/.f64 1 z) (-.f64 (/.f64 y z) 1)))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (fma.f64 x (/.f64 y z) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(/.f64 1 z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(*.f64 1 (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(*.f64 (pow.f64 1 1/3) (/.f64 y z))","(*.f64 1 (/.f64 y z))","(/.f64 y z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z))","(fma.f64 1 (/.f64 y z) (/.f64 1 z))","(+.f64 (/.f64 1 z) (/.f64 y z))","(/.f64 (+.f64 1 y) z)"]],"stop":[["node limit",1]],"time":92.911865234375,"type":"simplify"},{"compiler":[[2745,1563]],"time":33.154052734375,"type":"eval"},{"alts":[["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","next",3.028747656295073],["(-.f64 (*.f64 y (/.f64 x z)) x)","fresh",16.249383467673333],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","fresh",9.16015625],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","done",2.8984375]],"compiler":[[21,15],[10,6],[12,8],[14,10],[21,15],[10,6],[12,8]],"count":[[136,4]],"kept":[{"done":[1,1],"fresh":[3,2],"new":[131,1],"picked":[1,0]}],"min-error":[0],"time":32.2509765625,"type":"prune"},{"compiler":[[76,40]],"locations":[["(/.f64 (cbrt.f64 z) y)",0.2578125,true],["(pow.f64 (cbrt.f64 z) -2)",0.5394325683790941,false],["(pow.f64 (/.f64 (cbrt.f64 z) y) -1)",0.5868635197080021,true],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)",2.7231072425437906,true]],"time":18.5771484375,"type":"localize"},{"count":[[3,48]],"series":[["(/.f64 (cbrt.f64 z) y)","y","-inf",0.178955078125],["(/.f64 (cbrt.f64 z) y)","y","inf",0.16796875],["(/.f64 (cbrt.f64 z) y)","y","0",0.14599609375],["(/.f64 (cbrt.f64 z) y)","z","-inf",0.3369140625],["(/.f64 (cbrt.f64 z) y)","z","inf",0.275146484375],["(/.f64 (cbrt.f64 z) y)","z","0",0.29296875],["(pow.f64 (/.f64 (cbrt.f64 z) y) -1)","y","-inf",0.330078125],["(pow.f64 (/.f64 (cbrt.f64 z) y) -1)","y","inf",0.380126953125],["(pow.f64 (/.f64 (cbrt.f64 z) y) -1)","y","0",0.675048828125],["(pow.f64 (/.f64 (cbrt.f64 z) y) -1)","z","-inf",0.43603515625],["(pow.f64 (/.f64 (cbrt.f64 z) y) -1)","z","inf",0.325927734375],["(pow.f64 (/.f64 (cbrt.f64 z) y) -1)","z","0",0.309814453125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","x","-inf",0.31201171875],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","x","inf",0.309814453125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","x","0",1.86279296875],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","y","-inf",0.634033203125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","y","inf",0.591064453125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","y","0",0.784912109375],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","z","-inf",2.259033203125],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","z","inf",1.051025390625],["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","z","0",2.491943359375]],"time":14.572021484375,"type":"series"},{"count":[[3,112]],"egraph":[[2,3923,36,0.030959583000000002],[1,318,36,0.006395916000000001],[0,15,42,0.000499]],"inputs":[["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","(pow.f64 (/.f64 (cbrt.f64 z) y) -1)","(/.f64 (cbrt.f64 z) y)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) x) (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (*.f64 x (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z))) (*.f64 x -1))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 x) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 3) -1) x) (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) -1) x) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 3) -1)) (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 x (+.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 2) -1)) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) 1)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) 3) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (pow.f64 x 3) (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 x) (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (*.f64 (pow.f64 x 3) (pow.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) x (*.f64 -1 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 x (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) (*.f64 x -1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z)))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 y (cbrt.f64 z)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 y (/.f64 1 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 y (cbrt.f64 z)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 y (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) (pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 y (cbrt.f64 z))) 2) (cbrt.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 y (cbrt.f64 z))) (sqrt.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 z)) y)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (cbrt.f64 z)) (pow.f64 (pow.f64 y -1) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 z 1/6)) (/.f64 y (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) 1) (/.f64 (cbrt.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) 1) (/.f64 (sqrt.f64 y) (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (/.f64 y (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (/.f64 (cbrt.f64 y) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (/.f64 (sqrt.f64 y) (cbrt.f64 (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 y) 2) (pow.f64 z 1/6)) (/.f64 (cbrt.f64 y) (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 y) (pow.f64 z 1/6)) (/.f64 (sqrt.f64 y) (pow.f64 z 1/6)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (neg.f64 (cbrt.f64 z))) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 z) y)) 2)) (cbrt.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 y (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1 (neg.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (/.f64 (cbrt.f64 z) y) 1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (pow.f64 (cbrt.f64 y) 2) (/.f64 (cbrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 y) (/.f64 (cbrt.f64 z) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 y) (neg.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (sqrt.f64 (/.f64 y (cbrt.f64 z))) (sqrt.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (cbrt.f64 z)) (pow.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (pow.f64 z 1/6)) (pow.f64 z 1/6))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y 1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 y (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2)) (cbrt.f64 (cbrt.f64 z)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1 (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 z) y)) 2)) (cbrt.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (cbrt.f64 z) y) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 y (cbrt.f64 z)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 y (cbrt.f64 z)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 y 3) z))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 y (cbrt.f64 z))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 y (cbrt.f64 z))) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (cbrt.f64 z) y))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (cbrt.f64 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (cbrt.f64 z) y)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (cbrt.f64 z) y)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (cbrt.f64 z) y))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 z) (pow.f64 y -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (cbrt.f64 z) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (*.f64 (cbrt.f64 (cbrt.f64 z)) (pow.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (cbrt.f64 z) y)) (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 z) y)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 z) y)) 2) (cbrt.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 z 1/6) (*.f64 (pow.f64 z 1/6) (pow.f64 y -1)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (cbrt.f64 z) y)) (sqrt.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (cbrt.f64 z)) (pow.f64 (neg.f64 y) -1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 y -1) (cbrt.f64 z))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) 1) (/.f64 (cbrt.f64 (cbrt.f64 z)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 z 1/6) 1) (/.f64 (pow.f64 z 1/6) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 (pow.f64 (cbrt.f64 y) 2)) (/.f64 (cbrt.f64 z) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 z 1/6) (pow.f64 (cbrt.f64 y) 2)) (/.f64 (pow.f64 z 1/6) (cbrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 y) -1) (/.f64 (cbrt.f64 z) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (cbrt.f64 z)) 2) (sqrt.f64 y)) (/.f64 (cbrt.f64 (cbrt.f64 z)) (sqrt.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (cbrt.f64 z) y) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (cbrt.f64 z)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 z) y) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (cbrt.f64 z) y) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (cbrt.f64 z) y)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (cbrt.f64 z) y)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 z (pow.f64 y 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 y (cbrt.f64 z)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (cbrt.f64 z) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (cbrt.f64 z) y) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (cbrt.f64 z) y))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (cbrt.f64 z) y) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 z (pow.f64 y 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (cbrt.f64 z) y)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (cbrt.f64 z) y)) 1))))))"]],"rules":[["egg-rr",39],["egg-rr",44],["egg-rr",29]],"stop":[["node limit",1]],"time":60.2587890625,"type":"rewrite"},{"count":[[160,123]],"egraph":[[8,5794,432,0.042529875],[7,4571,432,0.028211208],[6,3297,432,0.018790416],[5,2177,432,0.012481625],[4,843,432,0.006976625],[3,385,474,0.002810416],[2,163,539,0.001165666],[1,70,540,0.0005077079999999999],[0,25,666,0.000185583]],"inputs":[["(*.f64 (-.f64 (/.f64 1 z) 1) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))"]],"method":["egg-herbie"],"outputs":[["(*.f64 (-.f64 (/.f64 1 z) 1) x)","(*.f64 (+.f64 (/.f64 1 z) -1) x)","(+.f64 (neg.f64 x) (/.f64 x z))","(-.f64 (/.f64 x z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(*.f64 1 (/.f64 y (/.f64 z x)))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z))","(*.f64 1 (/.f64 y (/.f64 z x)))","(*.f64 (/.f64 y z) x)","(*.f64 x (/.f64 y z))","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 (*.f64 y x) z)) (*.f64 (-.f64 (/.f64 1 z) 1) x))","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (-.f64 (+.f64 (*.f64 (pow.f64 1 1/3) (/.f64 y z)) (/.f64 1 z)) 1) x)","(fma.f64 1 (/.f64 y (/.f64 z x)) (*.f64 (+.f64 (/.f64 1 z) -1) x))","(*.f64 x (+.f64 (+.f64 (/.f64 1 z) -1) (/.f64 y z)))","(-.f64 (*.f64 (+.f64 y 1) (/.f64 x z)) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (/.f64 1 z) 1/3) y)","(*.f64 y (cbrt.f64 (/.f64 1 z)))","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)","(*.f64 (pow.f64 (*.f64 1 z) 1/3) (/.f64 1 y))","(*.f64 (cbrt.f64 z) (/.f64 1 y))","(/.f64 (cbrt.f64 z) y)"]],"stop":[["node limit",1]],"time":64.148193359375,"type":"simplify"},{"compiler":[[3091,1787]],"time":34.347900390625,"type":"eval"},{"alts":[["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","done",3.028747656295073],["(-.f64 (*.f64 y (/.f64 x z)) x)","fresh",16.249383467673333],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)","fresh",9.16015625],["(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","done",2.8984375]],"compiler":[[21,15],[10,6],[12,8],[14,10]],"count":[[146,4]],"kept":[{"done":[1,1],"fresh":[2,2],"new":[142,0],"picked":[1,1]}],"min-error":[0],"time":32.248046875,"type":"prune"},{"accuracy":[0.10546875],"baseline":[2.8984375],"branch":[["x",0.125,3],["y",1.2547780703454299,2],["z",0.859375,2],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)",0.10546875,3]],"compiler":[[4,3],[4,3],[4,3],[12,8],[127,69]],"count":[[10,3]],"inputs":[["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","(*.f64 (fma.f64 (*.f64 y (cbrt.f64 (pow.f64 z -2))) (/.f64 1 (cbrt.f64 z)) (+.f64 (/.f64 1 z) -1)) x)","(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (/.f64 y (cbrt.f64 z)) (/.f64 1 z)) 1) x)","(-.f64 (pow.f64 (/.f64 z (fma.f64 x y x)) -1) x)","(-.f64 (*.f64 y (/.f64 x z)) x)","(-.f64 (pow.f64 (cbrt.f64 (/.f64 (fma.f64 x y x) z)) 3) x)","(-.f64 (*.f64 (/.f64 1 (pow.f64 (cbrt.f64 z) 2)) (/.f64 (fma.f64 x y x) (cbrt.f64 z))) x)","(*.f64 (-.f64 (+.f64 (/.f64 1 z) (/.f64 y z)) 1) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)"]],"link":["."],"name":["Diagrams.TwoD.Segment.Bernstein:evaluateBernstein from diagrams-lib-1.3.0.3"],"oracle":[31.336452962978715],"outputs":[["(*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x)","(-.f64 (/.f64 (fma.f64 x y x) z) x)","(-.f64 (*.f64 y (/.f64 x z)) x)"]],"time":49.765869140625,"times":[["x",13.0810546875],["y",13.01611328125],["z",9.18798828125],["(/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z)",12.12890625]],"type":"regimes"},{"bstep":[[1.1646427806147025e+285,2.2140517023076199e+285,0.06396484375],[{"type":"real","value":"-inf"},-2.3790240494115893e+303,0.032958984375]],"compiler":[[6,5],[12,8]],"method":["left-value","left-value"],"time":0.210205078125,"type":"bsearch"},{"compiler":[[60,36]],"egraph":[[4,59,84,0.00029716599999999997],[3,57,84,0.000237625],[2,53,84,0.000175666],[1,45,84,0.00011425],[0,32,84,5.8708e-5]],"inputs":[["(if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) -inf.0) (*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) 1999999999999999960318315841040885700386219039705694423600051421123300719965076170448177232372292987688572298794442900745238641790877787395895304332910450668118745492827496294412886841783505081241175060724440547726013803102191981415396885683051819084945689177376162160752265237201158144) (-.f64 (/.f64 (fma.f64 x y x) z) x) (-.f64 (*.f64 y (/.f64 x z)) x)))"]],"method":["egg-herbie"],"outputs":[["(if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) -inf.0) (*.f64 (-.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) 1) x) (if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) 1999999999999999960318315841040885700386219039705694423600051421123300719965076170448177232372292987688572298794442900745238641790877787395895304332910450668118745492827496294412886841783505081241175060724440547726013803102191981415396885683051819084945689177376162160752265237201158144) (-.f64 (/.f64 (fma.f64 x y x) z) x) (-.f64 (*.f64 y (/.f64 x z)) x)))","(if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) -inf.0) (*.f64 x (+.f64 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)) -1)) (if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) 1999999999999999960318315841040885700386219039705694423600051421123300719965076170448177232372292987688572298794442900745238641790877787395895304332910450668118745492827496294412886841783505081241175060724440547726013803102191981415396885683051819084945689177376162160752265237201158144) (-.f64 (/.f64 (fma.f64 x y x) z) x) (-.f64 (*.f64 y (/.f64 x z)) x)))","(if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) -inf.0) (*.f64 x (+.f64 -1 (fma.f64 (pow.f64 (cbrt.f64 z) -2) (pow.f64 (/.f64 (cbrt.f64 z) y) -1) (/.f64 1 z)))) (if (<=.f64 (/.f64 (*.f64 x (+.f64 (-.f64 y z) 1)) z) 1999999999999999960318315841040885700386219039705694423600051421123300719965076170448177232372292987688572298794442900745238641790877787395895304332910450668118745492827496294412886841783505081241175060724440547726013803102191981415396885683051819084945689177376162160752265237201158144) (-.f64 (/.f64 (fma.f64 x y x) z) x) (-.f64 (*.f64 y (/.f64 x z)) x)))"]],"stop":[["fuel",1],["saturated",1]],"time":9.89892578125,"type":"simplify"},{"time":0.02490234375,"type":"soundness"},{"compiler":[[60,36]],"remove-preprocessing":[[]],"time":18.360107421875,"type":"end"}]
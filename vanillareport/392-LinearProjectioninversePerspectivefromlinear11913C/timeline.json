[{"compiler":[[12,8]],"method":["search"],"sampling":[[12,0.7921945555135608,0.20682912040501833,0.0009763240814208984],[11,0.7648775018751621,0.23414617404341698,0.0009763240814208984],[10,0.6087800525128841,0.39024362340569496,0.0009763240814208984],[9,0.5619508177042007,0.43707285821437836,0.0009763240814208984],[8,0.31219489872455597,0.6868287771940231,0.0009763240814208984],[7,0.24975591897964478,0.7492677569389343,0.0009763240814208984],[6,0.0,0.9990236759185791,0.0009763240814208984],[5,0.0,0.9990236759185791,0.0009763240814208984],[4,0.0,0.9990236759185791,0.0009763240814208984],[3,0.0,0.9990236759185791,0.0009763240814208984],[2,0.0,0.9990236759185791,0.0009763240814208984],[1,0.0,0.9990236759185791,0.0009763240814208984],[0,0.0,0.9990236759185791,0.0009763240814208984]],"time":47.56103515625,"type":"analyze"},{"outcomes":[["body",256,"invalid",0.06982421875,2],["body",256,"valid",302.216064453125,8256]],"time":310.1318359375,"type":"sample"},{"compiler":[[11,7]],"egraph":[[1,2,2,4.875e-6],[0,2,2,4.25e-6],[4,49,26,0.00037799999999999997],[3,49,26,0.00029225],[2,39,26,0.000208084],[1,24,26,0.00012154200000000001],[0,12,26,5.65e-5]],"inputs":[["0","1"],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (+.f64 y x) (*.f64 (*.f64 y 2) x))"]],"method":["egg-herbie","egg-herbie"],"outputs":[["0","1","0"],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))","(/.f64 (+.f64 y x) (*.f64 (*.f64 y 2) x))","(/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))"]],"stop":[["unsound",1],["saturated",1]],"symmetry":[["(sort x y)"]],"time":22.718994140625,"type":"preprocess"},{"count":[[1,2]],"egraph":[[4,45,13,0.000339251],[3,43,13,0.000260334],[2,29,13,0.00017420899999999998],[1,15,13,9.6417e-5],[0,8,13,4.0875e-5]],"inputs":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))"]],"method":["egg-herbie"],"outputs":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","(/.f64 (+.f64 x y) (*.f64 y (*.f64 x 2)))","(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))"]],"stop":[["saturated",1]],"time":10.570068359375,"type":"simplify"},{"compiler":[[20,11]],"time":0.337890625,"type":"eval"},{"alts":[["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))","fresh",14.81204757690762],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","next",7.6484375]],"compiler":[[11,7],[11,7],[11,7],[11,7]],"count":[[3,2]],"kept":[{"done":[0,0],"fresh":[1,1],"new":[2,2],"picked":[0,0]}],"min-error":[0.1171875],"time":1.6240234375,"type":"prune"},{"compiler":[[25,10]],"locations":[["(/.f64 (+.f64 x y) x)",0.01953125,true],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))",7.108829457362488,true]],"time":5.06201171875,"type":"localize"},{"count":[[2,48]],"series":[["(/.f64 (+.f64 x y) x)","y","-inf",0.218017578125],["(/.f64 (+.f64 x y) x)","y","inf",0.18896484375],["(/.f64 (+.f64 x y) x)","y","0",0.218994140625],["(/.f64 (+.f64 x y) x)","x","-inf",0.2158203125],["(/.f64 (+.f64 x y) x)","x","inf",0.156005859375],["(/.f64 (+.f64 x y) x)","x","0",0.23193359375],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","y","-inf",0.72509765625],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","y","inf",0.48486328125],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","y","0",0.444091796875],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","x","-inf",0.5498046875],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","x","inf",0.55322265625],["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","x","0",0.532958984375]],"time":4.68603515625,"type":"series"},{"count":[[2,95]],"egraph":[[2,2938,20,0.025548167],[1,186,20,0.0036922500000000002],[0,8,20,0.000229458]],"inputs":[["(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","(/.f64 (+.f64 x y) x)"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x y) (*.f64 x y))))) 2)) (log.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x y) (*.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x y) (*.f64 x y)))))) (log.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x y) (*.f64 x y)))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (*.f64 (/.f64 1 x) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)) (cbrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 2) 4)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 2) 4)) (cbrt.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)) (*.f64 (cbrt.f64 (/.f64 (+.f64 x y) x)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)) (sqrt.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) (*.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (neg.f64 (+.f64 x y)) x) (/.f64 1 (*.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 y) (/.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (+.f64 x y) (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (+.f64 y y)) (/.f64 (cbrt.f64 (+.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x y)) (+.f64 y y)) (/.f64 (sqrt.f64 (+.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) y) (/.f64 (/.f64 1 x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (/.f64 (+.f64 x y) x) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)) y) (/.f64 (cbrt.f64 (/.f64 (+.f64 x y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) y) (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) 2) (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) 2) (/.f64 (/.f64 1 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)) 2) (/.f64 (cbrt.f64 (/.f64 (+.f64 x y) x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) 1) (/.f64 (/.f64 1 x) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)) 1) (/.f64 (cbrt.f64 (/.f64 (+.f64 x y) x)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) 1) (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (pow.f64 (cbrt.f64 (+.f64 y y)) 2)) (/.f64 (/.f64 1 x) (cbrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y y)) -2) (/.f64 (/.f64 (+.f64 x y) x) (cbrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)) (pow.f64 (cbrt.f64 (+.f64 y y)) 2)) (cbrt.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) (pow.f64 (cbrt.f64 (+.f64 y y)) 2)) (/.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) (cbrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) (sqrt.f64 (+.f64 y y))) (/.f64 (/.f64 1 x) (sqrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y y) -1/2) (/.f64 (/.f64 (+.f64 x y) x) (sqrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)) (sqrt.f64 (+.f64 y y))) (/.f64 (cbrt.f64 (/.f64 (+.f64 x y) x)) (sqrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 2) 4) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 y y) (/.f64 x (+.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (/.f64 (+.f64 x y) x) 3) (pow.f64 (+.f64 y y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x (+.f64 x y)) (+.f64 y y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x (+.f64 y y)) (+.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 (+.f64 y y) (/.f64 x (+.f64 x y))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (/.f64 (+.f64 x y) x) (*.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 2) 4))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x y) (*.f64 x y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (/.f64 (+.f64 x y) x) 3) (pow.f64 (+.f64 y y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (*.f64 (/.f64 (+.f64 x y) (*.f64 x y)) 1/2)) 1))))))","((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x y) x))) 2)) (log.f64 (cbrt.f64 (exp.f64 (/.f64 (+.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x y) x)))) (log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 x y) x))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 x y) (/.f64 1 x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (/.f64 (+.f64 x y) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (/.f64 (+.f64 x y) x)) (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2)) (cbrt.f64 (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (*.f64 (cbrt.f64 (+.f64 x y)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) (sqrt.f64 (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 x y)) (*.f64 (sqrt.f64 (+.f64 x y)) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (neg.f64 (+.f64 x y)) (/.f64 1 (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 x) (+.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) 1) (/.f64 (cbrt.f64 (+.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x y)) 1) (/.f64 (sqrt.f64 (+.f64 x y)) x))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 x) -2) (/.f64 (+.f64 x y) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 x y)) (pow.f64 (cbrt.f64 x) 2)) (/.f64 (sqrt.f64 (+.f64 x y)) (cbrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 x -1/2) (/.f64 (+.f64 x y) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 x y)) 2) (sqrt.f64 x)) (/.f64 (cbrt.f64 (+.f64 x y)) (sqrt.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) x) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) x) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) x)) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 x y) x)) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (+.f64 x y)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 x y) 3) (pow.f64 x 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (/.f64 x (+.f64 x y)) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 x y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 x (+.f64 x y)) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x y) x))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) x) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 x y) 3) (pow.f64 x 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 x y) x)) 1))))))"]],"rules":[["egg-rr",39],["egg-rr",56]],"stop":[["node limit",1]],"time":48.60205078125,"type":"rewrite"},{"count":[[143,103]],"egraph":[[2,31,345,0.000299375],[1,24,345,0.000204375],[0,15,345,9.3625e-5]],"inputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 y x)","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","1","(+.f64 (/.f64 y x) 1)","(+.f64 (/.f64 y x) 1)","(+.f64 (/.f64 y x) 1)","1","(+.f64 (/.f64 y x) 1)","(+.f64 (/.f64 y x) 1)","(+.f64 (/.f64 y x) 1)","1","(+.f64 (/.f64 y x) 1)","(+.f64 (/.f64 y x) 1)","(+.f64 (/.f64 y x) 1)","(/.f64 y x)","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(/.f64 y x)","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 y x)","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","1","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","1","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","1","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","(+.f64 (/.f64 y x) 1)","(+.f64 1 (/.f64 y x))","(/.f64 y x)","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(/.f64 y x)","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))","(+.f64 1 (/.f64 y x))"]],"stop":[["saturated",1]],"time":14.027099609375,"type":"simplify"},{"compiler":[[1450,587]],"time":13.097900390625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","fresh",7.674160009768442],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","fresh",7.6328125],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","next",0.01953125]],"compiler":[[11,7],[11,8],[9,7],[11,7],[11,8],[9,7]],"count":[[105,3]],"kept":[{"done":[0,0],"fresh":[1,0],"new":[103,3],"picked":[1,0]}],"min-error":[0],"time":19.0400390625,"type":"prune"},{"compiler":[[18,12]],"locations":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))",0.01953125,true]],"time":4.697021484375,"type":"localize"},{"count":[[1,24]],"series":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","x","-inf",0.189208984375],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","x","inf",0.235107421875],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","x","0",0.31005859375],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","y","-inf",0.237060546875],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","y","inf",0.25],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","y","0",0.412841796875]],"time":1.71484375,"type":"series"},{"count":[[1,89]],"egraph":[[2,2527,10,0.022877834],[1,167,10,0.003280209],[0,7,10,0.000227875]],"inputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (/.f64 (/.f64 1/4 (*.f64 y y)) (-.f64 (/.f64 1/2 y) (/.f64 1/2 x))) (/.f64 (/.f64 1/4 (*.f64 x x)) (-.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 1 y) (/.f64 1 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (+.f64 (/.f64 1 x) (/.f64 1 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (pow.f64 (+.f64 (/.f64 1 y) (/.f64 1 x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (pow.f64 (+.f64 (/.f64 1 x) (/.f64 1 y)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 2) (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) (sqrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 y (*.f64 1/2 x)) (/.f64 1 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (fma.f64 1/2 y (*.f64 1/2 x)) (pow.f64 (/.f64 1 (*.f64 y x)) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 1/2 y) 3) (/.f64 1/8 (pow.f64 x 3))) (/.f64 1 (fma.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/2 x) (/.f64 1/2 y)) (/.f64 1/4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (pow.f64 (/.f64 1/2 y) 3) (/.f64 1/8 (pow.f64 x 3))) (pow.f64 (/.f64 1 (fma.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/2 x) (/.f64 1/2 y)) (/.f64 1/4 (*.f64 y y)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1/4 (*.f64 y y)) (/.f64 1/4 (*.f64 x x))) (/.f64 1 (-.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (-.f64 (/.f64 1/4 (*.f64 y y)) (/.f64 1/4 (*.f64 x x))) (pow.f64 (/.f64 1 (-.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 1 1/3) (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 3)) 1/3) (pow.f64 (sqrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 3)) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2) (pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 2)) 1/3) (cbrt.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (*.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2) (sqrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))) 1/3) (cbrt.f64 (sqrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (pow.f64 (cbrt.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))) 2) 3) (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))) 3) (pow.f64 (sqrt.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 y x) (fma.f64 1/2 y (*.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (fma.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/2 x) (/.f64 1/2 y)) (/.f64 1/4 (*.f64 y y))) (+.f64 (pow.f64 (/.f64 1/2 y) 3) (/.f64 1/8 (pow.f64 x 3)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (-.f64 (/.f64 1/2 y) (/.f64 1/2 x)) (-.f64 (/.f64 1/4 (*.f64 y y)) (/.f64 1/4 (*.f64 x x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 y (*.f64 1/2 x)) (*.f64 y x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 1/2 y) 3) (/.f64 1/8 (pow.f64 x 3))) (fma.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/2 x) (/.f64 1/2 y)) (/.f64 1/4 (*.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 (pow.f64 (/.f64 1/2 y) 3) (/.f64 1/8 (pow.f64 x 3))) (+.f64 (/.f64 1/4 (*.f64 x x)) (-.f64 (/.f64 1/4 (*.f64 y y)) (/.f64 1/4 (*.f64 y x)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1/4 (*.f64 y y)) (/.f64 1/4 (*.f64 x x))) (-.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (fma.f64 1/2 y (*.f64 1/2 x))) (neg.f64 (*.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 (pow.f64 (/.f64 1/2 y) 3) (/.f64 1/8 (pow.f64 x 3)))) (neg.f64 (fma.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/2 x) (/.f64 1/2 y)) (/.f64 1/4 (*.f64 y y)))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (-.f64 (/.f64 1/4 (*.f64 y y)) (/.f64 1/4 (*.f64 x x)))) (neg.f64 (-.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x (*.f64 (*.f64 y 2) 1/2)) (*.f64 (*.f64 y 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 x (*.f64 (neg.f64 y) 1/2)) (*.f64 (neg.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (*.f64 x 2) y) (*.f64 y (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 x 2 (*.f64 (*.f64 y 2) 1)) (*.f64 (*.f64 y 2) (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 (*.f64 x 2) (*.f64 (neg.f64 y) 1)) (*.f64 (neg.f64 y) (*.f64 x 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (neg.f64 x) (*.f64 y -1/2)) (*.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 x (*.f64 (*.f64 y 2) -1/2)) (*.f64 (*.f64 y 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 (neg.f64 x) (*.f64 (neg.f64 y) -1/2)) (*.f64 (neg.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 y (*.f64 (*.f64 x 2) 1/2)) (*.f64 (*.f64 x 2) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 y (*.f64 (neg.f64 x) 1/2)) (*.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (*.f64 y 2) x) (*.f64 x (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 y 2 (*.f64 (*.f64 x 2) 1)) (*.f64 (*.f64 x 2) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 (*.f64 y 2) (*.f64 (neg.f64 x) 1)) (*.f64 (neg.f64 x) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 1/2 (neg.f64 y) (*.f64 x -1/2)) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1 y (*.f64 (*.f64 x 2) -1/2)) (*.f64 (*.f64 x 2) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (fma.f64 -1/2 (neg.f64 y) (*.f64 (neg.f64 x) -1/2)) (*.f64 (neg.f64 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (-.f64 (/.f64 1/4 (*.f64 x x)) (/.f64 1/4 (*.f64 y y))) (-.f64 (/.f64 1/2 x) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (fma.f64 1/2 y (*.f64 1/2 x)) y) x)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 y x) (fma.f64 1/2 y (*.f64 1/2 x))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (fma.f64 (/.f64 1/2 x) (-.f64 (/.f64 1/2 x) (/.f64 1/2 y)) (/.f64 1/4 (*.f64 y y))) (+.f64 (pow.f64 (/.f64 1/2 y) 3) (/.f64 1/8 (pow.f64 x 3)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (-.f64 (/.f64 1/2 y) (/.f64 1/2 x)) (-.f64 (/.f64 1/4 (*.f64 y y)) (/.f64 1/4 (*.f64 x x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (exp.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1/2 y))) (exp.f64 (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1/2 y)) (+.f64 1 (expm1.f64 (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1/2 y))) (+.f64 1 (expm1.f64 (/.f64 1/2 x)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1/2 x))) (exp.f64 (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (exp.f64 (/.f64 1/2 x)) (+.f64 1 (expm1.f64 (/.f64 1/2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (*.f64 (+.f64 1 (expm1.f64 (/.f64 1/2 x))) (+.f64 1 (expm1.f64 (/.f64 1/2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (+.f64 (/.f64 1/2 y) (/.f64 1/2 x))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1/2 (/.f64 1 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 y) 1 (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1/2 x) 1 (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/2 y) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 1 (/.f64 1/2 x) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 x)) (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/4 (*.f64 x x))) (cbrt.f64 (/.f64 1/2 x)) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (cbrt.f64 (/.f64 1/2 y)) (pow.f64 (cbrt.f64 (/.f64 1/2 y)) 2) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (pow.f64 (cbrt.f64 (/.f64 1/2 y)) 2) (cbrt.f64 (/.f64 1/2 y)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1/2 x)) (sqrt.f64 (/.f64 1/2 x)) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (sqrt.f64 (/.f64 1/2 y)) (sqrt.f64 (/.f64 1/2 y)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 1 (neg.f64 x)) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 -1/2 (/.f64 1 (neg.f64 y)) (/.f64 1/2 x))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 x) 1/2 (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x fma.f64 (/.f64 1 y) 1/2 (/.f64 1/2 x))))))"]],"rules":[["egg-rr",89]],"stop":[["node limit",1]],"time":43.428955078125,"type":"rewrite"},{"count":[[113,93]],"egraph":[[2,28,204,0.000252417],[1,21,204,0.00017212500000000002],[0,12,204,7.7625e-5]],"inputs":[["(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"stop":[["saturated",1]],"time":13.697021484375,"type":"simplify"},{"compiler":[[1343,963]],"time":17.752197265625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","fresh",7.674160009768442],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","next",7.6328125],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","done",0.01953125]],"compiler":[[11,7],[11,8],[9,7],[11,7],[11,8]],"count":[[96,3]],"kept":[{"done":[0,0],"fresh":[2,2],"new":[93,0],"picked":[1,1]}],"min-error":[0],"time":15.85693359375,"type":"prune"},{"compiler":[[26,14]],"locations":[["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))",7.108829457362488,true]],"time":5.56005859375,"type":"localize"},{"count":[[1,24]],"series":[["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","x","-inf",0.4208984375],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","x","inf",0.47802734375],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","x","0",0.9619140625],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","y","-inf",0.388916015625],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","y","inf",0.443115234375],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","y","0",0.419921875]],"time":3.202880859375,"type":"series"},{"count":[[1,54]],"egraph":[[2,2754,13,0.025254958],[1,196,13,0.0035722080000000003],[0,9,13,0.00027125]],"inputs":[["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 1 (/.f64 y x)) y)))) 2)) (log.f64 (cbrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 1 (/.f64 y x)) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 1 (/.f64 y x)) y))))) (log.f64 (sqrt.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 1 (/.f64 y x)) y))))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))) (cbrt.f64 (pow.f64 (*.f64 2 (/.f64 y (+.f64 1 (/.f64 y x)))) -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (cbrt.f64 (pow.f64 (*.f64 2 (/.f64 y (+.f64 1 (/.f64 y x)))) -2)) (cbrt.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) 2) (*.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))) (sqrt.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) (*.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (+.f64 (neg.f64 (/.f64 y x)) -1) (/.f64 1 (*.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1/2 y) (+.f64 1 (/.f64 y x)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (+.f64 1 (/.f64 y x)) y) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 1/2 (/.f64 (+.f64 1 (/.f64 y x)) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) 2) 1) (/.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) 1) (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) (+.f64 y y)))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) y) (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 1 y) (/.f64 (+.f64 1 (/.f64 y x)) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) 2) y) (/.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) 2) (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) 2) 2) (/.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) y))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (cbrt.f64 (+.f64 y y)) -2) (/.f64 (+.f64 1 (/.f64 y x)) (cbrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) 2) (pow.f64 (cbrt.f64 (+.f64 y y)) 2)) (cbrt.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) (pow.f64 (cbrt.f64 (+.f64 y y)) 2)) (/.f64 (sqrt.f64 (+.f64 1 (/.f64 y x))) (cbrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (pow.f64 (+.f64 y y) -1/2) (/.f64 (+.f64 1 (/.f64 y x)) (sqrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x *.f64 (/.f64 (pow.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) 2) (sqrt.f64 (+.f64 y y))) (/.f64 (cbrt.f64 (+.f64 1 (/.f64 y x))) (sqrt.f64 (+.f64 y y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (E.f64) (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 2 (/.f64 y (+.f64 1 (/.f64 y x)))) -2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 2 (/.f64 y (+.f64 1 (/.f64 y x)))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (pow.f64 (+.f64 1 (/.f64 y x)) 3) (pow.f64 (+.f64 y y) 3)) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 2 (/.f64 y (+.f64 1 (/.f64 y x)))) 1) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (pow.f64 (cbrt.f64 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y)))) 2)) (cbrt.f64 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (exp.f64 (sqrt.f64 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y))))) (sqrt.f64 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x neg.f64 (/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y -2)))))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (*.f64 2 (/.f64 y (+.f64 1 (/.f64 y x)))) -2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (sqrt.f64 (exp.f64 (/.f64 (+.f64 1 (/.f64 y x)) y))))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y)) 3))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (/.f64 (pow.f64 (+.f64 1 (/.f64 y x)) 3) (pow.f64 (+.f64 y y) 3)))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (*.f64 (+.f64 1 (/.f64 y x)) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y)))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/3 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y)))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 1/2 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y)))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (-.f64 (log.f64 (+.f64 y y)) (log1p.f64 (/.f64 y x))) -1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 (+.f64 (log1p.f64 (/.f64 y x)) (log.f64 (/.f64 1/2 y))) 1) 1))))))"]],"rules":[["egg-rr",54]],"stop":[["node limit",1]],"time":44.554931640625,"type":"rewrite"},{"count":[[78,58]],"egraph":[[2,28,204,0.000246416],[1,21,204,0.000167166],[0,12,204,7.7583e-5]],"inputs":[["(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"stop":[["saturated",1]],"time":12.9140625,"type":"simplify"},{"compiler":[[843,512]],"time":9.64306640625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","next",7.674160009768442],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","done",7.6328125],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","done",0.01953125]],"compiler":[[11,7],[11,8],[9,7],[11,7]],"count":[[61,3]],"kept":[{"done":[1,1],"fresh":[1,1],"new":[58,0],"picked":[1,1]}],"min-error":[0],"time":8.02197265625,"type":"prune"},{"compiler":[[25,10]],"locations":[["(/.f64 (+.f64 x y) x)",0.01953125,false],["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))",7.136173207362488,true]],"time":5.0869140625,"type":"localize"},{"count":[[1,24]],"series":[["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","y","-inf",0.180908203125],["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","y","inf",0.154052734375],["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","y","0",0.156005859375],["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","x","-inf",0.156982421875],["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","x","inf",0.159912109375],["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","x","0",0.215087890625]],"time":1.12109375,"type":"series"},{"count":[[1,64]],"egraph":[[2,2860,13,0.025127833000000002],[1,189,13,0.0037271250000000004],[0,8,13,0.0002435]],"inputs":[["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))"]],"method":["batch-egg-rewrite"],"outputs":[["((#(struct:change #<rule egg-rr> (2) ((x +.f64 0 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (pow.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 1/2 y)) (/.f64 (+.f64 x y) x))) 2)) (log.f64 (cbrt.f64 (pow.f64 (exp.f64 (/.f64 1/2 y)) (/.f64 (+.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x +.f64 (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 1/2 y)) (/.f64 (+.f64 x y) x)))) (log.f64 (sqrt.f64 (pow.f64 (exp.f64 (/.f64 1/2 y)) (/.f64 (+.f64 x y) x)))))))) (#(struct:change #<rule egg-rr> (2) ((x -.f64 (exp.f64 (log1p.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (*.f64 (*.f64 y 2) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (/.f64 (*.f64 x y) 1/2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (+.f64 x y) (/.f64 x (/.f64 1/2 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/2 (*.f64 (/.f64 x (+.f64 x y)) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1/2 (*.f64 y (/.f64 x (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 1/2 y) (/.f64 x (+.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (/.f64 x (+.f64 x y)) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (*.f64 (*.f64 y 2) (/.f64 x (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 (*.f64 x y) (*.f64 (+.f64 x y) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 x (*.f64 (+.f64 x y) (/.f64 1/2 y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 1 (/.f64 y (*.f64 (/.f64 (+.f64 x y) x) 1/2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (+.f64 x y)) (*.f64 (*.f64 y 2) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/2 (*.f64 (/.f64 x (+.f64 x y)) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 -1/2 (*.f64 (neg.f64 y) (/.f64 x (+.f64 x y))))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) 1/2) (*.f64 x y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) (/.f64 1/2 y)) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) x) 1/2) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) 1/2)) (neg.f64 (*.f64 x y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (+.f64 x y) (/.f64 1/2 y))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (neg.f64 (*.f64 (/.f64 (+.f64 x y) x) 1/2)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) 1/2) (*.f64 (neg.f64 x) y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) 1) (*.f64 (neg.f64 x) (*.f64 y 2)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (+.f64 x y) -1/2) (*.f64 x (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) -1/2) (*.f64 (neg.f64 x) (neg.f64 y)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (+.f64 x y)) (*.f64 (neg.f64 y) x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 1/2 (neg.f64 (+.f64 x y))) (*.f64 y (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (neg.f64 (+.f64 x y))) (*.f64 (neg.f64 y) (neg.f64 x)))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (/.f64 1/2 y)) 1) x)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (/.f64 1/2 y)) (pow.f64 (cbrt.f64 x) 2)) (cbrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (+.f64 x y) (/.f64 1/2 y)) (sqrt.f64 x)) (sqrt.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (+.f64 x y) x) 1/2) 1) y)))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (+.f64 x y) x) 1/2) (pow.f64 (cbrt.f64 y) 2)) (cbrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (/.f64 (*.f64 (/.f64 (+.f64 x y) x) 1/2) (sqrt.f64 y)) (sqrt.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (neg.f64 (+.f64 x y)) (/.f64 1/2 y)) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 -1/2 (/.f64 (+.f64 x y) x)) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 (+.f64 x y) x) -1/2) (neg.f64 y))))) (#(struct:change #<rule egg-rr> (2) ((x /.f64 (*.f64 (/.f64 1/2 y) (neg.f64 (+.f64 x y))) (neg.f64 x))))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))) 1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))) 2) 1/2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))) 3) 1/3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (cbrt.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))) 3)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (sqrt.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))) 2)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (/.f64 x (+.f64 x y)) (*.f64 y 2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (*.f64 (*.f64 y 2) (/.f64 x (+.f64 x y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 (*.f64 x y) (*.f64 (+.f64 x y) 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 x (*.f64 (+.f64 x y) (/.f64 1/2 y))) -1)))) (#(struct:change #<rule egg-rr> (2) ((x pow.f64 (/.f64 y (*.f64 (/.f64 (+.f64 x y) x) 1/2)) -1)))) (#(struct:change #<rule egg-rr> (2) ((x sqrt.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))) 2))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (pow.f64 (exp.f64 (/.f64 1/2 y)) (/.f64 (+.f64 x y) x)))))) (#(struct:change #<rule egg-rr> (2) ((x log.f64 (+.f64 1 (expm1.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))))))))) (#(struct:change #<rule egg-rr> (2) ((x cbrt.f64 (pow.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x expm1.f64 (log1p.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x log1p.f64 (expm1.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (log.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2)))) 1))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (*.f64 3 (log.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))))) 1/3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (cbrt.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))))) 3))))) (#(struct:change #<rule egg-rr> (2) ((x exp.f64 (*.f64 (log.f64 (sqrt.f64 (/.f64 (+.f64 x y) (*.f64 x (*.f64 y 2))))) 2))))))"]],"rules":[["egg-rr",64]],"stop":[["node limit",1]],"time":43.8779296875,"type":"rewrite"},{"count":[[88,68]],"egraph":[[2,28,204,0.00026125],[1,21,204,0.000166625],[0,12,204,7.6875e-5]],"inputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))"]],"method":["egg-herbie"],"outputs":[["(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 y)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 1/2 x)","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(+.f64 (*.f64 1/2 (/.f64 1 y)) (*.f64 1/2 (/.f64 1 x)))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"stop":[["saturated",1]],"time":12.593994140625,"type":"simplify"},{"compiler":[[1366,654]],"time":14.3291015625,"type":"eval"},{"alts":[["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","done",7.674160009768442],["(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","done",7.6328125],["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","done",0.01953125]],"compiler":[[11,7],[11,8],[9,7]],"count":[[114,3]],"kept":[{"done":[2,2],"fresh":[0,0],"new":[111,0],"picked":[1,1]}],"min-error":[0],"time":21.35205078125,"type":"prune"},{"accuracy":[0.01953125],"baseline":[0.01953125],"branch":[["x",0.01953125,1],["y",0.01953125,1],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))",0.01953125,1]],"compiler":[[3,2],[3,2],[11,7],[45,25]],"count":[[5,1]],"inputs":[["(*.f64 (/.f64 (+.f64 x y) x) (/.f64 1/2 y))","(/.f64 (+.f64 1 (/.f64 y x)) (*.f64 y 2))","(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))","(/.f64 (/.f64 (+.f64 x y) x) (*.f64 y 2))","(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))"]],"link":["."],"name":["Linear.Projection:inversePerspective from linear-1.19.1.3, C"],"oracle":[22.369020086676066],"outputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"time":11.85986328125,"times":[["x",3.77880859375],["y",3.62109375],["(/.f64 (+.f64 x y) (*.f64 (*.f64 x 2) y))",3.386962890625]],"type":"regimes"},{"compiler":[[9,7]],"egraph":[[1,8,10,2.1376e-5],[0,7,10,1.2542e-5]],"inputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"method":["egg-herbie"],"outputs":[["(+.f64 (/.f64 1/2 y) (/.f64 1/2 x))"]],"stop":[["done",1],["saturated",1]],"time":8.153076171875,"type":"simplify"},{"time":0.015869140625,"type":"soundness"},{"compiler":[[9,7],[9,7],[9,7]],"remove-preprocessing":[["(sort x y)"]],"time":8.89501953125,"type":"end"}]